@using NSIE.Models
@model Mep

@using Microsoft.AspNetCore.Http
@using Newtonsoft.Json
@inject IHttpContextAccessor HttpContextAccessor

@{
    var httpContext = HttpContextAccessor.HttpContext;
    var perfilUsuarioJson = httpContext.Session.GetString("PerfilUsuario");
    var perfilUsuario = JsonConvert.DeserializeObject<PerfilUsuario>(perfilUsuarioJson);

    // Utilizar los datos del usuario para personalizar la vista
    ViewData["NombreUsuario"] = perfilUsuario.Nombre;
    ViewData["RolUsuario"] = perfilUsuario.Rol;
    ViewData["MercadoUsuario"] = perfilUsuario.Mercado_ID;
}





@{
    ViewData["Title"] = "Mecanismo de Evaluación - Electricidad";
}
<div class="watermark-container">
    @for (int i = 0; i < 50; i++)  /* Cambiamos el número 3 por 9 para tener más marcas de agua */
    {
        <div class="watermark">
            CRE-@DateTime.Now.AddHours(-6).ToString("dd/MM/yyyy HH:mm:ss") - @ViewData["NombreUsuario"]
        </div>
    }
</div>

@*Shapes Estados*@
<script type="text/javascript" src="@Cdn.Url/Geovisualizador/shapes/estadosminlight.js"></script>
<script type="text/javascript" src="@Cdn.Url/Geovisualizador/shapes/municipiosminlight.js"></script>

<div class="text-center">
    <h3 class="cp-section cp-grouping-section"> <img src="@Cdn.Url/img_snier/vistas/mexicoi.png" alt="Icono personalizado" class="iconomenu">@ViewData["Title"]</h3>
</div>

<br />

<div class="container">

<section>
    <div class="accordion" id="accordionExample">
        <div class="accordion-item" id="seccion1">
            <h2 class="accordion-header">
                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                    <h6 class="display-6 fw-bold subtituloaco pl-3%">1.-Solicitudes a Evaluar</h6>
                </button>
            </h2>
            <div id="collapseOne" class="accordion-collapse collapse show" data-bs-parent="#accordionExample">
                <div class="accordion-body">
                  @*  <partial name="_TotalSolicitudesPartial" model="@Model" />*@
                  <br />
                       <h3 class="subtitulo display-9 fw-bold">Información General</h3> 
                    @*Seccion de Totales*@
                            <section class="section-scroll">


                                <div class="card_t">
                                        <span class="icon"><img src="@Cdn.Url/img_snier/vistas/evaluar.png" alt="Icono personalizado" class="iconomenu"></span>
                                            <h3 id="total_solicitudes"></h3>
                                            
                                            <p>Total de Solicitudes a Evaluar a Nivel Nacional</p>
                                        </div>

                                <div class="card_t">
                                        <span class="icon"><img src="@Cdn.Url/img_snier/vistas/documentoscompletos.png" alt="Icono personalizado" class="iconomenu"></span>
                                            <h3 id="documentos_completos"></h3>
                                            <p>Solicitudes con Documentos Completos a Nivel Nacional</p>
                                        </div>

                                <div class="card_t">
                                        <span class="icon"><img src="@Cdn.Url/img_snier/vistas/analisis.png" alt="Icono personalizado" class="iconomenu"></span>
                                            <h3 id="analisis_riesgo"></h3>
                                            <p>Solicitudes con Análisis de Riesgo a Nivel Nacional</p>
                                        </div>
            
                                <div class="card_t">
                                        <span class="icon"><img src="@Cdn.Url/img_snier/vistas/totales.png" alt="Icono personalizado" class="iconomenu"></span>
                                            <h3 id="total_expendios"></h3>
                                            <p>Total de Permisos de Expendio al Público</p>
                                        </div>
        

                            </section>

                           <div class="">
                            <div class="row">
                                <div class="col-md-6">
                                    <div id="grafico_rs"></div>
                                </div>
                                <div class="col-md-6">
                                    <div id="grafico_ms"></div>
                                </div>
                            </div>
                             </div>

                    <partial name="_MapaSolicitudesPartial_Electricidad" model="@Model" />

                    <h6 class="display-6 fw-bold subtitulo">Información de las Solicitudes</h6>
                    <br>
                    <br>

                    <div class="table-responsive">
                        <table id="I_SOL" class="table table-hover table-responsive table-bordered">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>Turno</th>
                                       <th>Razón Social</th>
                                            <th>Expediente </th>
                                                 <th>Marca Solicitada</th>


                                    <th>EF ID</th>
                                    <th>Entidad Federativa</th>
                                    <th>MPO ID</th>
                                    <th>Nombre del Municipio</th>
                                    <th>Análisis de Riesgo</th>
                                    @*    <th>Con Análisis de Riesgo</th>
                                        <th>Con Documentos Completos</th>*@
                                    <th>Documentos Completos</th>
                                    <th>Latitud GEO</th>
                                    <th>Longitud GEO</th>
                                    @*  <th>Total de Permisos de Expendio</th>
                                        <th>Total de Solicitudes a Evaluar</th>*@
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Los datos se agregarán aquí desde AJAX -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        <div class="accordion-item" id="seccion2">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                    <h6 class="display-6 fw-bold subtituloaco">2.-Realizar Evaluación a Nivel Entidad Federativa</h6>
                </button>
            </h2>
            <div id="collapseTwo" class="accordion-collapse collapse" data-bs-parent="#accordionExample">
                <div class="accordion-body">
                    <section id="mecanismo_evaluacion">


                        <h3 class="display-6 fw-bold subtitulo">Parámetros para realizar la Evaluación</h3>
                        <br />
                        <div class="mb-3">
                            <div class="alert " role="alert">
                                <div class="row g-2">
                                    <div class="col-12 col-sm-9 ">
                                        <!-- Cambio de col-sm-10 a col-sm-6 -->
                                        <div id="misCheckboxes" class="row ">
                                            <div class="col">
                                                <div class="alert alert alert-success" role="alert">
                                                    <h5 class="text-center fw-bold subtitulo1"><img src="@Cdn.Url/img_snier/vistas/checkindi.png" alt="Icono personalizado" class="iconomenu"> Indicadores para la Evaluación a nivel Entidad Federativa:</h5>
                                                    <br />

                                                    <div class="form-group">
                                                        <div class="row">
                                                            <div class="col-md-6">
                                                                <!-- Contenido de los checkboxes -->
                                                                <div class="form-check">
                                                                    <input class="form-check-input" type="checkbox" name="checkboxes" value="1" id="chk1" checked disabled />
                                                                    <label class="form-check-label" for="chk1">Indicador 1 - Atención al Usuario Final</label>
                                                                </div>
                                                                <div class="form-check">
                                                                    <input class="form-check-input" type="checkbox" name="checkboxes" value="2" id="chk2" checked disabled />
                                                                    <label class="form-check-label" for="chk2">Indicador 2 - Densidad Territorial de Vehículos</label>
                                                                </div>
                                                                <div class="form-check">
                                                                    <input class="form-check-input" type="checkbox" name="checkboxes" value="3" id="chk3" checked disabled />
                                                                    <label class="form-check-label" for="chk3">Indicador 3 - Densidad Territorial de Expendios</label>
                                                                </div>
                                                                <div class="form-check">
                                                                    <input class="form-check-input" type="checkbox" name="checkboxes" value="4" id="chk4" checked disabled />
                                                                    <label class="form-check-label" for="chk4">Indicador 4 - Couta de Consumo por Vehículo</label>
                                                                </div>
                                                                <div class="form-check">
                                                                    <input class="form-check-input" type="checkbox" name="checkboxes" value="5" id="chk5" checked disabled />
                                                                    <label class="form-check-label" for="chk5">Indicador 5 - Marginación</label>
                                                                </div>
                                                                <div class="form-check">
                                                                    <input class="form-check-input" type="checkbox" name="checkboxes" value="6" id="chk6" checked disabled />
                                                                    <label class="form-check-label" for="chk6">Indicador 6 - Cuota de Mercado de Gas LP</label>
                                                                </div>
                                                                <div class="form-check">
                                                                    <input class="form-check-input" type="checkbox" name="checkboxes" value="7" id="chk7" checked disabled />
                                                                    <label class="form-check-label" for="chk7">Indicador 7 - Cuota de Mercado por Tipo de Recipiente: Cilindro</label>
                                                                </div>
                                                                <div class="form-check">
                                                                    <input class="form-check-input" type="checkbox" name="checkboxes" value="8" id="chk8" checked disabled />
                                                                    <label class="form-check-label" for="chk8">Indicador 8 - Cuota de Mercado por Tipo de Recipiente: Fijo o Estacionario</label>
                                                                </div>
                                                                <div class="form-check">
                                                                    <input class="form-check-input" type="checkbox" name="checkboxes" value="9" id="chk9" checked disabled />
                                                                    <label class="form-check-label" for="chk9">Indicador 9 - Tasa de Consumo Exosomático</label>
                                                                </div>
                                                            </div>
                                                            <div class="col-md-6">
                                                                <!-- Contenido de los checkboxes -->
                                                                <div class="form-check">
                                                                    <input class="form-check-input indicador-especial" type="checkbox" name="checkboxes" value="10" id="chk10" checked disabled />
                                                                    <label class="form-check-label" for="chk10">Indicador 10 - Nearshoring</label>
                                                                </div>
                                                                <div class="form-check">
                                                                    <input class="form-check-input indicador-especial" type="checkbox" name="checkboxes" value="11" id="chk11" checked disabled />
                                                                    <label class="form-check-label" for="chk11">Indicador 11 - Nearshoring con restricción de Agua</label>
                                                                </div>
                                                                <div class="form-check">
                                                                    <input class="form-check-input" type="checkbox" name="checkboxes" value="12" id="chk12"  checked disabled />
                                                                    <label class="form-check-label" for="chk12">Indicador 12 - Impulso al Desarrollo del Sureste</label>
                                                                </div>
                                                                  <div class="form-check">
                                                                    <input class="form-check-input" type="checkbox" name="checkboxes" value="13" id="chk13" checked disabled />
                                                                    <label class="form-check-label" for="chk13">Indicador 13 - Desplazamiento de Leña</label>
                                                                </div>
                                                                  <div class="form-check">
                                                                    <input class="form-check-input" type="checkbox" name="checkboxes" value="14" id="chk14" checked  disabled />
                                                                    <label class="form-check-label" for="chk14">Indicador 14 - Desplazamiento de Gasolina de Gas L.P.</label>
                                                                </div>
                                                                 @* <div class="form-check">
                                                                        <input class="form-check-input" type="checkbox" name="checkboxes" value="15" id="chk15" checked  disabled />
                                                                    <label class="form-check-label" for="chk15">Indicador 15 - Indicadores de Demanda Interna de los Usuarios Finales</label>
                                                                </div>*@
                                                                <div id="result-message_1" class="alert alert-warning pb-3 text-center" role="alert" style="display: none;">
                                                                    <strong><i class="bi bi-exclamation-octagon-fill"></i> Solo puedes seleccionar un indicador de Nearshoring.</strong>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>

                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-12 col-sm-3">
                                        <!-- Cambio de col-sm-4 a col-sm-6 -->
                                        <div class="alert alert-success" role="alert">
                                            @*  <h6 class="alert-heading subtitulo">Umbral para el Cálculo:</h6>*@
                                            <input type="number" class="form-control umbral_p1" placeholder="⬅️" name="umbral" id="umbral" value="0.1" disabled="disabled" style="display:none" />
                                            <button type="submit" id="btnMostrar" class="btn btn-cre-verde mt-3"><i class="bi bi-play"></i> ¡Ejecutar Evaluación!</button>
                                            <button type="button" id="btnHabilitar" class="btn btn-cre-verde mt-3" style="display: none" disabled>-> Haz clic aquí para realizar otra evaluación!</button>
                                            <hr>
                                            <div id="result-message" class="alert alert-warning pb-3 text-center" role="alert">
                                                <strong><i class="bi bi-exclamation-octagon-fill"></i></strong>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="container mt-3">
                            <div class="progress mt-3" style="display: none">
                                <div class="progress-bar progress-bar-striped progress-bar-animated progress-bar-nacional" role="progressbar" aria-valuemin="0" aria-valuemax="100">
                                    Ejecutando Corrida con los Indicadores Seleccionados... (espere)
                                </div>
                            </div>

                        </div>
                    </section>

                </div>
            </div>
        </div>
        <div class="accordion-item" id="seccion3" style="display:none">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
                    <h6 class="display-6 fw-bold subtituloaco">3.-Ver Resultados de la Evaluación por Entidad Federativa</h6>

                </button>
            </h2>
            <div id="collapseThree" class="accordion-collapse collapse" data-bs-parent="#accordionExample">
                <div class="accordion-body">
                    <partial name="_ResultadosEFPartial_Electricidad" model="@Model" />
                </div>
            </div>
        </div>
        <div class="accordion-item" id="seccion4" style="display:none">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseFour" aria-expanded="false" aria-controls="collapseFour">
                    <h6 class="display-6 fw-bold subtituloaco">4.-Realizar Evaluación a Nivel Municipal</h6>

                </button>
            </h2>
            <div id="collapseFour" class="accordion-collapse collapse" data-bs-parent="#accordionExample">
                <div class="accordion-body">


                    <section id="mecanismo_evaluacion_mun">

                        <h3 class="display-6 fw-bold subtitulo">Parámetros para realizar la Evaluación a Nivel Municipal</h3>
                        <br />
                        <div class="mb-3">
                            <div class="alert grayclaro" role="alert">
                                <div class="row g-2">
                                    <div class="col-12 col-sm-9">
                                        <!-- Cambio de col-sm-10 a col-sm-6 -->
                                        <div id="misCheckboxes_mun" class="row">
                                            <div class="col">
                                                <div class="alert alert-success" role="alert">
                                                    <h5 class="text-center fw-bold subtitulo1"><img src="@Cdn.Url/img_snier/vistas/checkindi.png" alt="Icono personalizado" class="iconomenu">Indicadores para la Evaluación a nivel Municipal:</h5>
                                                    <br />
                                                
                                                    <div class="form-group">
                                                        <div class="form-check">
                                                            <input class="form-check-input" type="checkbox" name="checkboxes_mun" value="1" id="chk1_mun" checked disabled />
                                                            <label class="form-check-label" for="chk1_mun">Indicador Municipal 1 - Atención al Usuario Final</label>
                                                        </div>
                                                        <div class="form-check">
                                                            <input class="form-check-input" type="checkbox" name="checkboxes_mun" value="3" id="chk2_mun" checked disabled />
                                                                <label class="form-check-label" for="chk2_mun">Indicador Municipal 2 - Accesibilidad</label>
                                                        </div>
                                                        <div class="form-check">
                                                            <input class="form-check-input" type="checkbox" name="checkboxes_mun" value="5" id="chk3_mun" checked disabled />
                                                            <label class="form-check-label" for="chk3_mun">Indicador Municipal 3 - Marginación</label>
                                                        </div>
                                                        <div class="form-check">
                                                            <input class="form-check-input" type="checkbox" name="checkboxes_mun" value="12" id="chk4_mun" checked disabled />
                                                            <label class="form-check-label" for="chk4_mun">Indicador Municipal 4 - Impulso al Desarrollo del Sureste</label>
                                                        </div>
            
                                                    </div>

                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-12 col-sm-3">
                                        <!-- Cambio de col-sm-4 a col-sm-6 -->
                                        <div class="alert alert-success" role="alert">
                                            <h6 class="alert-heading subtitulo">Umbral para el Cálculo a nivel Municipal:</h6>
                                            <input type="number" class="form-control umbral_p1" placeholder="⬅️" name="umbral" id="umbral_mun" value="0.1" disabled="disabled" />
                                            <hr>
                                            <button type="submit" id="btnMostrar_mun" class="btn btn-cre-verde mt-3"><i class="bi bi-play"></i> ¡Ejecutar Evaluación Municipal!</button>
                                            <button type="button" id="btnHabilitar_mun" class="btn btn-cre-verde mt-3" style="display: none" disabled>-> Haz click aquí para realizar otra evaluación!</button>
                                            <div id="result-message_mun" class="alert alert-warning pb-3 text-center" role="alert">
                                                <strong><i class="bi bi-exclamation-octagon-fill"></i></strong>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="container mt-3">
                            <div class="progress mt-3" style="display: none">
                                <div class="progress-bar progress-bar-striped progress-bar-animated progress-bar-municipal" role="progressbar" aria-valuemin="0" aria-valuemax="100">
                                    Ejecutando Corrida con los Indicadores Seleccionados a Nivel Municipal... (espere)
                                </div>
                            </div>

                        </div>
                    </section>


                </div>
            </div>
        </div>
        <div class="accordion-item" id="seccion5" style="display:none">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseFive" aria-expanded="false" aria-controls="collapseFive">
                    <h6 class="display-6 fw-bold subtituloaco"> 5.-Resultados de la Evaluación a Nivel Municipal</h6>

                </button>
            </h2>
            <div id="collapseFive" class="accordion-collapse collapse" data-bs-parent="#accordionExample">
                <div class="accordion-body">

                    <partial name="_ResultadosMUNPartial_Electricidad" model="@Model" />

                </div>
            </div>
        </div>
    </div>


</section>

<br />
</div>


@section scripts{


    @*Campos Visbles del popup*@
    <script>
        var camposVisiblesGlobal = [];
        $(document).ready(function () {
            $.ajax({
                url: '/Indicadores/GetCamposVisiblesElectricidad', // Asegúrate de actualizar con el nombre de tu controlador
                type: 'GET',
                contentType: 'application/json',
                success: function (camposVisibles) {
                    // Aquí tienes la lista de campos visibles
                    console.log("CamposVisiblesElectricidad:",camposVisibles);
                    camposVisiblesGlobal = camposVisibles;



                },
                error: function (error) {
                    console.error("Error al obtener campos visibles", error);
                }
            });
        });

    </script>


 @*Carga de Datos al Mapa*@
<script>
    
    
    //Carga los Datos para la Evaluación
    function Total_a_Evaluar() {
            $.ajax({
                url: '/Indicadores/GetTotales_a_Evaluar_Electricidad',
                type: 'GET',
                contentType: 'application/json',
                success: function (response) {
                 //   console.log("Totales EF:", response);

                    // Asignando los Totales a las tarjetas
                    for (var i = 0; i < response.length; i++) {
                        var totalSolicitudes = response[i].total_de_Solicitudes_a_Evaluar.toLocaleString();
                        var documentosCompletos = response[i].con_Documentos_Completos.toLocaleString();
                        var analisisRiesgo = response[i].con_Analisis_de_Riesgo !== null ? response[i].con_Analisis_de_Riesgo.toLocaleString() : "";
                        var totalExpendios = response[i].total_de_Permisos_de_Expendio.toLocaleString();

                        document.getElementById('total_solicitudes').innerText = totalSolicitudes;
                        document.getElementById('documentos_completos').innerText = documentosCompletos;
                        document.getElementById('analisis_riesgo').innerText = analisisRiesgo;
                        document.getElementById('total_expendios').innerText = totalExpendios;
                    }
                },
                error: function (error) {
                    console.log("Fallo al cargar los totales a Evaluar =(", response);
                }
            });
        }
    Total_a_Evaluar();

    //Busquedas

        var availableTerms = [];//Variable global para almacenar los terminos de búqueda Sugerencia de Terminos

        var currentMarker = null; // Referencia al marcador actual
        var municipiosFiltrados = null;
        var lastSearchedEstadoLayer = null; // para almacenar la última entidad federativa buscada
        var lastSearchedMunicipioLayer = null; // para almacenar el último municipio buscado

        //Colores
        var initialStyle = {
            color: '#187A8C', // Color de línea
            fillColor: '#187A8C', // Color de relleno
            fillOpacity: 0.3, // Opacidad del relleno
            weight: 3 // Ancho de la línea
        };

        // Estilo para el hover
        var highlightStyle = {
            color: '#FFDB2EC',
            fillColor: '#FFDB2E', // Color de relleno
            fillOpacity: 0.3, // Opacidad del relleno
            weight: 3
        };

        

        // Capa de estados
        var estadosLayer = L.geoJSON(estados, {
            style: initialStyle, // Aplicar estilo inicial
            onEachFeature: function (feature, layer) {
                layer.bindTooltip('<div class="custom-tooltip">' + feature.properties.NOMGEO + '</div>');
                layer.on('click', function (e) {
                    cargarMunicipios(feature.properties.CVE_ENT);
                    map.fitBounds(layer.getBounds()); // Centra el mapa en el estado
                });
                // Efecto de hover
                layer.on('mouseover', function (e) {
                    layer.setStyle(highlightStyle);
                });
                layer.on('mouseout', function (e) {
                    estadosLayer.resetStyle(layer);
                });
            }
        }).addTo(map);

        // Capa de municipios (inicialmente vacía)
        var municipiosLayer = L.geoJSON(null, {
            style: initialStyle, // Aplicar estilo inicial
            onEachFeature: onEachMunicipio
        }).addTo(map);

        function onEachMunicipio(feature, layer) {
            layer.bindTooltip('<div class="custom-tooltip">' + feature.properties.NOM_MUN + ', ' + feature.properties.NOMGEO + '</div>');
            // Efecto de hover
            layer.on('mouseover', function (e) {
                layer.setStyle(highlightStyle);
            });
            layer.on('mouseout', function (e) {
                municipiosLayer.resetStyle(layer);
            });
        
        }

        function cargarMunicipios(cveEnt) {
            municipiosLayer.clearLayers();

            if (currentMarker) {
                map.removeLayer(currentMarker);
                currentMarker = null;
            }

            municipiosFiltrados = {
                type: "FeatureCollection",
                features: municipios_mapa.features.filter(function (feature) {
                    return feature.properties.CVE_ENT === cveEnt;
                })
            };

            municipiosLayer.addData(municipiosFiltrados);
        }

        // Asignando a la búsqueda de términos
        estadosLayer.eachLayer(function (layer) {
            if (layer.feature.properties.NOMGEO) { // Asegúrate de que la propiedad existe
                availableTerms.push(layer.feature.properties.NOMGEO);
            }
        });

        for (var i = 0; i < municipios_mapa.features.length; i++) {
            var municipio = municipios_mapa.features[i].properties.NOM_MUN;
            var estado = municipios_mapa.features[i].properties.NOMGEO; // Asumiendo que esta es la propiedad correcta para el estado

            // Asegúrate de que ambas propiedades existen antes de concatenar
            if (municipio && estado) {
                var nombreCompleto = municipio + ", " + estado;
                availableTerms.push(nombreCompleto);
            }
        }

        var datosSolExpendios; // variable global para almacenar todos los expendios
        function buscarPorNumeroPermiso() {
            var numeroBuscado = document.getElementById('busquedaPermisoInput').value.trim();

            if (!numeroBuscado) {
                alert("Por favor, introduce un Número de Solicitud o de Turno Virtual K-MIS.");
                return;  // Termina la ejecución de la función si el campo está vacío
            }

            var encontrado = false;

            for (var i = 0; i < datosSolExpendios.length; i++) {
                var expendio = datosSolExpendios[i];
                if (expendio.id === numeroBuscado || expendio.turno === numeroBuscado) {
                    var lat = expendio.latitud_GEO;
                    var lon = expendio.longitud_GEO;
                    map.setView([lat, lon], 15); // 15 es el nivel de zoom, puedes ajustarlo según prefieras
                    encontrado = true;
                    break;
                }
            }

            // Si no se encontró por número de permiso, busca por entidad federativa
            if (!encontrado) {
                estadosLayer.eachLayer(function (layer) {
                    if (layer.feature.properties.NOMGEO === numeroBuscado) {
                        map.fitBounds(layer.getBounds());

                        // Si ya había una entidad federativa buscada anteriormente, restablecemos su estilo
                        if (lastSearchedEstadoLayer) {
                            estadosLayer.resetStyle(lastSearchedEstadoLayer);
                        }

                        // Resalta la entidad federativa encontrada
                        layer.setStyle({
                            color: '#FF0000',
                            fillColor: '#FF0000',
                            fillOpacity: 0.5
                        });

                        lastSearchedEstadoLayer = layer;

                        // Reiniciar el estilo de la entidad después de 5 segundos
                        setTimeout(function () {
                            estadosLayer.resetStyle(lastSearchedEstadoLayer);
                            lastSearchedEstadoLayer = null;
                        }, 5000);

                        encontrado = true;
                    }
                });
            }

            // Si aún no se encontró, busca por municipio en la fuente de datos completa
            if (!encontrado) {
                // Divide el término de búsqueda en municipio y estado
                var terminos = numeroBuscado.split(',');
                var buscadoMunicipio = terminos[0].trim();
                var buscadoEstado = terminos.length > 1 ? terminos[1].trim() : '';

                for (var i = 0; i < municipios_mapa.features.length; i++) {
                    var municipio = municipios_mapa.features[i];
                    var nombreMunicipio = municipio.properties.NOM_MUN;
                    var nombreEstado = municipio.properties.NOMGEO;

                    // Comprueba si el nombre del municipio y del estado coinciden con el término de búsqueda
                    if (nombreMunicipio === buscadoMunicipio && (buscadoEstado === '' || nombreEstado === buscadoEstado)) {
                        var bounds = L.geoJSON(municipio).getBounds();
                        map.fitBounds(bounds);

                        // Si ya había un municipio buscado anteriormente, lo elimina
                        if (lastSearchedMunicipioLayer) {
                            map.removeLayer(lastSearchedMunicipioLayer);
                        }

                        // Agrega el municipio encontrado al mapa y lo resalta
                        lastSearchedMunicipioLayer = L.geoJSON(municipio, {
                            style: {
                                color: '#FF0000',
                                fillColor: '#FF0000',
                                fillOpacity: 0.5
                            }
                        }).addTo(map);

                        // Reiniciar el estilo y eliminar el municipio después de 5 segundos
                        setTimeout(function () {
                            map.removeLayer(lastSearchedMunicipioLayer);
                            lastSearchedMunicipioLayer = null;
                        }, 5000);

                        encontrado = true;
                        break;
                    }
                }
            }

            if (!encontrado) {
                alert("Número de Solicitud o Turno Vistual No encontrado.");
            }
        }
        function buscarPorNumeroPermisoMUN() {
            var numeroBuscado = document.getElementById('busquedaPermisoInputMUN').value.trim();

            if (!numeroBuscado) {
                alert("Por favor, introduce un Número de Solicitud, Turno K-mis, Estado o Municipio.");
                return;  // Termina la ejecución de la función si el campo está vacío
            }

            var encontrado = false;

            for (var i = 0; i < datosSolExpendios.length; i++) {
                var expendio = datosSolExpendios[i];
                if (expendio.id === numeroBuscado || expendio.turno === numeroBuscado) {
                    var lat = expendio.latitud_GEO;
                    var lon = expendio.longitud_GEO;
                    map.setView([lat, lon], 15); // 15 es el nivel de zoom, puedes ajustarlo según prefieras
                    encontrado = true;
                    break;
                }
            }

            // Si no se encontró por número de permiso, busca por entidad federativa
            if (!encontrado) {
                estadosLayer.eachLayer(function (layer) {
                    if (layer.feature.properties.NOMGEO === numeroBuscado) {
                        mapmun.fitBounds(layer.getBounds());

                        // Si ya había una entidad federativa buscada anteriormente, restablecemos su estilo
                        if (lastSearchedEstadoLayer) {
                            estadosLayer.resetStyle(lastSearchedEstadoLayer);
                        }

                        // Resalta la entidad federativa encontrada
                        layer.setStyle({
                            color: '#FF0000',
                            fillColor: '#FF0000',
                            fillOpacity: 0.5
                        });

                        lastSearchedEstadoLayer = layer;

                        // Reiniciar el estilo de la entidad después de 5 segundos
                        setTimeout(function () {
                            estadosLayer.resetStyle(lastSearchedEstadoLayer);
                            lastSearchedEstadoLayer = null;
                        }, 5000);

                        encontrado = true;
                    }
                });
            }

            // Si aún no se encontró, busca por municipio en la fuente de datos completa
            if (!encontrado) {
                // Divide el término de búsqueda en municipio y estado
                var terminos = numeroBuscado.split(',');
                var buscadoMunicipio = terminos[0].trim();
                var buscadoEstado = terminos.length > 1 ? terminos[1].trim() : '';


                for (var i = 0; i < municipios_mapa.features.length; i++) {
                    var municipio = municipios_mapa.features[i];
                    var nombreMunicipio = municipio.properties.NOM_MUN;
                    var nombreEstado = municipio.properties.NOMGEO;

                    // Comprueba si el nombre del municipio y del estado coinciden con el término de búsqueda
                    if (nombreMunicipio === buscadoMunicipio && (buscadoEstado === '' || nombreEstado === buscadoEstado)) {
                        var bounds = L.geoJSON(municipio).getBounds();
                        mapmun.fitBounds(bounds);

                        // Si ya había un municipio buscado anteriormente, lo elimina
                        if (lastSearchedMunicipioLayer) {
                            mapmun.removeLayer(lastSearchedMunicipioLayer);
                        }

                        // Agrega el municipio encontrado al mapa y lo resalta
                        lastSearchedMunicipioLayer = L.geoJSON(municipio, {
                            style: {
                                color: '#FF0000',
                                fillColor: '#FF0000',
                                fillOpacity: 0.5
                            }
                        }).addTo(mapmun);

                        // Reiniciar el estilo y eliminar el municipio después de 5 segundos
                        setTimeout(function () {
                            mapmun.removeLayer(lastSearchedMunicipioLayer);
                            lastSearchedMunicipioLayer = null;
                        }, 5000);

                        encontrado = true;
                        break;
                    }
                }
            }

            if (!encontrado) {
                alert("Número de Solicitud o Turno Vistual No encontrado.");
            }
        }

        // Función para inicializar el autocompletar
        function autocomplete(inp, arr) {
            var currentFocus;

            inp.addEventListener("input", function (e) {
                var a, b, i, val = this.value;
                closeAllLists();
                if (!val) { return false; }
                currentFocus = -1;

                a = document.getElementById("autocomplete-list");
                a.innerHTML = "";

                for (i = 0; i < arr.length; i++) {
                    if (arr[i].substr(0, val.length).toUpperCase() === val.toUpperCase()) {
                        b = document.createElement("DIV");
                        b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                        b.innerHTML += arr[i].substr(val.length);
                        b.addEventListener("click", function (e) {
                            inp.value = this.innerText;
                            closeAllLists();
                            setTimeout(buscarPorNumeroPermiso, 100); // Llama a tu función de búsqueda después de un breve retraso
                        });
                        a.appendChild(b);
                    }
                }
            });

            function closeAllLists(elmnt) {
                var x = document.getElementById("autocomplete-list");
                if (elmnt != x && elmnt != inp) {
                    x.innerHTML = "";
                }
            }

            document.addEventListener("click", function (e) {
                closeAllLists(e.target);
            });
        }

        // Función para inicializar el autocompletar
        function autocompleteMUN(inp, arr) {
            var currentFocus;

            inp.addEventListener("input", function (e) {
                var a, b, i, val = this.value;
                closeAllListsMUN();
                if (!val) { return false; }
                currentFocus = -1;

                a = document.getElementById("autocomplete-list-mun");
                a.innerHTML = "";

                for (i = 0; i < arr.length; i++) {
                    if (arr[i].substr(0, val.length).toUpperCase() === val.toUpperCase()) {
                        b = document.createElement("DIV");
                        b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                        b.innerHTML += arr[i].substr(val.length);
                        b.addEventListener("click", function (e) {
                            inp.value = this.innerText;
                            closeAllListsMUN();
                            setTimeout(buscarPorNumeroPermisoMUN, 100); // Llama a tu función de búsqueda después de un breve retraso
                        });
                        a.appendChild(b);
                    }
                }
            });

            function closeAllListsMUN(elmnt) {
                var x = document.getElementById("autocomplete-list-mun");
                if (elmnt != x && elmnt != inp) {
                    x.innerHTML = "";
                }
            }

            document.addEventListener("click", function (e) {
                closeAllLists(e.target);
            });
        }

        // Usamos un objeto Set para filtrar los duplicados, ya que un Set solo permite valores únicos
        var uniqueTerms = [...new Set(availableTerms)];
        console.log("Unicos:", uniqueTerms); 

        // Debes llamar a esta función después de que los datos de expendios y solicitudes estén disponibles
        // Por ejemplo, después de las llamadas AJAX en ObtienePermisos y CargaSolicitudesInicio
        // Ahora puedes usar $.when para esperar a que ambas llamadas AJAX se completen
        $.when(CargaSolicitudesInicio()).done(function () {
            // Luego puedes inicializar el autocompletado aquí, ya que now todos los datos están listos
            autocomplete(document.getElementById("busquedaPermisoInput"), uniqueTerms);
            autocompleteMUN(document.getElementById("busquedaPermisoInputMUN"), uniqueTerms);
        });

    //Carga las Solicitudes de Electricidad(Ahorita Petrolíferos actualizar!) al mapa
    function CargaSolicitudesInicio() {

         $.ajax({
                url: '/Indicadores/GetSolicitudes_Electricidad',
                        type: 'GET',


                        contentType: 'application/json',

                    success: function (response) {
                    datosSolExpendios = response;
                    // console.log("Get Solicitudes:", response); // ver la respuesta en consola
                                                        // Crea un grupo de marcadores
                                                       var markers = L.markerClusterGroup();

                                                        //Crea los Iconos
                                                        var iconoBase = L.Icon.extend({
                                                            options: {
                                                                iconSize: [24, 24],
                                                                iconAnchor: [12, 16],
                                                                popupAnchor: [-3, -76]
                                                            }
                                                        });

                                                        //Asignación de Iconos
                                                        var iconoSolicitudes = new iconoBase({ iconUrl: '@Cdn.Url/img_snier/vistas/Solicitudes.png' });
                                                        var iconoSolicitudesUrl;
                                                        iconoSolicitudesUrl = '@Cdn.Url/img_snier/vistas/Solicitudes.png';
                                                        // Añade marcadores al grupo para cada conjunto de coordenadas en la respuesta
                                                        response.forEach(function (item) {
                                                            // Asigna el icono de acuerdo a la categoría


                                                            var marker = L.marker([item.latitud_GEO, item.longitud_GEO], { icon: iconoSolicitudes });


                                                            marker.bindPopup(
                                                                "<style>" +
                                                                ".popup-content {" +
                                                                "width: 300px;" +
                                                                "height: 150px;" +
                                                                "overflow-y: auto;" +
                                                                "padding: 10px;" +
                                                                "}" +
                                                                "h2, h3, h4, p, li {" +
                                                                "margin: 0 0 10px 0;" +
                                                                "}" +
                                                                "ul {" +
                                                                "padding-left: 20px;" +
                                                                "}" +
                                                                "img {" +
                                                                "vertical-align: middle;" +
                                                                "margin-right: 10px;" +
                                                                "}" +
                                                                "</style>" +
                                                                "<div class='popup-content'>" +
                                                                "<h2 class='subtitulo'><img src='" + iconoSolicitudesUrl + "' style='height: 24px; width: 24px;'/><strong>" + item.razon_social + "</strong></h2>" +
                                                                "<br>" +
                                                                "<h6> Marca Solicitada: " + item.marca_solicitada + "</h6>" +
                                                                "<h6><i class='bi bi-qr-code'></i> Turno de Kmis: " + item.turno + "</h6>" +
                                                                "<h6><i class='bi bi-fingerprint'></i> ID Solicitud: " + item.id + "</h6>" +
                                                                "<p><i class='bi bi-geo-alt-fill'></i> Entidad Federativa: " + item.eF_Nombre + "</p>" +
                                                                "<ul>" +
                                                                "<li><strong>Municipio:</strong> " + item.municipio_Nombre + "</li>" +
                                                                "<li><strong>¿Documentos Completos?:</strong> " + (item.documentos_completos == "1" ? 'SI' : 'No') + "</li>" +
                                                                "<li><strong>¿Tiene Análisis de Riesgo?:</strong> " + (item.analisis_riesgo == "1" ? 'SI' : 'No') + "</li>" +
                                                                "</ul>" +
                                                                "<a class='street-view-link btn btn-cre-verde' href='#'>Ver vista de calle</a> <hr />" +
                                                                "<a class='btn btn-cre-rojo' target='_blank' href='https://titan.cre.gob.mx/Consulta/Turno/" + item.turno + "'>Ver Expediente en Kmis</a>" +
                                                                "</div>"
                                                            );


                                                            marker.on('popupopen', function (e) {
                                                                var popup = e.popup;
                                                                var streetViewLink = popup.getElement().querySelector('.street-view-link');
                                                                streetViewLink.addEventListener('click', function () {
                                                                    var lat = e.target.getLatLng().lat.toPrecision(8);
                                                                    var lon = e.target.getLatLng().lng.toPrecision(8);
                                                                    var streetViewURL = 'http://maps.google.com/maps?q=&layer=c&cbll=' + lat + ',' + lon + '&cbp=11,0,0,0,0';
                                                                    window.open(streetViewURL, '_blank');
                                                                });
                                                            });

                                                            markers.addLayer(marker);
                                                            var circle = L.circle([item.latitud_GEO, item.longitud_GEO], {
                                                                color: '#1e3143', // Color del círculo
                                                                fillColor: '#1e3143', // Color de relleno del círculo
                                                                fillOpacity: 0.2, // Opacidad del relleno del círculo
                                                                radius: 300       // Radio en metros
                                                            }).addTo(map);

                                                        });

                                                        map.addLayer(markers);

                                        ///////////////////////////////////////////////////////////////////////////
                                         ////////////////SIDE BAR SOLICITUDES//////////////////////////////////
                                                const municipios = [];


                                               // console.log("Regresa:", coordenadasp);
                                                for (var j = 0; j < response.length; j++) {
                                                    var coordenada = response[j];
                                                    var iconoSeleccionado = iconoSolicitudes;

                                                    var municipio = {
                                                        rs: coordenada.razon_social,
                                                        ms: coordenada.marca_solicitada,
                                                        nombre: coordenada.turno,
                                                        coordenadas: [coordenada.latitud_GEO, coordenada.longitud_GEO],
                                                        resultado: coordenada.id,
                                                        icono: iconoSeleccionado
                                                    };
                                                    municipios.push(municipio);
                                                }
                                               // console.log("Nuevo Arrelo:", municipios);


                                                //Entidades Federativas
                                                const sidebar = document.querySelector('#sidebar');


                                                //Eventos Baiscos

                                                map.on('click', (evento) => {
                                                    const lat = evento;
                                                    console.log(lat.latlng)
                                                });

                                                //Metodos
                                                map.center

                                                //Funciones

                                                //Fly to Place
                                                const volar = (latlng) => {
                                                    map.flyTo(latlng, 13);
                                                }

                                                //Fly to
                                                // Municipio
                                                const volar_municipio = (latlng) => {
                                                    map.flyTo(latlng, 13);
                                                }

                                                //Limpiar Items del Side Bar
                                                const limpiaritems = () => {
                                                    const listadoLi = document.querySelectorAll('li');
                                                    listadoLi.forEach(li => {
                                                        li.classList.remove('active');
                                                    })
                                                }



                                                // Crea el Side Bar
                                                  const crearitem = () => {
                                                        const ul = document.createElement('ul');
                                                        ul.classList.add('list-group');
                                                        ul.style.overflow = 'auto'; // Habilitar desplazamiento


                                                        ul.style.maxHeight = 'calc(280vh - 80px)'; // Ajustar el tamaño máximo
                                                        sidebar.append(ul);


                                                        // Crear el elemento "Selecciona una Solicitud"
                                                        const seleccionaSolicitud = document.createElement('p');
                                                        seleccionaSolicitud.classList.add('btn', 'btn-cre-verde', 'text-center');
                                                        seleccionaSolicitud.innerText = 'Turno Solicitud Kmis:';
                                                        seleccionaSolicitud.style.position = 'sticky'; // Establecer la posición sticky
                                                        seleccionaSolicitud.style.top = '0'; // Asegurar que esté al inicio del sidebar
                                                        sidebar.prepend(seleccionaSolicitud);

                                                        municipios.forEach((lugar) => {
                                                            const li = document.createElement('li');
                                                            li.classList.add('list-group-item');
                                                            li.style.height = '200px'; // Establecer altura fija
                                                            li.style.marginBottom = '10px'; // Agregar margen inferior

                                                            // Agregar el texto "ID solicitud: lugar.nombre"
                                                            const texto = document.createElement('span');
                                                            texto.innerHTML = `<strong>ID:</strong> ${lugar.resultado.slice(0, 10)}<br><strong>Turno:</strong> ${lugar.nombre.slice(0, 10)}<br><strong>Razón Social:</strong> ${lugar.rs.slice(0, 10)}<br><strong>Marca Solicitada:</strong> ${lugar.ms.slice(0, 10)}`;
                                                            li.appendChild(texto);

                                                            // Agregar el icono correspondiente
                                                            const icono = document.createElement('img');
                                                            icono.src = lugar.icono.options.iconUrl;
                                                            icono.classList.add('icono-responsivo'); // Agregar la clase CSS para el icono
                                                            li.insertBefore(icono, texto); // Insertar el icono antes del texto

                                                            ul.append(li);

                                                            li.addEventListener('click', () => {
                                                                limpiaritems();
                                                                li.classList.add('active');
                                                                volar(lugar.coordenadas);
                                                            });
                                                        });
                                                   };


                                                crearitem();




                                        //////////////////////////////////////Grafico de "Razon_social"
                                                            var conteors = {};

                                                            // Recorre el arreglo y cuenta las solicitudes por "Razon_social"
                                                            for (var i = 0; i < response.length; i++) {
                                                                var razonSocial = response[i].razon_social;

                                                                if (conteors[razonSocial]) {
                                                                    conteors[razonSocial]++;
                                                                } else {
                                                                    conteors[razonSocial] = 1;
                                                                }
                                                            }
                                                            // Generar colores pastel aleatorios
                                                            function generateRandomPastelColor() {
                                                                var colors = ['#0a88b1', '#f5e3a3', '#97d96d', '#ee4f43', '#9f2241', '#e63950', '#59b25d', '#f2cf44'];
                                                                var randomIndex = Math.floor(Math.random() * colors.length);
                                                                return colors[randomIndex];
                                                            }
                                                            // Convertir los datos en un arreglo de objetos para el gráfico Treemap
                                                            var treemapData = Object.keys(conteors).map(function (razonSocial) {
                                                                return {
                                                                    name: razonSocial,
                                                                    value: conteors[razonSocial],
                                                                    color: generateRandomPastelColor()
                                                                };
                                                            });

                                                            // Configurar opciones del gráfico
                                                            var options = {
                                                                chart: {
                                                                    type: 'treemap'
                                                                },
                                                                title: {
                                                                    text: 'Solicitudes por Razón Social'
                                                                },
                                                                series: [{
                                                                    type: 'treemap',
                                                                    layoutAlgorithm: 'squarified',
                                                                    data: treemapData
                                                                }],
                                                                tooltip: {
                                                                    pointFormat: '<b>{point.name}</b>: {point.value}'
                                                                }
                                                            };

                                                            // Renderizar el gráfico en el contenedor con el ID 'miGraficoDiv'
                                                            Highcharts.chart('grafico_rs', options);

                                        ////////////Marca Solicitada////////////

                                                // Crea un objeto para almacenar los conteoms de cada "Marca_solicitada"
                                                var conteoms = {};

                                                // Recorre el arreglo y cuenta las solicitudes por "Marca_solicitada"
                                                for (var i = 0; i < response.length; i++) {
                                                    var marcaSolicitada = response[i].marca_solicitada;

                                                    if (conteoms[marcaSolicitada]) {
                                                        conteoms[marcaSolicitada]++;
                                                    } else {
                                                        conteoms[marcaSolicitada] = 1;
                                                    }
                                                }
                                                // Convertir los datos en un arreglo de objetos para el gráfico Treemap
                                                var treemapDatams = Object.keys(conteoms).map(function (marcaSolicitada) {
                                                    return {
                                                        name: marcaSolicitada,
                                                        value: conteoms[marcaSolicitada],
                                                        color: generateRandomPastelColor()
                                                    };
                                                });

                                                // Configurar opciones del gráfico
                                                var options = {
                                                    chart: {
                                                        type: 'treemap'
                                                    },
                                                    title: {
                                                        text: 'Solicitudes por Marca Solicitada'
                                                    },
                                                    series: [{
                                                        type: 'treemap',
                                                        layoutAlgorithm: 'squarified',
                                                        data: treemapDatams
                                                    }],
                                                    tooltip: {
                                                        pointFormat: '<b>{point.name}</b>: {point.value}'
                                                    }
                                                };
                                                // Renderizar el gráfico en el contenedor con el ID 'grafico_rs'
                                                Highcharts.chart('grafico_ms', options);


                            ////////////////////////////////Tabla de las Solicitudes/////////////

                            if (!$.fn.DataTable.isDataTable('#I_SOL')) {
                                $('#I_SOL').DataTable({
                                    lengthMenu: [[10, 50, 100, -1], [10, 50, 100, "Todos"]],
                                    dom: 'Bfrtip',
                                    buttons: [
                                        'copyHtml5',
                                        'excelHtml5',
                                        'csvHtml5',
                                        'pdfHtml5'
                                    ],
                                    data: response, // Aquí asignamos los datos
                                    columns: [
                                        { data: "id" },
                                        { data: "turno" },
                                            { data: "razon_social" },
                                            { data: "expediente" },
                                            { data: "marca_solicitada" },
                                        { data: "eF_ID" },
                                        { data: "eF_Nombre" },
                                        { data: "mpO_ID" },
                                        { data: "municipio_Nombre" },
                                        { data: "analisis_riesgo" },
                                        //{ data: "Con_Analisis_de_Riesgo" },
                                        //{ data: "Con_Documentos_Completos" },
                                        { data: "documentos_completos" },
                                        { data: "latitud_GEO" },
                                        { data: "longitud_GEO" }
                                        //{ data: "Total_de_Permisos_de_Expendio" },
                                        //{ data: "Total_de_Solicitudes_a_Evaluar" }
                                    ],
                                    language: {
                                        url: '//cdn.datatables.net/plug-ins/1.10.24/i18n/Spanish.json'
                                    }
                                });
                            }



                    },


                    error: function (error) {
                        // Maneja el error si ocurre.
                    }


            });


       }
     @* CargaSolicitudesInicio(); *@




        $('.collapse').on('shown.bs.collapse', function () {
          map.invalidateSize();
        });
</script>

<script>
    // Actualizar el tamaño del mapa cuando se muestra una sección de acordeón
    $('.collapse').on('shown.bs.collapse', function () {
      mapmun.invalidateSize();
    });

</script>


 @*Funcionalidades Dropdown Capas*@
<script>


    $(document).ready(function () {
        // Obtener el dropdown
        var dropdown = document.getElementById("dropdownMenuLink");

        // Obtener todas las opciones dentro del dropdown
        var opciones = dropdown.nextElementSibling.getElementsByClassName("dropdown-item");

        // Asignar el evento onclick a cada opción
        for (var i = 0; i < opciones.length; i++) {
            opciones[i].onclick = function (event) {
                event.preventDefault(); // Evitar que se siga el enlace

                // Quitar la clase activa de todas las opciones
                for (var j = 0; j < opciones.length; j++) {
                    opciones[j].classList.remove("active");
                }

                // Agregar la clase activa a la opción seleccionada
                this.classList.add("active");

                // Obtener el texto de la opción seleccionada
                var textoSeleccionado = this.textContent.trim();

                // Actualizar el contenido del botón con el texto seleccionado
                dropdown.textContent = textoSeleccionado;

                // Obtener la función asociada a la opción seleccionada
                var funcion = this.getAttribute("onclick");
                // Ejecutar la función asociada
                eval(funcion);
            };
        }
    });
</script>

 @*Funcionalidades Dropdown Capas Municipio*@
  <script>
        $(document).ready(function () {
            // Obtener el dropdown
            var dropdown = document.getElementById("dropdownMenuLinkMun");

            // Obtener todas las opciones dentro del dropdown
            var opciones = dropdown.nextElementSibling.getElementsByClassName("dropdown-item");

            // Asignar el evento onclick a cada opción
            for (var i = 0; i < opciones.length; i++) {
                opciones[i].onclick = function (event) {
                    event.preventDefault(); // Evitar que se siga el enlace

                    // Quitar la clase activa de todas las opciones
                    for (var j = 0; j < opciones.length; j++) {
                        opciones[j].classList.remove("active");
                    }

                    // Agregar la clase activa a la opción seleccionada
                    this.classList.add("active");

                    // Obtener el texto de la opción seleccionada
                    var textoSeleccionado = this.textContent.trim();

                    // Actualizar el contenido del botón con el texto seleccionado
                    dropdown.textContent = textoSeleccionado;

                    // Obtener la función asociada a la opción seleccionada
                    var funcion = this.getAttribute("onclick");
                    // Ejecutar la función asociada
                    eval(funcion);
                };
            }
        });
    </script>

 @*Menú de Estados*@
<script>
    // Detecta el cambio de selección en el menú de estados
    document.getElementById("estado").addEventListener("change", function () {
        // Obtiene el valor seleccionado del menú de estados
        var estado = document.getElementById("estado").value;

        // Muestra el estado seleccionado en el mapa
        switch (estado) {
            case "ags":
                map.setView([22.025278, -102.372778], 9);
                break;
            case "bc":
                map.setView([30.391389, -115.291389], 7);
                break;
            case "bcs":
                map.setView([26.044444, -112.399722], 7);
                break;
            case "camp":
                map.setView([18.938333, -90.764722], 7);
                break;
            case "coah":
                map.setView([27.158056, -101.719444], 7);
                break;
            case "col":
                map.setView([19.101944, -103.014722], 9);
                break;
            case "chis":
                map.setView([16.753056, -92.6375], 7);
                break;
            case "chih":
                map.setView([28.673611, -106.102222], 7);
                break;
            case "cdmx":
                map.setView([19.432778, -99.133333], 10);
                break;
            case "dgo":
                map.setView([24.865278, -104.902222], 7);
                break;
            case "gto":
                map.setView([20.875, -101.478611], 8);
                break;
            case "gro":
                map.setView([17.814722, -100.353056], 8);
                break;
            case "hgo":
                map.setView([20.5325, -98.870556], 8);
                break;
            case "jal":
                map.setView([20.673611, -103.343333], 8);
                break;
            case "mex":
                map.setView([19.483611, -99.689722], 8);
                break;
            case "mich":
                map.setView([19.699722, -101.191389], 8);
                break;
            case "mor":
                map.setView([18.858611, -99.223611], 9);
                break;
            case "nay":
                map.setView([21.799444, -105.220833], 8);
                break;
            case "nl":
                map.setView([25.649167, -100.443611], 9);
                break;
            case "oax":
                map.setView([16.895833, -96.806667], 8);
                break;
            case "pue":
                map.setView([19.051389, -98.193889], 8);
                break;
            case "qro":
                map.setView([20.854722, -99.847222], 9);
                break;
            case "qroo":
                map.setView([19.642778, -87.072222], 8);
                break;
            case "slp":
                map.setView([22.156944, -100.985556], 8);
                break;
            case "sin":
                map.setView([24.288611, -107.366944], 8);
                break;
            case "son":
                map.setView([29.089444, -110.961667], 7);
                break;
            case "tab":
                map.setView([17.980000, -92.930000], 8);
                break;
            case "tamps":

                map.setView([24.014167, -98.844444], 7);
                break;
            case "tlax":
                map.setView([19.312222, -98.239722], 10);
                break;
            case "ver":
                map.setView([19.546389, -96.914167], 8);
                break;
            case "yuc":
                map.setView([20.891944, -89.528611], 8);
                break;
            case "zac":
                map.setView([22.770833, -102.583611], 8);
                break;
            default:

                map.setView([23.634501, -102.552784], 5);
                break;
        }
    });
</script>



@*Tabs Indicadores EF*@
<script>

    function openTab(event, tabName, sectionId) {

      var i, tabcontent, tablinks;
      tabcontent = document.querySelectorAll(`#${sectionId} .tabcontent`);
      for (i = 0; i < tabcontent.length; i++) {
        tabcontent[i].style.display = "none";
      }
      tablinks = document.querySelectorAll(`#${sectionId} .tablinks`);
      for (i = 0; i < tablinks.length; i++) {
        tablinks[i].classList.remove("active");
      }
      document.getElementById(tabName).style.display = "block";
      event.currentTarget.classList.add("active");

       // En esta sección se cargan los mapas de los indicadores Municipales

            if (tabName === 'div_1') {  // solo para la pestaña que tiene el mapa
            setTimeout(function() {
                mapef_I1.invalidateSize();
            }, 200);
        }
                  if (tabName === 'div_2') {  // solo para la pestaña que tiene el mapa
            setTimeout(function() {
                mapef_I2.invalidateSize();
            }, 200);
        }
                   if (tabName === 'div_3') {  // solo para la pestaña que tiene el mapa
            setTimeout(function() {
                mapef_I3.invalidateSize();
            }, 200);
        }
                   if (tabName === 'div_4') {  // solo para la pestaña que tiene el mapa
            setTimeout(function() {
                mapef_I4.invalidateSize();
            }, 200);
        }
                   if (tabName === 'div_5') {  // solo para la pestaña que tiene el mapa
            setTimeout(function() {
                mapef_I5.invalidateSize();
            }, 200);
        }
                   if (tabName === 'div_6') {  // solo para la pestaña que tiene el mapa
            setTimeout(function() {
                mapef_I6.invalidateSize();
            }, 200);
        }
                   if (tabName === 'div_7') {  // solo para la pestaña que tiene el mapa
            setTimeout(function() {
                mapef_I7.invalidateSize();
            }, 200);
        }
                 if (tabName === 'div_8') {  // solo para la pestaña que tiene el mapa
            setTimeout(function() {
                mapef_I8.invalidateSize();
            }, 200);
        }
                 if (tabName === 'div_9') {  // solo para la pestaña que tiene el mapa
            setTimeout(function() {
                mapef_I9.invalidateSize();
            }, 200);
        }
                 if (tabName === 'div_10') {  // solo para la pestaña que tiene el mapa
            setTimeout(function() {
                mapef_I10.invalidateSize();
            }, 200);
        }
                 if (tabName === 'div_11') {  // solo para la pestaña que tiene el mapa
            setTimeout(function() {
                mapef_I11.invalidateSize();
            }, 200);
        }
                 if (tabName === 'div_12') {  // solo para la pestaña que tiene el mapa
            setTimeout(function() {
                mapef_I12.invalidateSize();
            }, 200);
        }
        //Mapas de Municipios
        if (tabName === 'div_13_mun') {  // solo para la pestaña que tiene el mapa
            setTimeout(function() {
                mapmun.invalidateSize();
            }, 200);
        }
               // En esta sección se cargan los mapas de los indicadores Municipales
        if (tabName === 'div_1_mun') {  
            setTimeout(function() {
                    mapmun_I1.invalidateSize();
            }, 200);
        }
            if (tabName === 'div_2_mun') {
                setTimeout(function () {
                    mapmun_I2.invalidateSize();
                }, 200);
            }

            if (tabName === 'div_3_mun') {
                setTimeout(function () {
                    mapmun_I3.invalidateSize();
                }, 200);
            }

            if (tabName === 'div_4_mun') {
                setTimeout(function () {
                    mapmun_I4.invalidateSize();
                }, 200);
            }

            if (tabName === 'div_5_mun') {
                setTimeout(function () {
                    mapmun_I5.invalidateSize();
                }, 200);
            }

            if (tabName === 'div_6_mun') {
                setTimeout(function () {
                    mapmun_I6.invalidateSize();
                }, 200);
            }

            if (tabName === 'div_7_mun') {
                setTimeout(function () {
                    mapmun_I7.invalidateSize();
                }, 200);
            }

            if (tabName === 'div_8_mun') {
                setTimeout(function () {
                    mapmun_I8.invalidateSize();
                }, 200);
            }

            if (tabName === 'div_9_mun') {
                setTimeout(function () {
                    mapmun_I9.invalidateSize();
                }, 200);
            }

            if (tabName === 'div_10_mun') {
                setTimeout(function () {
                    mapmun_I10.invalidateSize();
                }, 200);
            }

            if (tabName === 'div_11_mun') {
                setTimeout(function () {
                    mapmun_I11.invalidateSize();
                }, 200);
            }

            if (tabName === 'div_12_mun') {
                setTimeout(function () {
                    mapmun_I12.invalidateSize();
                }, 200);
            }


    }  
</script>


@* Evaluación de Check a nivel EF *@
<script>
    $(document).ready(function () {
        // Obtener todos los checkboxes de indicadores
        var indicadorCheckboxes = $("input[name='checkboxes']");

        // Obtener los checkboxes de los indicadores 10 y 11
        var indicador10Checkbox = $("#chk10");
        var indicador11Checkbox = $("#chk11");

        // Obtener el elemento del mensaje de resultado
        var resultMessage = $("#result-message_1");

        // Evento de cambio de selección en los checkboxes de indicadores
        indicadorCheckboxes.change(function () {
            var checkbox = $(this);

            if (checkbox.hasClass("indicador-especial")) {
                // Si se selecciona un checkbox de indicador especial (10 o 11)
                if (checkbox.is(":checked")) {
                    // Desmarcar el otro checkbox de indicador especial
                    if (checkbox.attr("id") === "chk10") {
                        indicador11Checkbox.prop("checked", false);
                    } else if (checkbox.attr("id") === "chk11") {
                        indicador10Checkbox.prop("checked", false);
                    }
                }

                // Mostrar el mensaje de advertencia si ambos checkboxes de indicadores especiales están marcados
                if (indicador10Checkbox.is(":checked") && indicador11Checkbox.is(":checked")) {
                    resultMessage.show();
                } else {
                    resultMessage.show();
                }
            } else {
                // Si se selecciona un checkbox de otro indicador
                if (checkbox.is(":checked")) {
                    // Desmarcar los checkboxes de indicadores especiales
                   // indicador10Checkbox.prop("checked", false);
                   // indicador11Checkbox.prop("checked", false);

                    // Ocultar el mensaje de advertencia
                    resultMessage.hide();
                }
            }
        });

        // Botón Mostrar Resultados Indicadores
        $("#btnMostrar").click(mostrarResultados);

        function mostrarResultados() {

            // Verificamos si el campo 'umbral' está vacío o contiene solo espacios // Se queda en 0 para EF comento validación se ocultará el input 15/06/2023
            //var umbral = $("#umbral").val().trim();
            //if (!umbral || umbral == 0 || umbral > 1) {
            //    $("#result-message").text("¡El campo 'Umbral' no puede estar vacío, llenarse solo con espacios, ni ser cero, ni mayor a 1!").show();
            //    return;
            //}
            // Verificamos si se han seleccionado al menos un checkbox
            if (!$("input[name='checkboxes']:checked").length) {
                $("#result-message").text("¡Debe seleccionar al menos un indicador primero!").show();
                return;
            }
            // Resto del código para mostrar los resultados
            // Iniciamos la barra de progreso
            $(".progress").show();
            $(".progress-bar").css("width", "0%");
            // Ocultamos todos los divs
            $("div[id^='div']").hide();
            // Recorremos los checkboxes y mostramos los divs seleccionados
            var count = $("input[name='checkboxes']:checked").length;
            var progress = 100 / count;
            var progressValue = 0;
            $("input[name='checkboxes']").each(function () {
                if ($(this).prop("checked")) {
                    var idDiv = "#div" + $(this).val();
                    $(idDiv).show();
                    // Aumentamos la barra de progreso
                    progressValue += progress;
                   // $(".progress-bar").css("width", progressValue + "%");
                    $(".progress-bar-nacional").css("width", progressValue + "%");
                }
            });
            // Ocultamos la barra de progreso cuando termina
            setTimeout(function () {
                $(".progress").hide();
                $("div[id^='div']:visible").each(function (index) {
                    var delay = index * 500; // Retrasamos cada div en 500ms
                    $(this).delay(delay).fadeIn(500);
                });
            }, 1000);
            // Ocultamos el botón "Mostrar"
            $("#btnMostrar").hide();

            // Mostramos el mensaje con los indicadores seleccionados
            var message = "Esta evaluación contempla los siguientes indicadores:";
            $("input[name='checkboxes']:checked").each(function () {
                message += " Indicador " + $(this).val();
            });
            $("#result-message").text(message).show();
            // Deshabilitamos los checkboxes
            $("input[name='checkboxes']").prop("disabled", true);

            // Mostramos el botón para habilitar los checkboxes
            $("#btnHabilitar").show();

            // Mostramos el botón de resultados.
            $("#btnResultados").show();
            $("#mostrarSeccionesBtn").show();

            /////////
            // Ocultar todos los tabs
            $(".tablinks.indicator-tab").hide();

            // Recorrer los checkboxes y mostrar los tabs correspondientes
            $("input[name='checkboxes']").each(function () {
                if ($(this).prop("checked")) {
                    var indicatorId = $(this).val();
                    $("#resultados").find(".tablinks.indicator-tab[data-indicator='" + indicatorId + "']").show();
                    $("#resultados").find(".tablinks.indicator-tab[data-indicator='16']").show(); // muestra siempre el tab de calificación
                }
            });

            // Mostramos la sección de resultados
            $("#resultados").show();
            //Mostramos Div Calificacion
            $("#tbcal").show();
            //Muestra los Acordiones 3 y 4
            $("#seccion3").show();
            $("#seccion4").show();
        }

        // Función para habilitar los checkboxes y limpiarlos
        $("#btnHabilitar").click(function () {
            $("input[name='checkboxes']").prop("disabled", false).prop("checked", false);
            $("#result-message").hide();
            $("#btnHabilitar").hide();
            $("#btnMostrar").show();
            $("#resultados").hide();
            // Ocultamos el botón de resultados.
            $("#btnResultados").hide();
            // Ajustamos el valor del umbral a 0
            //$("#umbral").val(0);
            // Ajustamos el valor del slider a 0
           // $("#slider-vertical").slider("value", 0);
            $("#mostrarSeccionesBtn").hide();
            //Oculta los acordiones 3 y 4
            $("#seccion3").hide();
            $("#seccion4").hide();


            //Seccion Municipios
                $("input[name=checkboxes_mun]").prop("disabled", false).prop("checked", false);
                $("#result-message_mun").hide();
                $("#btnHabilitar_mun").hide();
                $("#btnMostrar_mun").show();
                $("#resultados_mun").hide(); // Modificar el selector a #resultados_mun
                // Ocultamos el botón de resultados.
                $("#btnResultados_mun").hide();
                // Ajustamos el valor del umbral a 0
                // $("#umbral_mun").val(0);
                // Ajustamos el valor del slider a 0
                // $("#slider-vertical").slider("value", 0);
                //
                // Ocultamos el Acordion 5: Resultados a Nivel Municipal
                $("#seccion5").hide();


        });

        // Ocultar result-message al cargar la página
        $("#result-message").hide();
    });
</script>


@*Seccion de Calificación Final por EF e Indicadores*@
<script>
    $(document).ready(function () {
        //3.-Sección ver Resultados

        // configuración de la tabla que agrupa resultados por EF
        var table = $('#I_CF').DataTable({
            lengthMenu: [[10, 50, 100, -1], [10, 50, 100, "Todos"]],
            dom: 'Blfrtip',
            buttons: [
                {
                    extend: 'copyHtml5',
                    title: 'MEP-Calificación Final por Entidad Federativa'
                },
                {
                    extend: 'excelHtml5',
                    title: 'MEP-Calificación Final por Entidad Federativa'
                },
                {
                    extend: 'csvHtml5',
                    title: 'MEP-Calificación Final por Entidad Federativa'
                },
                {
                    extend: 'pdfHtml5',
                    title: 'MEP-Calificación Final por Entidad Federativa',
                    customize: function (doc) {
                        // Cambia el color de la línea de encabezado a rojo
                        doc.styles.tableHeader.color = '#9fa1a4';
                        // Centra la tabla
                        doc.defaultStyle.alignment = 'center';
                        // Cambia el color de fondo del encabezado
                        doc.styles.tableHeader.fillColor = '#4c1922'; // Cambia a tu color preferido
                    }
                }
            ],
            columndefs: [{
                targets: [0, 1, 2, 3],
                data: null,
                defaultcontent: "-"
            }],

            columns: [
                { data: "eF_ID" },
                { data: "eF_Nombre" },
                { data: "aprobados" },
                { data: "noAprobados" },
                {
                    data: null,
                    render: function (data, type, row) {
                        //   var efId = $(this).data('efid');
                        var indicadoresSeleccionados = [];
                        $('#misCheckboxes input:checked').each(function () {
                            indicadoresSeleccionados.push($(this).val());
                        });
                        // Construye la cadena de indicadores seleccionados separados por comas
                        var indicadoresCadena = indicadoresSeleccionados.join(',');

                        var umbralSeleccionado = $('#umbral').val();

                        // Construye la URL con los parámetros de consulta
                        var url = '/Indicadores/Detalle_EF_Electricidad?';
                        url += 'efId=' + row.eF_ID;
                        url += '&Indicadores_Seleccionados=' + encodeURIComponent(indicadoresCadena);
                        url += '&Umbral_Seleccionado=' + umbralSeleccionado;

                        // Construye la URL con los parámetros de consulta

                        return '<a class="btn btn-cre-verde" href="' + url + '" target="_blank">Ver detalle</a>';
                    }
                }
            ],
            language: {
                url: '//cdn.datatables.net/plug-ins/1.10.24/i18n/Spanish.json'
            }


        });

        $("#btnMostrar").click(function (event) {
            event.preventDefault(); // Evita que el botón envíe el formulario
            var indicadores_seleccionados = [];
            $('#misCheckboxes input:checked').each(function () {
                indicadores_seleccionados.push($(this).val());
            });

            var datos = {
                Umbral_Seleccionado: $('#umbral').val(),
                Indicadores_Seleccionados: indicadores_seleccionados
            };


            //3.1.-Calificación Nacional Tarjetas y Grafico der PIE
            $.ajax({
                    url: '/Indicadores/calificacion_Nacional_Electricidad',
                    type: 'POST',
                    data: JSON.stringify(datos),
                    contentType: 'application/json',
                    success: function (response) {
                        console.log("ESTE:", response); // Ver la respuesta en la consola

                        // Asignar el resultado a los h2 de las tarjetas
                        $("#nacional_EF").text(response[0].totalEF_ID);
                        $("#nacional_aprobados").text(response[0].totalAprobados);
                        $("#nacional_noaprobados").text(response[0].totalNoAprobados);
                        $("#nacional_ambos").text(response[0].totalAmbos);


                        // Verificar el valor y mostrar u ocultar el div
                        if (response[0].totalAmbos == 0) {
                            $('[data-card="nacional_ambos_card"]').hide(); // Ocultar
                        } else {
                            $('[data-card="nacional_ambos_card"]').show(); // Mostrar
                        }
                        // Crear un arreglo de objetos con las categorías y los valores de los datos para el grafico de PIE
                      var data = [];

                        // Siempre añadir la categoría 'Entidades Federativas con Solicitudes Óptimas'
                        data.push({
                            name: 'Entidades Federativas con Solicitudes Óptimas',
                            y: parseInt(response[0].totalAprobados),
                            color: '#59b25d'
                        });

                        // Siempre añadir la categoría 'Entidades Federativas con Solicitudes No Viables'
                        data.push({
                            name: 'Entidades Federativas con Solicitudes No Viables',
                            y: parseInt(response[0].totalNoAprobados),
                            color: '#e63950'
                        });

                        // Añadir la categoría 'Ambos: Con Solicitudes de Óptimas y No Viables' solo si el valor es diferente de 0
                        if (parseInt(response[0].totalAmbos) !== 0) {
                            data.push({
                                name: 'Ambos: Con Solicitudes de Óptimas y No Viables',
                                y: parseInt(response[0].totalAmbos),
                                color: '#d4af37'
                            });
                        }


                        // Calcular el total de los valores
                        var total = data.reduce(function (sum, point) {
                            return sum + point.y;
                        }, 0);

                        // Agregar porcentaje y total formateado a cada punto de datos
                        data.forEach(function (point) {
                            var percentage = ((point.y / total) * 100).toFixed(2); // Calcular el porcentaje
                            point.percentage = percentage;
                            point.totalFormatted = point.y.toLocaleString('es-ES'); // Formatear el total con separadores de miles y configuración regional 'es-ES'
                        });

                        var options = {
                            chart: {
                                type: 'pie'
                            },
                            title: {
                                text: 'Evaluación de las Solicitudes a nivel Entidad Federativa'
                            },
                            series: [{
                                name: 'Cantidad',
                                data: data
                            }],
                            colors: ['#59b25d', '#e63950', '#d4af37'],
                            plotOptions: {
                                pie: {
                                    dataLabels: {
                                        enabled: true,
                                        format: '<b>{point.name}</b>: {point.percentage:.1f}%',
                                        style: {
                                            fontSize: '18px' // Aumenta el tamaño de la letra aquí
                                        }
                                    }
                                }
                            }
                        };


                        // Renderizar el gráfico en el contenedor con el ID 'grafico1'
                        Highcharts.chart('grafico1', options);




                    },
                    error: function (error) {
                        // Manejar el error si ocurre.
                    }
                });

            //3.2-Totales
            $.ajax({
                url: '/Indicadores/calificacion_Total_Electricidad',
                type: 'POST',
                data: JSON.stringify(datos),
                contentType: 'application/json',
                success: function (response) {
                    console.log(response); // Ver la respuesta en la consola

                    // Asignar el resultado a los inputs
                    $("#aprobados").val(response[0].aprobados);
                    $("#noAprobados").val(response[0].noAprobados);
                    $("#total").val(parseInt(response[0].aprobados) + parseInt(response[0].noAprobados));
                },
                error: function (error) {
                    // Manejar el error si ocurre.
                }
            });


            //3.3-Tabla y Grafico por EF (agrupados)
            $.ajax({
                url: '/Indicadores/calificacion_EF_Electricidad',
                type: 'POST',
                data: JSON.stringify(datos),

                contentType: 'application/json',
                success: function (response) {
                    console.log(response); // ver la respuesta en consola

                    // Filtrar los valores mayores a cero en la columna "aprobados"
                    //response = response.filter(function (row) {
                    //    return row.aprobados > 0;
                    //});
                    /**************** */
                    table.clear();
                    table.rows.add(response);
                    table.draw();
                    $('#I_CF').show();

                    // Crear arreglos para las categorías, los datos de aprobados y los datos de no aprobados
                    // Crear arreglos para las categorías, los datos de aprobados y los datos de no aprobados
                    var categories = [];
                    var dataAprobados = [];
                    var dataNoAprobados = [];

                    // Iterar sobre la respuesta para llenar los arreglos
                    for (var i = 0; i < response.length; i++) {
                        categories.push(response[i].eF_Nombre);
                        dataAprobados.push(parseInt(response[i].aprobados));
                        dataNoAprobados.push(parseInt(response[i].noAprobados));
                    }

                    // Configurar opciones del gráfico
                    var options = {
                        chart: {
                            type: 'column',
                            //options3d: {
                            //    enabled: true,
                            //    alpha: 10,
                            //    beta: 25,
                            //    depth: 70
                            //}
                        },
                        title: {
                            text: 'Detalle por Entidad Federativa'
                        },
                        xAxis: {
                            categories: categories
                        },
                        yAxis: {
                            title: {
                                text: 'Cantidad'
                            }
                        },
                        plotOptions: {
                            column: {
                                stacking: 'normal',
                                depth: 40
                            }
                        },
                        series: [
                            {
                                name: 'Óptimas',
                                data: dataAprobados,
                                color: '#59b25d'
                            },
                            {
                                name: 'No Viables',
                                data: dataNoAprobados,
                                color: '#e63950'
                            }
                        ],
                            colors: ['#59b25d', '#e63950'],
                        tooltip: {
                            formatter: function () {
                                return '<b>' + this.x + '</b><br/>' +
                                    this.series.name + ': ' + this.y;
                            }
                        }
                    };

                    // Renderizar el gráfico en el contenedor con el ID 'grafico'
                    Highcharts.chart('grafico', options);



                },
                error: function (error) {
                    // Maneja el error si ocurre.
                }
            });



        });
    });
</script>

@*Indicadores Tablas *@
<script>

    $(document).ready(function () {

        var dataTableOptions = {
            lengthMenu: [[10, 50, 100, -1], [10, 50, 100, "Todos"]],
            dom: 'Bfrtip',
            buttons: [
                'copyHtml5',
                'excelHtml5',
                'csvHtml5',
                'pdfHtml5'
            ],
            language: {
                url: '//cdn.datatables.net/plug-ins/1.10.24/i18n/Spanish.json'
            },

        };

        var indicadores = ['#I_1', '#I_2', '#I_3', '#I_4', '#I_5', '#I_6', '#I_7', '#I_8', '#I_9', '#I_10', '#I_11', '#I_12','#I_13','#I_14','#I_15','#ICM'];

        indicadores.forEach(function (indicador) {
            $(indicador).DataTable(dataTableOptions);
        });
    });
</script>

@* Evaluación a Nivel Municipal *@
<script>
            $("#btnMostrar_mun").click(mostrarResultados_mun);

            function mostrarResultados_mun() {

                // Verificamos si el campo 'umbral' está vacío o contiene solo espacios
                var umbral = $("#umbral_mun").val().trim();
                if (!umbral || umbral == 0 || umbral > 1) {
                    $("#result-message_mun").text("¡El campo 'Umbral' no puede estar vacío, llenarse solo con espacios, ni ser cero, ni mayor a 1!").show();
                    return;
                }


                // Verificamos si se han seleccionado al menos un checkbox del municipio
                if (!$("input[name=checkboxes_mun]:checked").length) {
                    $("#result-message_mun").text("¡Debe seleccionar al menos un indicador primero!").show();
                    return;
                }

                // Resto del código para mostrar los resultados
                // Iniciamos la barra de progreso municipio
                $(".progress").show();
                $(".progress-bar").css("width", "0%");
                // Ocultamos todos los divs
                $("div[id^='div']").hide();
                // Recorremos los checkboxes y mostramos los divs seleccionados
                var count = $("input[name='checkboxes']:checked").length;
                var progress = 100 / count;
                var progressValue = 0;
                $("input[name='checkboxes']").each(function () {
                    if ($(this).prop("checked")) {
                        var idDiv = "#div" + $(this).val();
                        $(idDiv).show();
                        // Aumentamos la barra de progreso
                        progressValue += progress;
                        //$(".progress-bar").css("width", progressValue + "%");
                        $(".progress-bar-municipal").css("width", progressValue + "%");
                    }
                });
                // Ocultamos la barra de progreso cuando termina
                setTimeout(function () {
                    $(".progress").hide();
                    $("div[id^='div']:visible").each(function (index) {
                        var delay = index * 500; // Retrasamos cada div en 500ms
                        $(this).delay(delay).fadeIn(500);
                    });
                }, 1000);

                // Ocultamos el botón "Mostrar"
                $("#btnMostrar_mun").hide();

                // Mostramos el mensaje con los indicadores seleccionados
                var message =
                    "Este es el resultado con los siguientes indicadores seleccionados:";
                $("input[name=checkboxes_mun]:checked").each(function () {
                    message += " Indicador " + $(this).val();
                });
                $("#result-message_mun").text(message).show();
                // Deshabilitamos los checkboxes
                $("input[name=checkboxes_mun]").prop("disabled", true);

                // Mostramos el botón para habilitar los checkboxes
                $("#btnHabilitar_mun").show();

                // Mostramos el botón de resultados.
                $("#btnResultados_mun").show();


                /////////
                // Ocultar todos los tabs
                $(".tablinks.indicator-tab-mun").hide();

                // Recorrer los checkboxes y mostrar los tabs correspondientes
                $("input[name=checkboxes_mun]").each(function () {
                    if ($(this).prop("checked")) {
                        var indicatorId = $(this).val();
                       //Si se desomenta la siguiente Linea se muestran los Tabs d elos Indicadores Seleccionados queda  en by pass de momento
                        // $("#resultados_mun").find(".indicator-tab-mun[data-indicator='" + indicatorId + "']").show();

                        //$("#resultados_mun").find(".tablinks.indicator-tab-mun[data-indicator='" + indicatorId + "']").show();
                      ///////////////*****************TAB CALIFICACION*/
                       // $("#resultados_mun").find(".tablinks.indicator-tab-mun[data-indicator='13']").show();//muestra siempre el tab de calificación
                    }
                });

                //Mostramos el Acordion 5: Resultados a Nivel Municipal
                $("#seccion5").show();
                // Mostramos la sección de resultados
                $("#resultados_mun").show();
                //Mostramos Div Calificacion
                $("#tbcal_mun").show();

            }

            // Función para habilitar los checkboxes y limpiarlos
        $("#btnHabilitar_mun").click(function () {
            $("input[name=checkboxes_mun]").prop("disabled", false).prop("checked", false);
            $("#result-message_mun").hide();
            $("#btnHabilitar_mun").hide();
            $("#btnMostrar_mun").show();
            $("#resultados_mun").hide(); // Modificar el selector a #resultados_mun
            // Ocultamos el botón de resultados.
            $("#btnResultados_mun").hide();
            // Ajustamos el valor del umbral a 0
            // $("#umbral_mun").val(0);
            // Ajustamos el valor del slider a 0
            // $("#slider-vertical").slider("value", 0);
            //
            // Ocultamos el Acordion 5: Resultados a Nivel Municipal
            $("#seccion5").hide();
        });

        // Ocultar result-message al cargar la página
        $(document).ready(function () {
            $("#result-message_mun").css("display", "none");
        });

</script>

@*Seccion de Calificación Final por Municipio e Indicadores Municipales*@
<script>
        $(document).ready(function () {
            // Guarda la referencia a la tabla
            //       var table_mun = $('#I_CF_MUN').DataTable({
            //              pageLength: -1, // Mostrar todos los elementos
            //            lengthMenu: [], // Eliminar las opciones de longitud
            var table_mun = $('#I_CF_MUN').DataTable({
                lengthMenu: [[10, 50, 100, -1], [10, 50, 100, "Todos"]],
                dom: 'Blfrtip',
                buttons: [
                    {
                        extend: 'copyHtml5',
                        title: 'MEP-Calificación Final por Municipio'
                    },
                    {
                        extend: 'excelHtml5',
                        title: 'MEP-Calificación Final por Entidad Municipio'
                    },
                    {
                        extend: 'csvHtml5',
                        title: 'MEP-Calificación Final por Entidad Municipio'
                    },
                    {
                        extend: 'pdfHtml5',
                        title: 'MEP-Calificación Final por Entidad Municipio',
                        customize: function (doc) {
                            // Cambia el color de la línea de encabezado a rojo
                            doc.styles.tableHeader.color = '#9fa1a4';
                            // Centra la tabla
                            doc.defaultStyle.alignment = 'center';
                            // Cambia el color de fondo del encabezado
                            doc.styles.tableHeader.fillColor = '#4c1922'; // Cambia a tu color preferido
                        }
                    }
                ],
                columnDefs: [{

                    targets: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44],


                    data: null,
                    defaultContent: "-"
                }],
                columns: [
                    { data: "id" },
                    { data: "turno" },
                    { data: "categoria" },
                    { data: "razon_social" },
                    { data: "marca_solicitada" },
                    { data: "expediente" },
                    { data: "eF_ID" },
                    { data: "eF_Nombre" },
                    { data: "mpO_ID" },
                    { data: "municipio_Nombre" },
                    { data: "analisis_riesgo" },
                    { data: "documentos_completos" },
                    { data: "x_Geo" },
                    { data: "y_Geo" },
                    { data: "umbral_P1" },
                    { data: "columnasSeleccionadas_P1" },
                    { data: "totalColumnas" },
                    { data: "sumaTotal" },
                    { data: "factor" },
                    { data: "resultado" },
                    { data: "_2023_01" },
                    { data: "_2023_02" },
                    { data: "_2023_03" },
                    { data: "_2023_04" },
                    { data: "_2023_05" },
                    { data: "_2023_06" },
                    { data: "_2023_07" },
                    { data: "_2023_08" },
                    { data: "_2023_09" },
                    { data: "_2023_10" },
                    { data: "_2023_11" },
                    { data: "_2023_12" },
                     { data: "_2023_13" },
                      { data: "_2023_14" },
                       //{ data: "_2023_15" },
                    { data: "umbralMunicipio_P1" },
                    { data: "columnasSeleccionadasMunicipio_P1" },
                    { data: "totalColumnasMunicipio" },
                    { data: "sumaTotalMunicipio" },
                    { data: "factorMunicipio" },
                    { data: "resultadoMunicipio" },
                    { data: "_2023_01_m" },
                    { data: "_2023_03_m" },
                    { data: "_2023_05_m" },
                    { data: "_2023_12_m" },
               

                    {
                        data: null,
                        render: function (data, type, row) {
                            //   var efId = $(this).data('efid');
                            var indicadoresSeleccionados = [];
                            $('#misCheckboxes_mun input:checked').each(function () {
                                indicadoresSeleccionados.push($(this).val());
                            });
                            // Construye la cadena de indicadores seleccionados separados por comas
                            var indicadoresCadena = indicadoresSeleccionados.join(',');

                            var umbralSeleccionado = $('#umbral_mun').val();

                            // Construye la URL con los parámetros de consulta
                            var url = '/Indicadores/Detalle_EF_Electricidad?';
                            url += 'efId=' + row.eF_ID;
                            url += '&Indicadores_Seleccionados=' + encodeURIComponent(indicadoresCadena);
                            url += '&Umbral_Seleccionado=' + umbralSeleccionado;

                            // Construye la URL con los parámetros de consulta

                            return '<a class="btn btn-cre-verde" href="' + url + '" target="_blank">Ver detalle</a>';
                        }
                    }
                ],
                createdRow: function (row, data, dataIndex) {
                    // Cambiar el color de la celda en la columna "Categoría"
                    if (data.categoria == 'Óptimo') {
                        $('td', row).eq(2).css('background-color', '#97d96d');
                        $('td', row).eq(2).css('color', 'white');
                    }
                    else if (data.categoria == 'No Viable a Nivel Municipal') {
                        $('td', row).eq(2).css('background-color', '#e63950');
                        $('td', row).eq(2).css('color', 'white');
                    }
                    else if (data.categoria == 'Viable') {
                        $('td', row).eq(2).css('background-color', '#f2cf44');
                        $('td', row).eq(2).css('color', 'white');
                    }
                    else if (data.categoria == 'No Viable a Nivel Entidad Federativa') {
                        $('td', row).eq(2).css('background-color', '#9f2241');
                        $('td', row).eq(2).css('color', 'white');
                    }
                },
                language: {
                    url: '//cdn.datatables.net/plug-ins/1.10.24/i18n/Spanish.json'
                }
            });

            $("#btnMostrar_mun").click(function (event) {
                event.preventDefault(); // Evita que el botón envíe el formulario
                var indicadores_seleccionados_nal = [];
                $('#misCheckboxes input:checked').each(function () {
                    indicadores_seleccionados_nal.push($(this).val());
                });

                var indicadores_seleccionados_mun = [];
                $('#misCheckboxes_mun input:checked').each(function () {
                    indicadores_seleccionados_mun.push($(this).val());
                });

                var datos_mun = {
                    Umbral_Seleccionado_Nal: $('#umbral').val(),
                    Indicadores_Seleccionados_Nal: indicadores_seleccionados_nal,
                    Umbral_Seleccionado_Mun: $('#umbral_mun').val(),
                    Indicadores_Seleccionados_Mun: indicadores_seleccionados_mun

                    //DEBEN LLAMARSE IGUAL EN LA CLASE CLASE CALIFICACION FINAL
                };
                //    alert(JSON.stringify(datos_mun));
                console.log("Datos Municipio Nacional:", datos_mun);

                // Tabla de Resultados
                $.ajax({
                    url: '/Indicadores/calificacion_MUN_Electricidad',
                    type: 'POST',
                    data: JSON.stringify(datos_mun),

                    contentType: 'application/json',
                    success: function (response) {
                        console.log("Salida store MUN:", response); // ver la respuesta en consola

                        //Totales
                        // Obtener los datos de la columna 'categoria'
                        var categorias = response.map(function (item) {
                            return item.categoria;
                        });

                        
                     
                        // Contar las ocurrencias de cada categoría
                        var conteoOptimo = categorias.filter(function (categoria) {
                            return categoria === 'Óptimo';
                        }).length;
                        var conteoViable = categorias.filter(function (categoria) {
                            return categoria === 'Viable';
                        }).length;
                        var conteoFactible = categorias.filter(function (categoria) {
                            return categoria === 'No Viable a Nivel Municipal';
                        }).length;
                        var conteoNoviable = categorias.filter(function (categoria) {
                           return categoria === 'No Viable a Nivel Entidad Federativa';
                        }).length;


                        // Asignar los totales a los elementos de los IDs correspondientes
                        document.getElementById('optimo').value = conteoOptimo;
                        document.getElementById('factible').value = conteoFactible;
                        document.getElementById('noviablemun').value = conteoNoviable;
                        document.getElementById('viable').value = conteoViable;
                        document.getElementById('totalmun').value = categorias.length;



                        // Filtrar los valores mayores a cero en la columna "aprobados"
                        //response = response.filter(function (row) {
                        //    return row.aprobados > 0;
                        //});
                        /**************** */
                        table_mun.clear().rows.add(response).draw();
                        $('#I_CF_MUN').show();


                        //////Grafico de Columnas Apiladas//////////////////

                        // Crear un objeto para almacenar los totales de cada categoría por cada eF_Nombre
                        var totalsByEntity = {};

                        // Iterar sobre la respuesta para llenar el objeto
                        for (var i = 0; i < response.length; i++) {
                            var entityName = response[i].eF_Nombre;
                            var category = response[i].categoria;

                            // Si la entidad no está en el objeto, añádela
                            if (!(entityName in totalsByEntity)) {
                                totalsByEntity[entityName] = {
                                    'Óptimo': 0,
                                    'No Viable a Nivel Municipal': 0,
                                    'No Viable a Nivel Entidad Federativa': 0,
                                    'Viable': 0
                                };
                            }

                            // Incrementar el total para la categoría correspondiente
                            totalsByEntity[entityName][category] += 1;
                        }

                        // Ahora que tenemos los totales por entidad, podemos construir las series para Highcharts
                        var categories = [];
                        var series = [
                            {
                                name: 'Óptimo',
                                data: [],
                                color: '#97d96d' // Asignar el color para la categoría 'Óptimo'
                            },
                            {
                                name: 'No Viable a Nivel Municipal',
                                data: [],
                                color: '#e63950' // Asignar el color para la categoría 'Factible'
                            },
                            {
                                name: 'Viable',
                                data: [],
                                color: '#f2cf44' // Asignar el color para la categoría 'Viable'

                            },
                            {
                                name: 'No Viable a Nivel Entidad Federativa',
                                data: [],
                                color: '#9f2241' // Asignar el color para la categoría 'No Viable'
                            }
                        ];


                        // Llenar las series y las categorías
                        for (var entity in totalsByEntity) {
                            categories.push(entity);


                            series[0].data.push(totalsByEntity[entity]['Óptimo']);
                            series[1].data.push(totalsByEntity[entity]['No Viable a Nivel Municipal']);
                            series[2].data.push(totalsByEntity[entity]['Viable']);
                            series[3].data.push(totalsByEntity[entity]['No Viable a Nivel Entidad Federativa']);
                        }
                        // Configurar opciones del gráfico
                        var options = {
                            chart: {
                                type: 'column'
                            },
                            title: {
                                text: 'Calificación Final por Entidad Federativa'
                            },
                            xAxis: {
                                title: {
                                    text: 'Entidad Federativa'
                                },
                                categories: categories
                            },
                            yAxis: {
                                title: {
                                    text: 'Cantidad'
                                }
                            },
                            plotOptions: {
                                column: {
                                    stacking: 'normal',
                                    dataLabels: {
                                        enabled: true,
                                        format: '{point.y}',
                                        style: {
                                            textOutline: false
                                        }
                                    }
                                }
                            },
                            series: series,
                            tooltip: {
                                formatter: function () {
                                    return '<b>' + this.x + '</b><br/>' +
                                        this.series.name + ': ' + this.y;
                                }
                            }
                        };

                        // Renderizar el gráfico en el contenedor con el ID 'grafico_mun_1'
                        Highcharts.chart('grafico_mun_1', options);

                        // Crear un objeto para almacenar los totales de cada categoría por cada marca_solicitada
                        var totalsByMarca = {};

                        // Iterar sobre la respuesta para llenar el objeto
                        for (var i = 0; i < response.length; i++) {
                            var marca = response[i].marca_solicitada;
                            var category = response[i].categoria;

                            // Si la marca no está en el objeto, añádela
                            if (!(marca in totalsByMarca)) {
                                totalsByMarca[marca] = {
                                    'Óptimo': 0,
                                    'No Viable a Nivel Municipal': 0,
                                    'No Viable a Nivel Entidad Federativa': 0,
                                    'Viable': 0
                                };
                            }
                            }

                            // Incrementar el total para la categoría correspondiente
                            totalsByMarca[marca][category] += 1;
                        

                        // Ahora que tenemos los totales por marca, podemos construir las series para Highcharts
                        var categories = [];
                        var series = [
                            {
                                name: 'Óptimo',
                                data: [],
                                color: '#97d96d', // Asignar el color para la categoría 'Óptimo'
                                fillColor: {
                                    linearGradient: [0, 0, 0, 300],
                                    stops: [
                                        [0, '#97d96d'],
                                        [1, 'rgba(151, 217, 109, 0)']
                                    ]
                                }
                            },
                            {
                            name: 'No Viable a Nivel Municipal',
                            data: [],
                            color: '#e63950', // Asignar el color para la categoría 'Factible'
                            fillColor: {
                                linearGradient: [0, 0, 0, 300],
                                stops: [
                                    [0, '#e63950'],
                                    [1, 'rgba(253, 184, 118, 0)']
                                ]
                                }
                            },
                            {
                                name: 'Viable',
                                data: [],
                                color: '#f2cf44', // Asignar el color para la categoría 'Viable'
                                fillColor: {
                                    linearGradient: [0, 0, 0, 300],
                                    stops: [
                                        [0, '#f2cf44'],
                                        [1, 'rgba(242, 207, 68, 0)']
                                    ]
                                }
                            },
                            {
                            name: 'No Viable a Nivel Entidad Federativa',
                            data: [],
                            color: '#9f2241', // Asignar el color para la categoría 'No Viable'
                            fillColor: {
                                linearGradient: [0, 0, 0, 300],
                                stops: [
                                    [0, '#9f2241'],
                                    [1, 'rgba(230, 57, 80, 0)']
                                ]
                                }
                            }
                        ];

                        // Llenar las series y las categorías
                        for (var marca in totalsByMarca) {
                            categories.push(marca);

                    series[0].data.push(totalsByMarca[marca]['Óptimo']);
                    series[1].data.push(totalsByMarca[marca]['No Viable a Nivel Municipal']);
                    series[2].data.push(totalsByMarca[marca]['Viable']);
                    series[3].data.push(totalsByMarca[marca]['No Viable a Nivel Entidad Federativa']);
                        }

                        // Configurar opciones del gráfico
                        var options = {
                            chart: {
                                type: 'line'
                            },
                            title: {
                                text: 'Calificación Final por Marca Solicitada'
                            },
                            xAxis: {
                                title: {
                                    text: 'Marca Solicitada'
                                },
                                categories: categories
                            },
                            yAxis: {
                                title: {
                                    text: 'Cantidad'
                                },
                                type: 'logarithmic'
                            },
                            plotOptions: {
                                line: { // Cambiar 'area' por 'line'
                                    lineWidth: 1,
                                    marker: {
                                        lineWidth: 1,
                                        lineColor: '#d7dcdf'
                                    },
                                    dataLabels: {
                                        enabled: true,
                                        format: '{point.y}',
                                        style: {
                                            textOutline: false
                                        }
                                    }
                                }
                            },
                            series: series,
                            tooltip: {
                                formatter: function () {
                                    return '<b>' + this.x + '</b><br/>' +
                                        this.series.name + ': ' + this.y;
                                }
                            }
                        };

                        // Renderizar el gráfico en el contenedor con el ID 'grafico_mun_1'
                        Highcharts.chart('grafico_mun_0', options);



                        //Mapa de Resultados/////////////////////////////////////////////////////////////////////
                        function CargaSolicitudesmun() {
                            // Crea un grupo de marcadores
                            var markers = L.markerClusterGroup();
                            // Crea los iconos
                            var iconoBase = L.Icon.extend({
                                options: {
                                    iconSize: [24, 24],
                                    iconAnchor: [12, 16],
                                    popupAnchor: [-3, -76]
                                }
                            });


                    var iconoOptimo = new iconoBase({ iconUrl: '@Cdn.Url/img_snier/vistas/Aprobado.png' }),
                        iconoViable = new iconoBase({ iconUrl: '@Cdn.Url/img_snier/vistas/viable.png' }),
                        iconoFactible = new iconoBase({ iconUrl: '@Cdn.Url/img_snier/vistas/NoviableMun.png' });
                    iconoNoViable = new iconoBase({ iconUrl: '@Cdn.Url/img_snier/vistas/NoAprobado.png' });

                            // Añade marcadores al grupo para cada conjunto de coordenadas en la respuesta
                            response.forEach(function (item) {
                                // Asigna el icono de acuerdo a la categoría
                                var iconoActual;
                                var iconoActualUrl;
                        if (item.categoria == "Óptimo") {
                            iconoActual = iconoOptimo;
                            iconoActualUrl = '@Cdn.Url/img_snier/vistas/Aprobado.png';
                        } else if (item.categoria == "Viable") {
                            iconoActual = iconoViable;
                            iconoActualUrl = '@Cdn.Url/img_snier/vistas/viable.png';
                        } else if (item.categoria == "No Viable a Nivel Municipal") {
                            iconoActual = iconoFactible;
                            iconoActualUrl = '@Cdn.Url/img_snier/vistas/NoviableMun.png';

                        } else if (item.categoria == "No Viable a Nivel Entidad Federativa") {
                            iconoActual = iconoNoViable;
                            iconoActualUrl = '@Cdn.Url/img_snier/vistas/NoAprobado.png';

                        }
                        else {
                                    iconoActual = iconoNoViable; // default icon
                                    iconoActualUrl = '@Cdn.Url/img_snier/vistas/NoAprobado.png';
                                }

                                var marker = L.marker([item.x_Geo, item.y_Geo], { icon: iconoActual });


                                marker.bindPopup(
                                    "<style>" +
                                    ".popup-content {" +
                                    "width: 300px;" +
                                    "height: 150px;" +
                                    "overflow-y: auto;" +
                                    "padding: 10px;" +
                                    "}" +
                                    "h2, h3, h4, p, li {" +
                                    "margin: 0 0 10px 0;" +
                                    "}" +
                                    "ul {" +
                                    "padding-left: 20px;" +
                                    "}" +
                                    "img {" +
                                    "vertical-align: middle;" +
                                    "margin-right: 10px;" +
                                    "}" +
                                    "</style>" +
                                    "<div class='popup-content'>" +
                                    "<h2 class='subtitulo'><img src='" + iconoActualUrl + "' style='height: 24px; width: 24px;'/><strong>" + item.razon_social + "</strong></h2>" +
                                    "<br>" +
                                    "<h6>Marca Solicitada: " + item.marca_solicitada + "</h6>" +
                                    "<h6><strong>Categoría:</strong> " + item.categoria + "</h6>" +
                                    "<h6><i class='bi bi-qr-code'></i> Turno de Kmis: " + item.turno + "</h6>" +
                                    "<h6><i class='bi bi-fingerprint'></i> ID Solicitud: " + item.id + "</h6>" +
                                    "<p><i class='bi bi-geo-alt-fill'></i> Entidad Federativa: " + item.eF_Nombre + "</p>" +
                                    "<ul>" +
                                    "<li><strong>Municipio:</strong> " + item.municipio_Nombre + "</li>" +
                                    "<li><strong>¿Documentos Completos?:</strong> " + (item.documentos_completos == "1" ? 'Sí' : 'No') + "</li>" +
                                    "<li><strong>¿Tiene Análisis de Riesgo?:</strong> " + (item.analisis_riesgo == "1" ? 'Sí' : 'No') + "</li>" +
                                    "</ul>" +
                                    "<a class='street-view-link btn btn-cre-verde' href='#'>Ver vista de calle</a> <hr />" +
                                    "<a class='btn btn-cre-rojo' target='_blank' href='https://titan.cre.gob.mx/Consulta/Turno/" + item.turno + "'>Ver Expediente en Kmis</a>" +
                                    "</div>"
                                );


                                marker.on('popupopen', function (e) {
                                    var popup = e.popup;
                                    var streetViewLink = popup.getElement().querySelector('.street-view-link');
                                    streetViewLink.addEventListener('click', function () {
                                        var lat = e.target.getLatLng().lat.toPrecision(8);
                                        var lon = e.target.getLatLng().lng.toPrecision(8);
                                        var streetViewURL = 'http://maps.google.com/maps?q=&layer=c&cbll=' + lat + ',' + lon + '&cbp=11,0,0,0,0';
                                        window.open(streetViewURL, '_blank');
                                    });
                                });

                                markers.addLayer(marker);
                                var circle = L.circle([item.x_Geo, item.y_Geo], {
                                    color: '#1e3143', // Color del círculo
                                    fillColor: '#1e3143', // Color de relleno del círculo
                                    fillOpacity: 0.2, // Opacidad del relleno del círculo
                                    radius: 300       // Radio en metros
                                }).addTo(mapmun);

                            });

                            mapmun.addLayer(markers);


                        }

                        CargaSolicitudesmun();

                        ///Sidebarmun
                        const sidebarmun = document.querySelector('#sidebarmun');


                        //Eventos Baiscos

                        mapmun.on('click', (evento) => {
                            const lat = evento;
                            console.log(lat.latlng)
                        });

                        //Metodos
                        mapmun.center

                        //Funciones

                        //Fly to Place
                        const volar = (latlng) => {
                            mapmun.flyTo(latlng, 13);
                        }
                    

                        //Fly to
                        // Municipio
                        const volar_municipio = (latlng) => {
                            mapmun.flyTo(latlng, 13);
                        }

                        //Limpiar Items del Side Bar
                        const limpiaritems = () => {
                            const listadoLi = document.querySelectorAll('li');
                            listadoLi.forEach(li => {
                                li.classList.remove('active');
                            })
                        }


                        // Crea el Side Bar
                        const crearitem = () => {
                            const ul = document.createElement('ul');
                            ul.classList.add('list-group');
                            ul.style.overflow = 'auto'; // Habilitar desplazamiento
                            ul.style.maxHeight = 'calc(280vh - 80px)'; // Ajustar el tamaño máximo
                            sidebarmun.append(ul);

                            // Crear el elemento "Selecciona una Solicitud"
                            const seleccionaSolicitud = document.createElement('p');
                            seleccionaSolicitud.classList.add('btn', 'btn-cre-verde', 'text-center');
                            seleccionaSolicitud.innerText = 'Turno Solicitud Kmis:';
                            seleccionaSolicitud.style.position = 'sticky'; // Establecer la posición sticky
                            seleccionaSolicitud.style.top = '0'; // Asegurar que esté al inicio del sidebar
                            sidebarmun.prepend(seleccionaSolicitud);

                            response.forEach((item) => {
                                // Asigna el icono de acuerdo a la categoría
                                var iconoActualUrl;
                        if (item.categoria == "Óptimo") {
                            iconoActualUrl = '@Cdn.Url/img_snier/vistas/Aprobado.png';
                        } else if (item.categoria == "Viable") {
                            iconoActualUrl = '@Cdn.Url/img_snier/vistas/viable.png';
                        } else if (item.categoria == "No Viable a Nivel Municipal") {
                            iconoActualUrl = '@Cdn.Url/img_snier/vistas/NoviableMun.png';
                        } else if (item.categoria == "No Viable a Nivel Entidad Federativa") {
                            iconoActualUrl = '@Cdn.Url/img_snier/vistas/NoAprobado.png';
                        }


                                else {
                                    iconoActualUrl = '@Cdn.Url/img_snier/vistas/NoAprobado.png'; // default icon
                                }

                                const li = document.createElement('li');
                                li.classList.add('list-group-item');
                                li.style.height = '200px'; // Establecer altura fija
                                li.style.marginBottom = '10px'; // Agregar margen inferior

                                // Agregar el texto "ID solicitud: item.id"
                                const texto = document.createElement('span');
                                texto.innerHTML = `<strong>ID:</strong> ${item.id.slice(0, 10)}<br><strong>Turno:</strong> ${item.turno.slice(0, 10)}<br><strong>Razón Social:</strong> ${item.razon_social.slice(0, 10)}<br><strong>Marca Solicitada:</strong> ${item.marca_solicitada.slice(0, 10)}`;
                                li.appendChild(texto);

                                // Agregar el icono correspondiente
                                const icono = document.createElement('img');
                                icono.src = iconoActualUrl;
                                icono.classList.add('icono-responsivo'); // Agregar la clase CSS para el icono
                                li.insertBefore(icono, texto); // Insertar el icono antes del texto

                                ul.append(li);

                                li.addEventListener('click', () => {
                                    limpiaritems();
                                    li.classList.add('active');
                                    volar([item.x_Geo, item.y_Geo]);
                                });
                            });
                        };

                        crearitem();


                        //
                     

                        //Carga los Expendios de Electricidad Autorizados Validando que atributos son visibles en el pop-up de la coordenada
                        function handleNull(value) {
                            return value ? value : "S/D-Sin Dato";
                        }
                        //var datosExpendios; // variable global para almacenar todos los expendios
                        function CargaExpendiosMun() {
                            // Limpiar marcadores existentes
                            // limpiarMarcadores()
                            // Tabla de Resultados
                            $.ajax({
                                url: '/Indicadores/GetExpendiosAutorizadosElectricidad',
                                type: 'GET',
                                // data: JSON.stringify(datos_mun),
                                contentType: 'application/json',
                                success: function (response) {
                                    console.log("Estos son los Expendios Autorizados:", response); // ver la respuesta en consola
                                   // datosExpendios = response; // Guarda la respuesta en la variable global

                                    function generarContenidoPopup(coordenada) {
                                        var contenido = "<style>" +
                                            ".popup-content {" +
                                            "    width: 280px;" +
                                            "    max-height: 180px;" +
                                            "    overflow-y: auto;" +
                                            "    padding: 10px;" +
                                            "}" +
                                            "h2, h3, h4, p, li {" +
                                            "    margin: 0 0 10px 0;" +
                                            "}" +
                                            "ul {" +
                                            "    padding-left: 20px;" +
                                            "}" +
                                            "img {" +
                                            "    vertical-align: middle;" +
                                            "    margin-right: 10px;" +
                                            "}" +
                                            "</style>";

                                        contenido += "<div class='popup-content'>";

                                        if (camposVisiblesGlobal.includes("RazonSocial")) {
                                            contenido += "<h2 class='subtitulo'><img src='@Cdn.Url/img_snier/vistas/central_electrica.png' style='height: 24px; width: 24px;'/><strong>" + handleNull(coordenada.razonSocial) + "</strong></h2><br>";
                                        }

                                        contenido += "<ul>";

                                        if (camposVisiblesGlobal.includes("EfId")) {//NO TENEMOS EL NOMBRE DE LA EF EN CAMPOS VISIBLES SOLO EL ID LO CRUZO EN LA CONSULTA DEL REPOSITORIO
                                            contenido += "<li><strong>Entidad Federativa:</strong> " + handleNull(coordenada.efNombre) + "</li>";
                                        }
                                        if (camposVisiblesGlobal.includes("NumeroPermiso")) {
                                            contenido += "<li><strong>NumeroPermiso:</strong> " + handleNull(coordenada.numeroPermiso) + "</li>";
                                        }

                                        if (camposVisiblesGlobal.includes("EfId")) {
                                            contenido += "<li><strong>EfId:</strong> " + handleNull(coordenada.efId) + "</li>";
                                        }

                                        if (camposVisiblesGlobal.includes("MpoId")) {
                                            contenido += "<li><strong>MpoId:</strong> " + handleNull(coordenada.mpoId) + "</li>";
                                        }

                                        if (camposVisiblesGlobal.includes("Expediente")) {
                                            contenido += "<li><strong>Expediente:</strong> " + handleNull(coordenada.expediente) + "</li>";
                                        }

                                        if (camposVisiblesGlobal.includes("RazonSocial")) {
                                            contenido += "<li><strong>RazonSocial:</strong> " + handleNull(coordenada.razonSocial) + "</li>";
                                        }

                                        if (camposVisiblesGlobal.includes("FechaDeOtorgamiento")) {
                                            contenido += "<li><strong>FechaDeOtorgamiento:</strong> " + handleNull(coordenada.fechaDeOtorgamiento) + "</li>";
                                        }

                                        if (camposVisiblesGlobal.includes("LatitudGeo")) {
                                            contenido += "<li><strong>LatitudGeo:</strong> " + handleNull(coordenada.latitudGeo) + "</li>";
                                        }

                                        if (camposVisiblesGlobal.includes("LongitudGeo")) {
                                            contenido += "<li><strong>LongitudGeo:</strong> " + handleNull(coordenada.longitudGeo) + "</li>";
                                        }

                                        if (camposVisiblesGlobal.includes("Calle")) {
                                            contenido += "<li><strong>Calle:</strong> " + handleNull(coordenada.calle) + "</li>";
                                        }

                                        if (camposVisiblesGlobal.includes("Colonia")) {
                                            contenido += "<li><strong>Colonia:</strong> " + handleNull(coordenada.colonia) + "</li>";
                                        }

                                        if (camposVisiblesGlobal.includes("CodigoPostal")) {
                                            contenido += "<li><strong>CodigoPostal:</strong> " + handleNull(coordenada.codigoPostal) + "</li>";
                                        }

                                        if (camposVisiblesGlobal.includes("Estatus")) {
                                            contenido += "<li><strong>Estatus:</strong> " + handleNull(coordenada.estatus) + "</li>";
                                        }

                                        if (camposVisiblesGlobal.includes("Rfc")) {
                                            contenido += "<li><strong>Rfc:</strong> " + handleNull(coordenada.rfc) + "</li>";
                                        }

                                        if (camposVisiblesGlobal.includes("FechaRecepcion")) {
                                            contenido += "<li><strong>FechaRecepcion:</strong> " + handleNull(coordenada.fechaRecepcion) + "</li>";
                                        }

                                        if (camposVisiblesGlobal.includes("Marca")) {
                                            contenido += "<li><strong>Marca:</strong> " + handleNull(coordenada.marca) + "</li>";
                                        }

                                        if (camposVisiblesGlobal.includes("TipoPermiso")) {
                                            contenido += "<li><strong>TipoPermiso:</strong> " + handleNull(coordenada.tipoPermiso) + "</li>";
                                        }

                                        if (camposVisiblesGlobal.includes("inicioOperaciones")) {
                                            contenido += "<li><strong>inicioOperaciones:</strong> " + handleNull(coordenada.inicioOperaciones) + "</li>";
                                        }

                                        if (camposVisiblesGlobal.includes("CapacidadInstalacion")) {
                                            contenido += "<li><strong>CapacidadInstalacion:</strong> " + handleNull(coordenada.capacidadInstalacion) + "</li>";
                                        }

                                        if (camposVisiblesGlobal.includes("VigenciaAnos")) {
                                            contenido += "<li><strong>VigenciaAnos:</strong> " + handleNull(coordenada.vigenciaAnos) + "</li>";
                                        }

                                        if (camposVisiblesGlobal.includes("NumeroSENER")) {
                                            contenido += "<li><strong>NumeroSENER:</strong> " + handleNull(coordenada.numeroSENER) + "</li>";
                                        }

                                        if (camposVisiblesGlobal.includes("SubTipo")) {
                                            contenido += "<li><strong>SubTipo:</strong> " + handleNull(coordenada.subTipo) + "</li>";
                                        }

                                        if (camposVisiblesGlobal.includes("SiglasTipo")) {
                                            contenido += "<li><strong>SiglasTipo:</strong> " + handleNull(coordenada.siglasTipo) + "</li>";
                                        }

                                        if (camposVisiblesGlobal.includes("Otorgamiento")) {
                                            contenido += "<li><strong>Otorgamiento:</strong> " + handleNull(coordenada.otorgamiento) + "</li>";
                                        }

                                        if (camposVisiblesGlobal.includes("FechaAcuse")) {
                                            contenido += "<li><strong>FechaAcuse:</strong> " + handleNull(coordenada.fechaAcuse) + "</li>";
                                        }

                                        if (camposVisiblesGlobal.includes("EstatusSAT")) {
                                            contenido += "<li><strong>EstatusSAT:</strong> " + handleNull(coordenada.estatusSAT) + "</li>";
                                        }

                                        if (camposVisiblesGlobal.includes("SuspensionInicio")) {
                                            contenido += "<li><strong>SuspensionInicio:</strong> " + handleNull(coordenada.suspensionInicio) + "</li>";
                                        }

                                        if (camposVisiblesGlobal.includes("SuspensionFin")) {
                                            contenido += "<li><strong>SuspensionFin:</strong> " + handleNull(coordenada.suspensionFin) + "</li>";
                                        }

                                        if (camposVisiblesGlobal.includes("NumeroTanques")) {
                                            contenido += "<li><strong>NumeroTanques:</strong> " + handleNull(coordenada.numeroTanques) + "</li>";
                                        }

                                        if (camposVisiblesGlobal.includes("CapacidadLitros")) {
                                            contenido += "<li><strong>CapacidadLitros:</strong> " + handleNull(coordenada.capacidadLitros) + "</li>";
                                        }

                                        if (camposVisiblesGlobal.includes("NumeroUnidades")) {
                                            contenido += "<li><strong>NumeroUnidades:</strong> " + handleNull(coordenada.numeroUnidades) + "</li>";
                                        }

                                        if (camposVisiblesGlobal.includes("NumeroDeCentralesDeGuarda")) {
                                            contenido += "<li><strong>NumeroDeCentralesDeGuarda:</strong> " + handleNull(coordenada.numeroDeCentralesDeGuarda) + "</li>";
                                        }

                                        if (camposVisiblesGlobal.includes("DomicilioDeGuarda")) {
                                            contenido += "<li><strong>DomicilioDeGuarda:</strong> " + handleNull(coordenada.domicilioDeGuarda) + "</li>";
                                        }

                                        if (camposVisiblesGlobal.includes("SuministroRecepcion")) {
                                            contenido += "<li><strong>SuministroRecepcion:</strong> " + handleNull(coordenada.suministroRecepcion) + "</li>";
                                        }

                                        if (camposVisiblesGlobal.includes("PermisoSuministro")) {
                                            contenido += "<li><strong>PermisoSuministro:</strong> " + handleNull(coordenada.permisoSuministro) + "</li>";
                                        }

                                        if (camposVisiblesGlobal.includes("CompartenTanques")) {
                                            contenido += "<li><strong>CompartenTanques:</strong> " + handleNull(coordenada.compartenTanques) + "</li>";
                                        }

                                        if (camposVisiblesGlobal.includes("Modificacion")) {
                                            contenido += "<li><strong>Modificacion:</strong> " + handleNull(coordenada.modificacion) + "</li>";
                                        }

                                        if (camposVisiblesGlobal.includes("Asociacion")) {
                                            contenido += "<li><strong>Asociacion:</strong> " + handleNull(coordenada.asociacion) + "</li>";
                                        }

                                        if (camposVisiblesGlobal.includes("Gie")) {
                                            contenido += "<li><strong>Gie:</strong> " + handleNull(coordenada.gie) + "</li>";
                                        }

                                        contenido += "</ul>";

                                        if (camposVisiblesGlobal.includes("NumeroPermiso")) {
                                            contenido += "<a class='btn btn-cre-rojo' target='_blank' href='/Indicadores/DetalleExpendio?NumeroPermiso=" + coordenada.numeroPermiso + "'>Ver detalle</a>";
                                        }

                                        contenido += "<a class='street-view-link btn btn-cre-verde' href='http://maps.google.com/maps?q=&layer=c&cbll=" + coordenada.latitudGeo + "," + coordenada.longitudGeo + "&cbp=11,0,0,0,0' target='_blank'><b> Ver vista de calle </b></a>";


                                        contenido += "</div>";

                                        return contenido;
                                    }
                                    //Mapa de Resultados/////////////////////////////////////////////////////////////////////
                                    // Crea un grupo de marcadores
                                    var markers = L.markerClusterGroup();
                                    // Crea los iconos
                                    var iconoBase = L.Icon.extend({
                                        options: {
                                            iconSize: [24, 24],
                                            iconAnchor: [12, 16],
                                            popupAnchor: [-3, -76]
                                        }
                                    });

                                    var iconoExpendio = new iconoBase({ iconUrl: '@Cdn.Url/img_snier/vistas/central_electrica.png' });

                                    // Agrega los marcadores para las coordenadas del mapa actual
                                    for (var j = 0; j < response.length; j++) {
                                        var coordenada = response[j];
                                        var marker = L.marker([coordenada.latitudGeo, coordenada.longitudGeo], { icon: iconoExpendio });
                                        var contenidoPopup = generarContenidoPopup(coordenada);
                                        marker.bindPopup(contenidoPopup);



                                        markers.addLayer(marker);
                                    }

                                    mapmun.addLayer(markers);


                                },
                                error: function (error) {
                                    // Maneja el error si ocurre.
                                }
                            });
                        }
                        CargaExpendiosMun();






                    },
                    error: function (error) {
                        // Maneja el error si ocurre.
                    }


                });
            });
        });
    </script>







    }

