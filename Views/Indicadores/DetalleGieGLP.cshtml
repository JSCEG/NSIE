@model GIEViewModel

@using Microsoft.AspNetCore.Http
@using Newtonsoft.Json
@using NSIE.Models
@inject IHttpContextAccessor HttpContextAccessor

@{
    var httpContext = HttpContextAccessor.HttpContext;
    var perfilUsuarioJson = httpContext.Session.GetString("PerfilUsuario");
    var perfilUsuario = JsonConvert.DeserializeObject<PerfilUsuario>(perfilUsuarioJson);

    // Utilizar los datos del usuario para personalizar la vista
    ViewData["NombreUsuario"] = perfilUsuario.Nombre;
    ViewData["RolUsuario"] = perfilUsuario.Rol;
}

@*<div class="watermark-container">
@for (int i = 0; i < 30; i++) /* Cambiamos el número 3 por 9 para tener más marcas de agua */
{
<div class="watermark">
CRE-@DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss") - @ViewData["NombreUsuario"]
</div>
}
</div>*@

@{
    ViewData["Title"] = "Índice de Concentración de consumidores en unidades muestrales no monetarias (ICNM)";
}


<div class="watermark-container">
    @for (int i = 0; i < 50; i++) /* Cambiamos el número 3 por 9 para tener más marcas de agua */
    {
        <div class="watermark">
            CRE-@DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss") - @ViewData["NombreUsuario"]
        </div>
    }
</div>


<div class="text-center">
    <h4 class="cp-section cp-grouping-section">
        <img src="@Cdn.Url/img_snier/vistas/mexicoi.png" alt="Icono personalizado" class="iconomenu">
        @ViewData["Title"]
    </h4>
</div>

@*Sección que Despliega el Mapa Inicial*@
<div class="container">

    <div class="row pt-3">
        <div id="miDiv" class="">

            <h2 id="titulo" class="display-4 fw-bold text-center fs-2 pt-3">
                <img src="@Cdn.Url/img_snier/vistas/glpmapa.png" alt="Icono personalizado" class="iconomenu">
                <span id="tituloTexto"></span>
            </h2>

        </div>

    </div>

    <section id="despliega_mapa" class="pb-5">

        <div class="alert alert-success" role="alert">
            <p style="text-align:justify">

                Índice de Concentración de consumidores en unidades muestrales no monetarias (ICNM) es una medida,
                empleada en energía, que informa sobre la concentración física en el consumo del fluido físico de
                energía de un mercado. O, inversamente, la medida de falta de aprovisionamiento disponible en un sistema
                de suministro de energía. Un índice alto expresa un mercado muy concentrado (con aprovisionamiento) en
                términos de fluido físico de energía y con poca cobertura (por lo tanto, con alta oportunidad de
                aprovisionamiento y mínima, o inexistente, saturación de fluido físico).

            </p>

        </div>


        <section id="section1" class="section_i">
            <center>
                <div class="flex-container section-scroll">
                    <div class="flex-item">
                        <span class="icon"><img src="@Cdn.Url/img_snier/vistas/Solicitudes.png"
                                alt="Icono personalizado" class="iconomenu"></span>
                        <p>Solicitudes:</p>
                        <input type="text" class="form-control  text-center display-6 fw-bold" id="solicitudes_gie"
                            readonly style="background-color:#efefee; border:none" />
                    </div>
                    <img src="@Cdn.Url/img_snier/vistas/abajo.png" alt="Icono de flecha"
                        class="iconobotongie icono-derecha" style="padding-right:5px; transform:rotate(270deg)">
                    <div class="flex-item">
                        <span class="icon"><img src="@Cdn.Url/img_snier/vistas/camioni.png" alt="Icono personalizado"
                                class="iconomenu"></span>
                        <p>Transporte:</p>
                        <input type="text" class="form-control  text-center display-6 fw-bold" id="transporte_gie"
                            readonly style="background-color:#efefee; border:none" />
                    </div>
                    <img src="@Cdn.Url/img_snier/vistas/abajo.png" alt="Icono de flecha"
                        class="iconobotongie icono-derecha" style="padding-right:5px; transform:rotate(270deg)">
                    <div class="flex-item">
                        <span class="icon"><img src="@Cdn.Url/img_snier/vistas/gas_lp.png" alt="Icono personalizado"
                                class="iconomenu"></span>
                        <p>Almacenamiento:</p>
                        <input type="text" class="form-control  text-center display-6 fw-bold" id="almacenamiento_gie"
                            readonly style="background-color:#efefee; border:none" />
                    </div>
                    <img src="@Cdn.Url/img_snier/vistas/abajo.png" alt="Icono de flecha"
                        class="iconobotongie icono-derecha" style="padding-right:5px; transform:rotate(270deg)">
                    <div class="flex-item">
                        <span class="icon"><img src="@Cdn.Url/img_snier/vistas/gas_seco.png" alt="Icono personalizado"
                                class="iconomenu"></span>
                        <p>Distribución:</p>
                        <input type="text" class="form-control  text-center display-6 fw-bold" id="distribucion_gie"
                            readonly style="background-color:#efefee; border:none" />
                    </div>
                    <img src="@Cdn.Url/img_snier/vistas/abajo.png" alt="Icono de flecha"
                        class="iconobotongie icono-derecha" style="padding-right:5px; transform:rotate(270deg)">
                    <div class="flex-item">
                        <span class="icon"><img src="@Cdn.Url/img_snier/vistas/glpmapa.png" alt="Icono personalizado"
                                class="iconomenu"></span>
                        <p>Expendios:</p>
                        <input type="text" class="form-control  text-center display-6 fw-bold" id="expendios_gie"
                            readonly style="background-color:#efefee; border:none" />
                    </div>
                </div>
            </center>
        </section>



    </section>

    @*Grafico de Burbujas*@
    <div class="container-fluid">
        <div id="burbuja_container" style="fill:#efefee"></div>
    </div>



    <section id="despliega_mapa shadow p-3 mb-5 bg-body-tertiary rounded">

        <div class="container">
            <h3 class="subtitulo display-9 fw-bold"><img src="@Cdn.Url/img_snier/vistas/mexicoi.png"
                    alt="Icono personalizado" class="iconomenu pt-3">Ubicaciones de la Razón Social</h3>
            <div class="row">
                <div class="col-sm pt-3">
                    <div class="justify-content-center">
                        <button class="btn btn-cre-rojo" data-bs-toggle="offcanvas" data-bs-target="#ejemploOffcanvas">
                            <i class="bi bi-info-circle-fill"></i> - Ver Información
                        </button>
                        <partial name="_Infomapas_PRPEP" />

                    </div>
                </div>
                <div class="col-sm pt-3">
                    <select id="estado" class="form-select">
                        <option selected>
                            Selecciona una Entidad Federativa:
                        </option>
                        <option value="ags">Aguascalientes</option>
                        <option value="bc">Baja California</option>
                        <option value="bcs">Baja California Sur</option>
                        <option value="camp">Campeche</option>
                        <option value="coah">Coahuila</option>
                        <option value="col">Colima</option>
                        <option value="chis">Chiapas</option>
                        <option value="chih">Chihuahua</option>
                        <option value="cdmx">Ciudad de México</option>
                        <option value="dgo">Durango</option>
                        <option value="gto">Guanajuato</option>
                        <option value="gro">Guerrero</option>
                        <option value="hgo">Hidalgo</option>
                        <option value="jal">Jalisco</option>
                        <option value="mex">México</option>
                        <option value="mich">Michoacán</option>
                        <option value="mor">Morelos</option>
                        <option value="nay">Nayarit</option>
                        <option value="nl">Nuevo León</option>
                        <option value="oax">Oaxaca</option>
                        <option value="pue">Puebla</option>
                        <option value="qro">Querétaro</option>
                        <option value="qroo">Quintana Roo</option>
                        <option value="slp">San Luis Potosí</option>
                        <option value="sin">Sinaloa</option>
                        <option value="son">Sonora</option>
                        <option value="tab">Tabasco</option>
                        <option value="tamps">Tamaulipas</option>
                        <option value="tlax">Tlaxcala</option>
                        <option value="ver">Veracruz</option>
                        <option value="yuc">Yucatán</option>
                        <option value="zac">Zacatecas</option>
                    </select>
                </div>
                <div class="col-sm pt-3">
                    @*Prueba*@
                    <div class="dropdown" style="position: relative; z-index: 1000;">
                        <button class="btn btn-cre-rojo dropdown-toggle" id="dropdownMenuLink" type="button"
                            data-bs-toggle="dropdown" aria-expanded="false">
                            Selecciona Capa/Opción:
                        </button>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item" href="#" onclick="">Limpiar Mapa</a></li>
                            <li><a class="dropdown-item" href="#" onclick="">Ver Transporte</a></li>
                            <li><a class="dropdown-item" href="#" onclick="">Ver Almacenamiento</a></li>
                            <li><a class="dropdown-item" href="#" onclick="">Ver Distribución</a></li>
                            <li><a class="dropdown-item" href="#" onclick="">Ver Expendios</a></li>
                            <li><a class="dropdown-item" href="#" onclick="">Ver Solicitudes</a></li>
                            @*<li><a class="dropdown-item" href="javascript:void(0)" onclick="CargaExpendios()">Ver
                            Expendios a Nivel Nacional</a></li>*@

                        </ul>
                    </div>

                </div>
                <div class="col-sm pt-3">
                    <!-- Botón que activará el modal -->
                    <button onclick="openModal()" class="btn btn-cre-rojo"><i class="bi bi-camera-reels-fill"></i> Ver
                        Guía</button>

                    <!-- Modal para mostrar el video -->
                    <div id="videoModal"
                        style="display:none; position:fixed; top:0; left:0; width:100%; height:100%; background-color:rgba(0,0,0,0.5); align-items:center; justify-content:center; z-index:3000">
                        <video width="80%" controls>
                            <source src="/video/guia.mp4" type="video/mp4">
                            Tu navegador no soporta el elemento video.
                        </video>
                        <button onclick="closeModal()" class="btn btn-cre-rojo"
                            style="position:absolute; top:10px; right:10px;z-index:3000; width:300px!important">Cerrar</button>
                    </div>

                </div>
            </div>
        </div>

        <div class="search-container p-3">
            <label class="form-label">Buscar en el Mapa:</label>
            <input type="text" id="busquedaPermisoInput" class="form-control"
                placeholder="Escriba el Número de Permiso o el Turno K-MIS de la Solicitud...">

            <button class="btn btn-cre-rojo-home" onclick="buscarPorNumeroPermiso()" style="width:10% !important"><i
                    class="bi bi-search"></i></button>
        </div>
        <br />

        <div class="d-flex h-100">
            <div class="row m-0 w-100">
                <div id="sidebar" class="d-flex flex-column justify-content-between col-3 p-2">
                </div>
                @*<div id="map" class="p-3 bg"></div>*@
                <div id="map" class="col" style="position: relative; z-index: 500;"></div>
            </div>
        </div>
        <div class="leyenda">
            <p>Mayor Concentración</p>
            <p>Concentración Promedio</p>
            <p>Menor concentración</p>
            <p>Radio de 3 Km</p>
            <p> Ductos</p>
        </div>

        <br />

    </section>

</div>

@*Shapes Estados*@
<script type="text/javascript" src="@Cdn.Url/Geovisualizador/shapes/estadosmin.js"></script>
<script type="text/javascript" src="@Cdn.Url/Geovisualizador/shapes/municipiosmin.js"></script>
<script type="text/javascript" src="@Cdn.Url/Geovisualizador/shapes/ductos_glp.js"></script>

@*PDF*@
@*<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/pdfmake.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/vfs_fonts.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/0.5.0-beta4/html2canvas.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.9.2/html2pdf.bundle.min.js"></script>
*@

@*Funcionalidades del Mapa Inicial*@
<script>
    var map = L.map('map', {
        zoomControl: true,
        maxZoom: 28,
        minZoom: 5
    }).fitBounds([
        [16.515297504744552, -116.01198143543994],
        [31.280203931152798, -90.79533052556764]
    ]);

    var hash = new L.Hash(map);
    map.attributionControl.setPrefix('<a href="https://github.com/tomchadwin/qgis2web" target="_blank">qgis2web</a> &middot; <a href="https://leafletjs.com" title="A JS library for interactive maps">Leaflet</a> &middot; <a href="https://qgis.org">QGIS</a>');
    var autolinker = new Autolinker({ truncate: { length: 30, location: 'smart' } });
    var bounds_group = new L.featureGroup([]);
    function setBounds() {
    }


    // Crea los Iconos
    var iconoBase = L.Icon.extend({
        options: {
            iconSize: [24, 24],
            iconAnchor: [12, 16],
            popupAnchor: [-3, -76]
        }
    });

    // Asignación de Iconos
    var iconoSolicitudes = new iconoBase({ iconUrl: '@Cdn.Url/img_snier/vistas/Solicitudes.png' });
    iconoAprobado = new iconoBase({ iconUrl: '@Cdn.Url/img_snier/vistas/Aprobado.png' });
    iconoNoaprobado = new iconoBase({ iconUrl: '@Cdn.Url/img_snier/vistas/NoAprobado.png' });
    var currentMarker = null; // Referencia al marcador actual

    // var seleccionado = 'estado'; // Estado inicial
    var municipiosFiltrados = null;

    //Colores
    var initialStyle = {
        color: '#187A8C', // Color de línea
        fillColor: '#187A8C', // Color de relleno
        fillOpacity: 0.3, // Opacidad del relleno
        weight: 3 // Ancho de la línea
    };

    // Estilo para el hover
    var highlightStyle = {
        color: '#FFDB2EC',
        fillColor: '#FFDB2E', // Color de relleno
        fillOpacity: 0.3, // Opacidad del relleno
        weight: 3
    };

    // Capa de estados
    var estadosLayer = L.geoJSON(estados, {
        style: initialStyle, // Aplicar estilo inicial
        onEachFeature: function (feature, layer) {
            layer.bindTooltip('<div class="custom-tooltip">' + feature.properties.NOMGEO + '</div>');
            layer.on('click', function (e) {
                cargarMunicipios(feature.properties.CVE_ENT);
                map.fitBounds(layer.getBounds()); // Centra el mapa en el estado
            });
            // Efecto de hover
            layer.on('mouseover', function (e) {
                layer.setStyle(highlightStyle);
            });
            layer.on('mouseout', function (e) {
                estadosLayer.resetStyle(layer);
            });
        }
    }).addTo(map);

    // Capa de municipios (inicialmente vacía)
    var municipiosLayer = L.geoJSON(null, {
        style: initialStyle, // Aplicar estilo inicial
        onEachFeature: onEachMunicipio
    }).addTo(map);

    function onEachMunicipio(feature, layer) {
        layer.bindTooltip('<div class="custom-tooltip">' + feature.properties.NOM_MUN + ', ' + feature.properties.NOMGEO + '</div>');
        // Efecto de hover
        layer.on('mouseover', function (e) {
            layer.setStyle(highlightStyle);
        });
        layer.on('mouseout', function (e) {
            municipiosLayer.resetStyle(layer);
        });
        //layer.on('click', function (e) { // Click en el municipio
        //    if (currentMarker) {
        //        map.removeLayer(currentMarker);
        //    }
        //    currentMarker = L.marker(e.latlng, { icon: iconoSolicitudes }).addTo(map);
        //   // map.setView(e.latlng, 15); // Zoom en la ubicación
        //    // Establece los valores
        //    document.getElementById('entidad').value = feature.properties.NOMGEO;
        //    document.getElementById('municipio').value = feature.properties.NOM_MUN;
        //    document.getElementById('coordenada').value = '(' + e.latlng.lat + ', ' + e.latlng.lng + ')';
        //    document.getElementById('cvegeo').value = feature.properties.CVEGEO;
        //    document.getElementById('cve_ent').value = feature.properties.CVE_ENT;
        //    document.getElementById('cve_mun').value = feature.properties.CVE_MUN;
        //    document.getElementById('lat').value = e.latlng.lat;
        //    document.getElementById('lon').value = e.latlng.lng;
        //});
    }

    // Función para cargar los municipios correspondientes a un estado
    function cargarMunicipios(cveEnt) {
        if (municipiosLayer) {
            map.removeLayer(municipiosLayer);
        }
        if (currentMarker) {
            map.removeLayer(currentMarker);
            currentMarker = null;
        }
        municipiosFiltrados = {
            type: "FeatureCollection",
            features: municipios_mapa.features.filter(function (feature) {
                return feature.properties.CVE_ENT === cveEnt;
            })
        };
        municipiosLayer = L.geoJSON(municipiosFiltrados, {
            style: initialStyle,
            onEachFeature: onEachMunicipio
        }).addTo(map);
    }

    //Vista Satelite
    map.createPane('pane_GoogleSatellite_0');
    map.getPane('pane_GoogleSatellite_0').style.zIndex = 0;
    var layer_GoogleSatellite_0 = L.tileLayer('https://mt1.google.com/vt/lyrs=s&x={x}&y={y}&z={z}', {
        pane: 'pane_GoogleSatellite_0',
        opacity: 1.0,
        attribution: '<a href="https://www.google.at/permissions/geoguidelines/attr-guide.html">Map data ©2015 Google</a>',
        minZoom: 1,
        maxZoom: 28,
        minNativeZoom: 0,
        maxNativeZoom: 20
    });

    //Configura los Base Layers
    var baseLayers = {
        "OpenStreetMap": L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }),
        "Vista Satélite": layer_GoogleSatellite_0
    };

    // Control de capas para seleccionar la vista del mapa
    L.control.layers(baseLayers).addTo(map);

    // Activa una capa de mosaicos como vista inicial
    baseLayers["OpenStreetMap"].addTo(map);

    // Redibujar la capa cuando se seleccione
    map.on('baselayerchange', function (eventLayer) {
        if (eventLayer.name === "Vista Satélite") {
            layer_GoogleSatellite_0.redraw();
        }
    });

    L.control.scale().addTo(map); // Agregar la escala gráfica al mapa

</script>

@*Herramientas Mapa*@
<script>

    //ZOOM
    var resetZoomControl = L.control({ position: 'topleft' });

    resetZoomControl.onAdd = function (map) {
        var div = L.DomUtil.create('div', 'reset-zoom-control');
        div.innerHTML = '<button class="btn btn-cre-rojo-home" onclick="resetZoom()"><i class="bi bi-house-door"></i></button>';
        return div;
    };

    resetZoomControl.addTo(map);

    function resetZoom() {
        map.setView([24.572503, -101.768257], 5);
    }
    /////////////DISTANCIAS/////////////////////
    // Configura las opciones de dibujo
    var drawControl = new L.Control.Draw({
        draw: {
            polygon: false,
            polyline: true,
            rectangle: false,
            circle: false,
            marker: false,
            circlemarker: false
        },
        edit: false
    });

    map.addControl(drawControl);

    // Cuando se dibuja una línea, calcula la distancia
    map.on('draw:created', function (e) {
        var type = e.layerType,
            layer = e.layer;

        if (type === 'polyline') {
            var latlngs = layer.getLatLngs();
            var distance = 0;
            for (var i = 1; i < latlngs.length; i++) {
                distance += latlngs[i - 1].distanceTo(latlngs[i]);
            }
            // Convertir la distancia a km y redondear a 2 decimales
            distance = Math.round((distance / 1000) * 100) / 100;
            // Crear un popup con la distancia
            layer.bindPopup('Distancia: ' + distance + ' km').openPopup();
            // Añadir la línea al mapa
            layer.addTo(map);
        }
    });

</script>

@*Menú de Estados*@
<script>
    // Detecta el cambio de selección en el menú de estados
    document.getElementById("estado").addEventListener("change", function () {
        // Obtiene el valor seleccionado del menú de estados
        var estado = document.getElementById("estado").value;

        // Muestra el estado seleccionado en el mapa
        switch (estado) {
            case "ags":
                map.setView([22.025278, -102.372778], 9);
                break;
            case "bc":
                map.setView([30.391389, -115.291389], 7);
                break;
            case "bcs":
                map.setView([26.044444, -112.399722], 7);
                break;
            case "camp":
                map.setView([18.938333, -90.764722], 7);
                break;
            case "coah":
                map.setView([27.158056, -101.719444], 7);
                break;
            case "col":
                map.setView([19.101944, -103.014722], 9);
                break;
            case "chis":
                map.setView([16.753056, -92.6375], 7);
                break;
            case "chih":
                map.setView([28.673611, -106.102222], 7);
                break;
            case "cdmx":
                map.setView([19.432778, -99.133333], 10);
                break;
            case "dgo":
                map.setView([24.865278, -104.902222], 7);
                break;
            case "gto":
                map.setView([20.875, -101.478611], 8);
                break;
            case "gro":
                map.setView([17.814722, -100.353056], 8);
                break;
            case "hgo":
                map.setView([20.5325, -98.870556], 8);
                break;
            case "jal":
                map.setView([20.673611, -103.343333], 8);
                break;
            case "mex":
                map.setView([19.483611, -99.689722], 8);
                break;
            case "mich":
                map.setView([19.699722, -101.191389], 8);
                break;
            case "mor":
                map.setView([18.858611, -99.223611], 9);
                break;
            case "nay":
                map.setView([21.799444, -105.220833], 8);
                break;
            case "nl":
                map.setView([25.649167, -100.443611], 9);
                break;
            case "oax":
                map.setView([16.895833, -96.806667], 8);
                break;
            case "pue":
                map.setView([19.051389, -98.193889], 8);
                break;
            case "qro":
                map.setView([20.854722, -99.847222], 9);
                break;
            case "qroo":
                map.setView([19.642778, -87.072222], 8);
                break;
            case "slp":
                map.setView([22.156944, -100.985556], 8);
                break;
            case "sin":
                map.setView([24.288611, -107.366944], 8);
                break;
            case "son":
                map.setView([29.089444, -110.961667], 7);
                break;
            case "tab":
                map.setView([17.980000, -92.930000], 8);
                break;
            case "tamps":

                map.setView([24.014167, -98.844444], 7);
                break;
            case "tlax":
                map.setView([19.312222, -98.239722], 10);
                break;
            case "ver":
                map.setView([19.546389, -96.914167], 8);
                break;
            case "yuc":
                map.setView([20.891944, -89.528611], 8);
                break;
            case "zac":
                map.setView([22.770833, -102.583611], 8);
                break;
            default:

                map.setView([23.634501, -102.552784], 5);
                break;
        }
    });
</script>

@*Funciones del Mapa*@
<script>

    //1.Función que detecta cuántos permisos están dentro del radio de 3km de una solicitud:
    function calcularDistancia(lat1, lon1, lat2, lon2) {
        var R = 6371; // Radio de la tierra en km
        var dLat = (lat2 - lat1) * (Math.PI / 180);
        var dLon = (lon2 - lon1) * (Math.PI / 180);
        var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
            Math.cos(lat1 * (Math.PI / 180)) * Math.cos(lat2 * (Math.PI / 180)) *
            Math.sin(dLon / 2) * Math.sin(dLon / 2);
        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        var distancia = R * c;
        return distancia;
    }


    //Manda a Detalle de solicitud 3km

    function redireccionarADetalle(idSolicitud) {
        window.open("/Indicadores/DetalleSolicitudGLP?id=" + idSolicitud, '_blank');
    }





    //Ductos de GLP
    function ductosglp() {
        function pop_ductos_glp(feature, layer) {
            var popupContent = '<table>\
                                        <tr>\
                                            <th scope="row">Región: </th>\
                                            <td>' + (feature.properties['Región: '] !== null ? autolinker.link(feature.properties['regin'].toLocaleString()) : '') + '</td>\
                                        </tr>\
                                        <tr>\
                                            <th scope="row">Ducto: </th>\
                                            <td>' + (feature.properties['Ducto: '] !== null ? autolinker.link(feature.properties['ducto'].toLocaleString()) : '') + '</td>\
                                        </tr>\
                                        <tr>\
                                            <th scope="row">Servicio: </th>\
                                            <td>' + (feature.properties['Servicio: '] !== null ? autolinker.link(feature.properties['servicio'].toLocaleString()) : '') + '</td>\
                                        </tr>\
                                        <tr>\
                                            <th scope="row">Longitud (km): </th>\
                                            <td>' + (feature.properties['Longitud (km): '] !== null ? autolinker.link(feature.properties['lon'].toLocaleString()) : '') + '</td>\
                                        </tr>\
                                        <tr>\
                                            <th scope="row">Capa nominal (B): </th>\
                                            <td>' + (feature.properties['Capacidad nominal (B): '] !== null ? autolinker.link(feature.properties['capa_n'].toLocaleString()) : '') + '</td>\
                                        </tr>\
                                        <tr>\
                                            <th scope="row">Capa operativa (B): </th>\
                                            <td>' + (feature.properties['Capacidad operativa (B): '] !== null ? autolinker.link(feature.properties['capa_o'].toLocaleString()) : '') + '</td>\
                                        </tr>\
                                    </table>';
            layer.bindPopup(popupContent, { maxHeight: 400 });
        }

        function style_ductos_glp() {
            return {
                pane: 'pane_ductos_glp',
                opacity: 1,
                color: 'rgba(128,64,0,1.0)',
                dashArray: '',
                lineCap: 'square',
                lineJoin: 'bevel',
                weight: 2.0,
                fillOpacity: 0,
                interactive: true,
            }
        }
        map.createPane('pane_ductos_glp');
        map.getPane('pane_ductos_glp').style.zIndex = 400;
        map.getPane('pane_ductos_glp').style['mix-blend-mode'] = 'normal';
        var layer_ductos_glp = new L.geoJson(json_ductos_glp, {
            attribution: '',
            interactive: true,
            dataVar: 'json_ductos_glp',
            layerName: 'layer_ductos_glp',
            pane: 'pane_ductos_glp',
            onEachFeature: pop_ductos_glp,
            style: style_ductos_glp,
        });
        bounds_group.addLayer(layer_ductos_glp);
        map.addLayer(layer_ductos_glp);
    }

    ductosglp();


    function limpiarMarcadores() {
        // Limpiar todas las capas de marcadores y círculos
        map.eachLayer(function (layer) {
            if (layer instanceof L.Marker || layer instanceof L.MarkerClusterGroup || layer instanceof L.Circle || layer instanceof L.Polyline) {
                map.removeLayer(layer);
            }
        });

        // Eliminar la capa de municipios
        //if (municipiosLayer) {
        //    map.removeLayer(municipiosLayer);
        //    municipiosLayer = null; // Establecer la variable municipiosLayer como nula
        //}
    }





    function CargaExpendios() {
        // Limpiar marcadores existentes
        limpiarMarcadores()
        // Tabla de Resultados
        $.ajax({
            url: '/Indicadores/GetExpendiosAutorizadosGLP',
            type: 'GET',
            // data: JSON.stringify(datos_mun),
            contentType: 'application/json',
            success: function (response) {
                console.log("Estos son los Expendios Vigentes:", response); // ver la respuesta en consola

                //Mapa de Resultados/////////////////////////////////////////////////////////////////////
                // Crea un grupo de marcadores
                var markers = L.markerClusterGroup();
                // Crea los iconos
                var iconoBase = L.Icon.extend({
                    options: {
                        iconSize: [24, 24],
                        iconAnchor: [12, 16],
                        popupAnchor: [-3, -76]
                    }
                });

                var iconoExpendio = new iconoBase({ iconUrl: '@Cdn.Url/img_snier/vistas/Expendio.png' });

                // Agrega los marcadores para las coordenadas del mapa actual
                for (var j = 0; j < response.length; j++) {
                    var coordenada = response[j];
                    var marker = L.marker([coordenada.latitud_GEO, coordenada.longitud_GEO], { icon: iconoExpendio });

                    marker.bindPopup("<h3>" + coordenada.numeroPermiso + "</h3><p>" + coordenada.razón_social + "</p> <hr/><ul><li>Fecha de Otorgamiento del Permiso:" + coordenada.fechaOtorgamiento + "</li><li>Número de Permiso:" + coordenada.numeroPermiso + "</li></ul><a target='_blank' href='/Indicadores/DetalleExpendio?NumeroPermiso=" + coordenada.numeroPermiso + "'>Ver detalle</a>");

                    markers.addLayer(marker);
                }

                map.addLayer(markers);
            },
            error: function (error) {
                // Maneja el error si ocurre.
            }
        });
    }

</script>

@*Guia*@
<script>
    function openModal() {
        document.getElementById('videoModal').style.display = 'flex';
    }

    function closeModal() {
        document.getElementById('videoModal').style.display = 'none';
    }

    function printWithCustomTitle() {
        // Guardar el título original
        var originalTitle = document.title;

        // Obtener la fecha y hora actuales y formatearlas
        var currentDate = new Date();
        var formattedDate = currentDate.getFullYear() +
            '-' + (currentDate.getMonth() + 1).toString().padStart(2, '0') +
            '-' + currentDate.getDate().toString().padStart(2, '0') +
            '_' + currentDate.getHours().toString().padStart(2, '0') +
            '-' + currentDate.getMinutes().toString().padStart(2, '0') +
            '-' + currentDate.getSeconds().toString().padStart(2, '0');

        // Cambiar el título de la página
        document.title = 'CRE-Evaluación-' + formattedDate;

        // Llamar a window.print()
        window.print();

        // Restaurar el título original después de un pequeño retraso
        setTimeout(function () {
            document.title = originalTitle;
        }, 500);
    }

</script>

@*Pasando el grupo al Mapa*@
<script>

    var camposVisiblesGlobal = [];
    $(document).ready(function () {
        $.ajax({
            url: '/Indicadores/GetCamposVisiblesGLP', // Asegúrate de actualizar 'TuControlador' con el nombre de tu controlador
            type: 'GET',
            contentType: 'application/json',
            success: function (camposVisibles) {
                // Aquí tienes la lista de campos visibles
                console.log("Campos visibles:", camposVisibles);
                camposVisiblesGlobal = camposVisibles;

                // Procesa los permisos aquí dentro porque si la llamada es ante spueden Salir Vacío
                // Procesar permisos solo si hay datos
                if (permisos && permisos.length > 0) {
                    procesarPermisos();
                }

            },
            error: function (error) {
                console.error("Error al obtener campos visibles", error);
            }
        });
    });
    function handleNull(value) {
        return value ? value : "S/D-Sin Dato";
    }


    var permisos = @Html.Raw(Json.Serialize(Model.PermisosGLP));
    // Asume que ya has procesado permisos
    if (permisos.length > 0) {
        $('#tituloTexto').text(permisos[0].razonSocial);
    }
    var solicitudes = @Html.Raw(Json.Serialize(Model.Solicitudes));

    // Imprimir las listas en la consola para revisión
    console.log("Permisos:", permisos);
    console.log("Solicitudes:", solicitudes);

    //Sidebar
    //Sidebar
    const contenedorItems = document.createElement('ul');
    contenedorItems.classList.add('list-group');
    contenedorItems.style.overflow = 'auto';
    contenedorItems.style.maxHeight = 'calc(280vh - 80px)';
    sidebar.append(contenedorItems);

    // Agrega el encabezado "GIE" al sidebar
    const encabezadoTexto = "Razón Social";
    const selecciona = document.createElement('p');
    selecciona.classList.add('btn', 'btn-cre-verde', 'text-center');
    selecciona.innerText = encabezadoTexto;
    selecciona.style.position = 'sticky';
    selecciona.style.top = '0';
    sidebar.prepend(selecciona);

    function crearItemsSidebar(lista, tipo) {
        lista.forEach((item) => {
            const li = document.createElement('li');
            li.classList.add('list-group-item');
            li.style.height = '200px';
            li.style.marginBottom = '10px';

            const texto = document.createElement('span');
            let contenidoTexto;
            let rutaIcono;

            if (tipo === 'permisos') {
                contenidoTexto = `<strong>Razón Social:</strong> ${item.razonSocial}<br><strong>Tipo:</strong> ${item.tipo}`;
                if (item.numeroPermiso) {
                    contenidoTexto += `<br><strong>Número de Permiso:</strong> ${item.numeroPermiso}`;
                }
                rutaIcono = '@Cdn.Url/img_snier/vistas/glpmapa.png';
            } else if (tipo === 'solicitudes') {
                contenidoTexto = `<strong>Razón Social:</strong> ${item.razonSocial_sol}<br><strong>Tipo:</strong> ${item.tipo}<br><strong>Número de Turno:</strong> ${item.turno_sol}`;
                rutaIcono = '@Cdn.Url/img_snier/vistas/Solicitudes.png';
            }

            texto.innerHTML = contenidoTexto;
            li.appendChild(texto);

            const icono = document.createElement('img');
            icono.src = rutaIcono;
            icono.classList.add('icono-responsivo');
            li.insertBefore(icono, texto);

            contenedorItems.append(li);

            li.addEventListener('click', () => {
                limpiaritems();
                li.classList.add('active');

                // Ajusta las coordenadas según el tipo
                let lat, lon;
                if (tipo === 'permisos') {
                    lat = item.latitudGeo;
                    lon = item.longitudGeo;
                } else if (tipo === 'solicitudes') {
                    lat = item.xGeo_sol;
                    lon = item.yGeo_sol;
                }

                // Verifica que lat y lon no sean undefined antes de volar al punto
                if (lat !== undefined && lon !== undefined) {
                    volar([lat, lon]);
                } else {
                    console.error("Error: Latitud o longitud no definidas para el ítem", item);
                }
            });

        });
    }


    //Eventos Baiscos

    map.on('click', (evento) => {
        const lat = evento;
        console.log(lat.latlng)
    });

    //Metodos
    map.center

    //Funciones

    //Fly to Place
    const volar = (latlng) => {
        map.flyTo(latlng, 13);
    }

    //Fly to
    // Municipio
    const volar_municipio = (latlng) => {
        map.flyTo(latlng, 13);
    }

    //Limpiar Items del Side Bar
    const limpiaritems = () => {
        const listadoLi = document.querySelectorAll('li');
        listadoLi.forEach(li => {
            li.classList.remove('active');
        })
    }



    // Iniciar el cluster de marcadores
    var markers = L.markerClusterGroup();
    function procesarPermisos() {
        // Tu código de procesamiento de permisos aquí
        // Procesar permisos
        permisos.forEach(function (item) {
            var lat = item.latitudGeo;
            var lon = item.longitudGeo;
            var iconoPermisosUrl = '@Cdn.Url/img_snier/vistas/glpmapa.png'; // Asegúrate de tener la ruta correcta a tu ícono

            var icon = L.icon({
                iconUrl: iconoPermisosUrl,
                iconSize: [24, 24]
            });

            // Agrega los marcadores para los permisos

            var marker = L.marker([lat, lon], { icon: icon });

            var estilo =
                "<style>" +
                ".popup-content {" +
                "width: 300px;" +
                "height: 150px;" +
                "overflow-y: auto;" +
                "padding: 10px;" +
                "}" +
                "h2, h3, h4, p, li {" +
                "margin: 0 0 10px 0;" +
                "}" +
                "ul {" +
                "padding-left: 20px;" +
                "}" +
                "img {" +
                "vertical-align: middle;" +
                "margin-right: 10px;" +
                "}" +
                "</style>";

            var contenido = "<div class='popup-content'>";

            if (camposVisiblesGlobal.includes("RazonSocial")) {
                contenido += "<h2 class='subtitulo'><img src='@Cdn.Url/img_snier/vistas/glpmapa.png' style='height: 24px; width: 24px;'/><strong>" + handleNull(item.razonSocial) + "</strong></h2><br>";
            }

            contenido += "<ul>";

            if (camposVisiblesGlobal.includes("EfId")) {//NO TENEMOS EL NOMBRE DE LA EF EN CAMPOS VISIBLES SOLO EL ID LO CRUZO EN LA CONSULTA DEL REPOSITORIO
                contenido += "<li><strong>Entidad Federativa:</strong> " + handleNull(item.efNombre) + "</li>";
            }
            if (camposVisiblesGlobal.includes("NumeroPermiso")) {
                contenido += "<li><strong>NúmeroPermiso:</strong> " + handleNull(item.numeroPermiso) + "</li>";
            }
            if (camposVisiblesGlobal.includes("EfId")) {
                contenido += "<li><strong>EF ID:</strong> " + handleNull(item.efId) + "</li>";
            }
            if (camposVisiblesGlobal.includes("EfNombre")) {
                contenido += "<li><strong>EFNombre:</strong> " + handleNull(item.efNombre) + "</li>";
            }
            if (camposVisiblesGlobal.includes("MpoId")) {
                contenido += "<li><strong>Mpo ID:</strong> " + handleNull(item.mpoId) + "</li>";
            }
            if (camposVisiblesGlobal.includes("NumeroDeExpediente")) {
                contenido += "<li><strong>Número de Expediente:</strong> " + handleNull(item.numeroDeExpediente) + "</li>";
            }
            if (camposVisiblesGlobal.includes("RazonSocial")) {
                contenido += "<li><strong>RazonSocial:</strong> " + handleNull(item.razonSocial) + "</li>";
            }
            if (camposVisiblesGlobal.includes("FechaOtorgamiento")) {
                contenido += "<li><strong>FechaOtorgamiento:</strong> " + handleNull(item.fechaOtorgamiento) + "</li>";
            }
            if (camposVisiblesGlobal.includes("LatitudGeo")) {
                contenido += "<li><strong> la titudGeo:</strong> " + handleNull(item.latitudGeo) + "</li>";
            }
            if (camposVisiblesGlobal.includes("LongitudGeo")) {
                contenido += "<li><strong>LongitudGeo:</strong> " + handleNull(item.longitudGeo) + "</li>";
            }
            if (camposVisiblesGlobal.includes("CalleNumEs")) {
                contenido += "<li><strong>CalleNumEs:</strong> " + handleNull(item.calleNumEs) + "</li>";
            }
            if (camposVisiblesGlobal.includes("ColoniaEs")) {
                contenido += "<li><strong>ColoniaEs:</strong> " + handleNull(item.coloniaEs) + "</li>";
            }
            if (camposVisiblesGlobal.includes("CodigoPostal")) {
                contenido += "<li><strong>CodigoPostal:</strong> " + handleNull(item.codigoPostal) + "</li>";
            }
            if (camposVisiblesGlobal.includes("Estatus")) {
                contenido += "<li><strong>Estatus:</strong> " + handleNull(item.estatus) + "</li>";
            }
            if (camposVisiblesGlobal.includes("Rfc")) {
                contenido += "<li><strong>Rfc:</strong> " + handleNull(item.rfc) + "</li>";
            }
            if (camposVisiblesGlobal.includes("FechaRecepcion")) {
                contenido += "<li><strong>FechaRecepcion:</strong> " + handleNull(item.fechaRecepcion) + "</li>";
            }
            if (camposVisiblesGlobal.includes("EstatusInstalacion")) {
                contenido += "<li><strong>EstatusInstalacion:</strong> " + handleNull(item.estatusInstalacion) + "</li>";
            }
            if (camposVisiblesGlobal.includes("CausaSuspension")) {
                contenido += "<li><strong>CausaSuspension:</strong> " + handleNull(item.causaSuspension) + "</li>";
            }
            if (camposVisiblesGlobal.includes("Marca")) {
                contenido += "<li><strong>Marca:</strong> " + handleNull(item.marca) + "</li>";
            }
            if (camposVisiblesGlobal.includes("TipoPermiso")) {
                contenido += "<li><strong>TipoPermiso:</strong> " + handleNull(item.tipoPermiso) + "</li>";
            }
            if (camposVisiblesGlobal.includes("InicioVigencia")) {
                contenido += "<li><strong>InicioVigencia:</strong> " + handleNull(item.inicioVigencia) + "</li>";
            }
            if (camposVisiblesGlobal.includes("TerminoVigencia")) {
                contenido += "<li><strong>TerminoVigencia:</strong> " + handleNull(item.terminoVigencia) + "</li>";
            }
            if (camposVisiblesGlobal.includes("InicioOperaciones")) {
                contenido += "<li><strong>InicioOperaciones:</strong> " + handleNull(item.inicioOperaciones) + "</li>";
            }
            if (camposVisiblesGlobal.includes("CapacidadAutorizadaBarriles")) {
                contenido += "<li><strong>CapacidadAutorizadaBarriles:</strong> " + handleNull(item.capacidadAutorizadaBarriles) + "</li>";
            }
            if (camposVisiblesGlobal.includes("InversionEstimada")) {
                contenido += "<li><strong>InversionEstimada:</strong> " + handleNull(item.inversionEstimada) + "</li>";
            }
            if (camposVisiblesGlobal.includes("Productos")) {
                contenido += "<li><strong>Productos:</strong> " + handleNull(item.productos) + "</li>";
            }
            if (camposVisiblesGlobal.includes("Comentarios")) {
                contenido += "<li><strong>Comentarios:</strong> " + handleNull(item.comentarios) + "</li>";
            }
            if (camposVisiblesGlobal.includes("TipoPersona")) {
                contenido += "<li><strong>TipoPersona:</strong> " + handleNull(item.tipoPersona) + "</li>";
            }
            if (camposVisiblesGlobal.includes("NumeroDeEstacionesDeServicio")) {
                contenido += "<li><strong>Número de Estaciones de Servicio:</strong> " + handleNull(item.numeroDeEstacionesDeServicio) + "</li>";
            }
            if (camposVisiblesGlobal.includes("TipoDeEstacion")) {
                contenido += "<li><strong>Tipo de Estacion:</strong> " + handleNull(item.tipoDeEstacion) + "</li>";
            }
            if (camposVisiblesGlobal.includes("FechaDeAcuse")) {
                contenido += "<li><strong>Fecha de Acuse:</strong> " + handleNull(item.fechaDeAcuse) + "</li>";
            }
            if (camposVisiblesGlobal.includes("FechaEntregaEstadosFinancieros")) {
                contenido += "<li><strong>FechaEntregaEstadosFinancieros:</strong> " + handleNull(item.fechaEntregaEstadosFinancieros) + "</li>";
            }
            if (camposVisiblesGlobal.includes("Propietario")) {
                contenido += "<li><strong>Propietario:</strong> " + handleNull(item.propietario) + "</li>";
            }
            if (camposVisiblesGlobal.includes("CapacidadMaximaDeLaBomba")) {
                contenido += "<li><strong>CapacidadMaxima de  la Bomba:</strong> " + handleNull(item.capacidadMaximaDeLaBomba) + "</li>";
            }
            if (camposVisiblesGlobal.includes("CapacidadOperativaReal")) {
                contenido += "<li><strong>CapacidadOperativaReal:</strong> " + handleNull(item.capacidadOperativaReal) + "</li>";
            }
            if (camposVisiblesGlobal.includes("ServicioDeRegadera")) {
                contenido += "<li><strong>Servicio de Regadera:</strong> " + handleNull(item.servicioDeRegadera) + "</li>";
            }
            if (camposVisiblesGlobal.includes("ServicioDeRestaurante")) {
                contenido += "<li><strong>Servicio de Restaurante:</strong> " + handleNull(item.servicioDeRestaurante) + "</li>";
            }
            if (camposVisiblesGlobal.includes("ServicioDeSanitario")) {
                contenido += "<li><strong>Servicio de Sanitario:</strong> " + handleNull(item.servicioDeSanitario) + "</li>";
            }
            if (camposVisiblesGlobal.includes("OtrosServicios")) {
                contenido += "<li><strong>OtrosServicios:</strong> " + handleNull(item.otrosServicios) + "</li>";
            }
            if (camposVisiblesGlobal.includes("TiendaDeConveniencia")) {
                contenido += "<li><strong>Tienda de Conveniencia:</strong> " + handleNull(item.tiendaDeConveniencia) + "</li>";
            }
            if (camposVisiblesGlobal.includes("NumeroDeModulosDespachadores")) {
                contenido += "<li><strong>Número de Modulos de spachadores:</strong> " + handleNull(item.numeroDeModulosDespachadores) + "</li>";
            }
            if (camposVisiblesGlobal.includes("TipoDeEstacionId")) {
                contenido += "<li><strong>Tipo de Estacion ID:</strong> " + handleNull(item.tipoDeEstacionId) + "</li>";
            }
            if (camposVisiblesGlobal.includes("TipoDePersona")) {
                contenido += "<li><strong>Tipo de Persona:</strong> " + handleNull(item.tipoDePersona) + "</li>";
            }
            if (camposVisiblesGlobal.includes("TipoDePermiso")) {
                contenido += "<li><strong>Tipo de Permiso:</strong> " + handleNull(item.tipoDePermiso) + "</li>";
            }
            if (camposVisiblesGlobal.includes("EstadoDePermiso")) {
                contenido += "<li><strong>Estado de Permiso:</strong> " + handleNull(item.estadoDePermiso) + "</li>";
            }
            if (camposVisiblesGlobal.includes("EstatusDeLaInstalacion")) {
                contenido += "<li><strong>Estatus de  la Instalacion:</strong> " + handleNull(item.estatusDeLaInstalacion) + "</li>";
            }
            if (camposVisiblesGlobal.includes("ImagenCorporativa")) {
                contenido += "<li><strong>ImagenCorporativa:</strong> " + handleNull(item.imagenCorporativa) + "</li>";
            }
            if (camposVisiblesGlobal.includes("CausaSuspencionInstalacionId")) {
                contenido += "<li><strong>CausaSuspencionInstalacion ID:</strong> " + handleNull(item.causaSuspencionInstalacionId) + "</li>";
            }

            contenido += "</ul>";

            if (camposVisiblesGlobal.includes("NumeroPermiso")) {
                contenido += "<a class='btn btn-cre-rojo' target='_blank' href='/Indicadores/DetalleExpendio?NumeroPermiso=" + item.numeroPermiso + "'>Ver detalle</a>";
            }



            contenido += "</div>";

            var contenidoPopup = estilo + contenido;

            marker.bindPopup(contenidoPopup);




            // Añadir marcador al cluster
            markers.addLayer(marker);

            // $('#sidebar').append('<div>' + item.razonSocial + item.tipo '</div>');
        });
        //Agrega los Permisos al Side Bar
        crearItemsSidebar(permisos, 'permisos');
        map.addLayer(markers);
    }


    $(document).ready(function () {
        if (solicitudes && solicitudes.length > 0) {
            // El código que procesa las solicitudes va aquí
            // Procesar solicitudes
            solicitudes.forEach(function (item) {
                var lat = item.xGeo_sol;
                var lon = item.yGeo_sol;
                var iconoSolicitudesUrl = '@Cdn.Url/img_snier/vistas/Solicitudes.png'; // Asegúrate de tener la ruta correcta a tu ícono

                var icon = L.icon({
                    iconUrl: iconoSolicitudesUrl,
                    iconSize: [24, 24]
                });

                var marker = L.marker([lat, lon], { icon: icon });

                // Configurar el popup
                var popupContent =
                    "<style>" +
                    ".popup-content {" +
                    "width: 300px;" +
                    "height: 150px;" +
                    "overflow-y: auto;" +
                    "padding: 10px;" +
                    "}" +
                    "h2, h3, h4, p, li {" +
                    "margin: 0 0 10px 0;" +
                    "}" +
                    "ul {" +
                    "padding-left: 20px;" +
                    "}" +
                    "img {" +
                    "vertical-align: middle;" +
                    "margin-right: 10px;" +
                    "}" +
                    "</style>" +
                    "<div class='popup-content'>" +
                    "<h2 class='subtitulo'><img src='" + iconoSolicitudesUrl + "' style='height: 24px; width: 24px;'/><strong>" + item.razonSocial_sol + "</strong></h2>" +
                    "<br>" +
                    "<h6><i class='bi bi-fuel-pump''></i> Marca Solicitada: " + item.marcaSolicitada_sol + "</h6>" +
                    "<h6><i class='bi bi-qr-code'></i> Turno de Kmis: " + item.turno_sol + "</h6>" +
                    "<h6><i class='bi bi-fingerprint'></i> ID Solicitud: " + item.id_sol + "</h6>" +
                    "<p><i class='bi bi-geo-alt-fill'></i> Entidad Federativa: " + item.efNombre_sol + "</p>" +
                    "<ul>" +
                    "<li><strong>Municipio:</strong> " + item.municipioNombre_sol + "</li>" +
                    "<li><strong>¿Documentos Completos?:</strong> " + (item.documentosCompletos_sol == "1" ? 'SI' : 'No') + "</li>" +
                    "<li><strong>¿Tiene Análisis de Riesgo?:</strong> " + (item.analisisRiesgo_sol == "1" ? 'SI' : 'No') + "</li>" +
                    "</ul>" +
                    "<button class='btn btn-cre-amarillo' onclick='redireccionarADetalle(" + item.id_sol + ")'>Ver Expendios Cercanos a Solicitud</button>  <hr />" +
                    "<a class='street-view-link btn btn-cre-verde' href='#'>Ver vista de calle</a> <hr />" +
                    "<a class='btn btn-cre-rojo' target='_blank' href='https://titan.cre.gob.mx/Consulta/Turno/" + item.turno_sol + "'>Ver Expediente en Titán</a>" +

                    "</div>";

                marker.bindPopup(popupContent);

                marker.on('popupopen', function (e) {
                    var popup = e.popup;
                    var streetViewLink = popup.getElement().querySelector('.street-view-link');
                    streetViewLink.addEventListener('click', function () {
                        var lat = e.target.getLatLng().lat.toPrecision(8);
                        var lon = e.target.getLatLng().lng.toPrecision(8);
                        var streetViewURL = 'http://maps.google.com/maps?q=&layer=c&cbll=' + lat + ',' + lon + '&cbp=11,0,0,0,0';
                        window.open(streetViewURL, '_blank');
                    });
                });

                // Añadir marcador al cluster
                //markers.addLayer(marker);
                marker.addTo(map);

                // También puedes agregar el círculo si lo necesitas
                var circle = L.circle([item.xGeo_sol, item.yGeo_sol], {
                    color: '#1e3143',
                    fillColor: '#1e3143',
                    fillOpacity: 0.2,
                    radius: 3000
                }).addTo(map);



            });

            //Sidebar
            // $('#sidebar').append('<div>' + item.razonSocial_sol + item.tipo +'</div>');
            crearItemsSidebar(solicitudes, 'solicitudes');
            // Añadir el cluster al mapa
            map.addLayer(markers);
        }

    });


    function buscarPorNumeroPermiso() {
        var numeroBuscado = document.getElementById('busquedaPermisoInput').value.trim();

        if (!numeroBuscado) {
            alert("Por favor, introduce un Número de Permiso o Turno K-MIS.");
            return;
        }

        var encontrado = false;
        var lat, lon;

        // Buscar en permisos
        for (var i = 0; i < permisos.length; i++) {
            var permiso = permisos[i];
            if (permiso.numeroPermiso === numeroBuscado) {
                lat = permiso.latitudGeo;
                lon = permiso.longitudGeo;
                encontrado = true;
                break;
            }
        }

        // Si no se encuentra en permisos, buscar en solicitudes
        if (!encontrado) {
            for (var i = 0; i < solicitudes.length; i++) {
                var solicitud = solicitudes[i];
                if (solicitud.turno_sol === numeroBuscado) {
                    lat = solicitud.xGeo_sol;
                    lon = solicitud.yGeo_sol;
                    encontrado = true;
                    break;
                }
            }
        }

        if (encontrado) {
            map.flyTo([lat, lon], 15);  // 15 es el nivel de zoom, puedes ajustarlo según prefieras
        } else {
            alert("Número de Permiso o Turno K-MIS no encontrado.");
        }
    }

    //Asignando los totales:
    // Obtiene el total de permisos y solicitudes
    var totalPermisos = permisos.length;
    var totalSolicitudes = solicitudes.length;

    // Asigna estos valores a los inputs
    document.getElementById("solicitudes_gie").value = totalSolicitudes;
    document.getElementById("expendios_gie").value = totalPermisos;

</script>


@*Grafico de Burbujas*@

<script>
    // Tus datos
    var permisos = @Html.Raw(Json.Serialize(Model.PermisosGLP));
    var solicitudes = @Html.Raw(Json.Serialize(Model.Solicitudes));

    // Asumiendo que el primer elemento de "permisos" tiene la propiedad "razonSocial"
    var razonSocial = (permisos[0] && permisos[0].razonSocial) || 'Desconocido';

    // Datos base para el gráfico
    var data = [{
        id: '0.0',
        parent: '',
        name: razonSocial
    }, {
        id: '1.1',
        parent: '0.0',
        name: 'Expendios'
    }, {
        id: '1.2',
        parent: '0.0',
        name: 'Solicitudes'
    }];

    // Función para ayudar a agrupar los datos
    function chunkArray(myArray, chunk_size) {
        var index = 0;
        var arrayLength = myArray.length;
        var tempArray = [];

        for (index = 0; index < arrayLength; index += chunk_size) {
            tempArray.push(myArray.slice(index, index + chunk_size));
        }

        return tempArray;
    }

    // Agrupa los permisos y solicitudes en grupos de 10 (o el número que elijas)
    var groupedPermisos = chunkArray(permisos, 20);
    var groupedSolicitudes = chunkArray(solicitudes, 10);

    // Ahora, para cada grupo, agregamos una entrada en los datos y luego cada permiso o solicitud individual dentro de ese grupo
    groupedPermisos.forEach((group, gIndex) => {
        var groupId = `2.${gIndex}`;
        data.push({
            id: groupId,
            parent: '1.1',
            name: `Grupo ${gIndex + 1}`
        });

        group.forEach((p, pIndex) => {
            data.push({
                id: `${groupId}.${pIndex}`,
                parent: groupId,
                name: p.numeroPermiso || "Desconocido"
            });
        });
    });

    groupedSolicitudes.forEach((group, gIndex) => {
        var groupId = `3.${gIndex}`;
        data.push({
            id: groupId,
            parent: '1.2',
            name: `Grupo ${gIndex + 1}`
        });

        group.forEach((s, sIndex) => {
            data.push({
                id: `${groupId}.${sIndex}`,
                parent: groupId,
                name: s.turno_sol || "Desconocido",
                lat: s.xGeo_sol,
                lon: s.yGeo_sol
            });
        });
    });


    Highcharts.chart('burbuja_container', {
        chart: {
            backgroundColor: '#efefee' // Aquí es donde se establece el color de fondo del gráfico.
        },
        title: {
            text: 'Visualización de Permisos y Solicitudes'
        },
        series: [{
            type: 'treegraph',

            data: data,
            tooltip: {
                pointFormat: '{point.name}'
            },
            marker: {
                symbol: 'circle',
                radius: 6,
                fillColor: '#ffffff',
                lineWidth: 3
            },

            dataLabels: {
                align: 'left',
                format: '{point.name}',
                style: {
                    color: '#000000',
                    textOutline: '3px #ffffff',
                    whiteSpace: 'nowrap'
                },
                x: 24,
                crop: false,
                overflow: 'none'
            },

            point: {
                events: {
                    click: function () {
                        // Verificamos si el punto clickeado es hijo de un grupo de permisos
                        if (this.parent && this.parent.startsWith('2.')) {
                            var url = '/Indicadores/DetalleExpendio?NumeroPermiso=' + this.name;
                            window.open(url, '_blank');
                        }
                        // Verificamos si el punto clickeado es hijo de un grupo de solicitudes
                        else if (this.parent && this.parent.startsWith('3.')) {
                            var lat = this.lat;
                            var lon = this.lon;
                            var streetViewURL = 'http://maps.google.com/maps?q=&layer=c&cbll=' + lat + ',' + lon + '&cbp=11,0,0,0,0';
                            window.open(streetViewURL, '_blank');
                        }
                    }
                }
            },



            levels: [{
                level: 1,
                levelIsConstant: false
            },
            {
                level: 2,
                colorByPoint: true
            },
            {
                level: 3,
                colorVariation: {
                    key: 'brightness',
                    to: -0.5
                }
            },
            {
                level: 4,
                colorVariation: {
                    key: 'brightness',
                    to: 0.5
                }
            }
            ]
        }]
    });

    window.addEventListener('resize', function () {
        var chart = Highcharts.charts[0]; // Asume que es tu primer gráfico en la página
        var width = document.getElementById('burbuja_container').offsetWidth;
        var height = document.getElementById('burbuja_container').offsetHeight;
        chart.setSize(width, height, false);
    });


</script>
