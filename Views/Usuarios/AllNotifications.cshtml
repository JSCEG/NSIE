@model IEnumerable<NSIE.Models.Notificacion>
@using Microsoft.AspNetCore.Http
@using Newtonsoft.Json
@using NSIE.Models
@inject IHttpContextAccessor HttpContextAccessor

@{
    ViewData["Title"] = "Todas las Notificaciones";
}

<div class="text-center">
    <h4 class="cp-section cp-grouping-section">
        <img src="~/img/notificaciones.png" alt="Icono personalizado" class="iconomenu">
        @ViewData["Title"]
    </h4>
</div>

<!-- Miga de Pan -->
<nav style="--bs-breadcrumb-divider: url(&#34;data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='8' height='8'%3E%3Cpath d='M2.5 0L1 1.5 3.5 4 1 6.5 2.5 8l4-4-4-4z' fill='currentColor'/%3E%3C/svg%3E&#34;);"
    aria-label="breadcrumb" style="padding-left:15px">
    <ol class="breadcrumb lp-5">
        <li class="breadcrumb-item"><a href="@Url.Action("Index", "Home")">Inicio</a></li>
        <li class="breadcrumb-item active" aria-current="page">@ViewData["Title"]</li>
    </ol>
</nav>

<div class="container ps-5 pe-5">
    <div id="notifications-container" class="row">
        <!-- Aquí se mostrarán las notificaciones -->
    </div>
    <div class="pagination-buttons mt-3 text-center">
        <button id="prev-page" class="btn btn-secondary">Página anterior</button>
        <button id="next-page" class="btn btn-secondary">Página siguiente</button>
    </div>
    <br>
    <a href="@Url.Action("Index", "Home")" class="btn btn-primary">Volver</a>
</div>

@section Scripts {
    <script>
        var notifications = @Json.Serialize(Model); // Convertir el modelo de notificaciones a JSON

        var currentPage = 1;
        var notificationsPerPage = 9; // Cambiado para ajustar a las tarjetas

        // Función para limitar el tamaño del mensaje
        function truncateMessage(message, limit) {
            if (message.length > limit) {
                return message.substring(0, limit) + '...';
            }
            return message;
        }

        // Función para mostrar las notificaciones en la página actual
        function displayNotifications(page) {
            var startIndex = (page - 1) * notificationsPerPage;
            var endIndex = startIndex + notificationsPerPage;
            var notificationsToShow = notifications.slice(startIndex, endIndex);

            var notificationsContainer = document.getElementById('notifications-container');
            notificationsContainer.innerHTML = ''; // Limpiar el contenedor

            notificationsToShow.forEach(function(notification) {
                var buttonClass = notification.visto ? 'btn-secondary' : 'btn-primary';
                var borderClass = notification.visto ? '' : 'border-primary';
                var truncatedMessage = truncateMessage(notification.mensaje, 150); // Limitar el mensaje a 50 caracteres

                var notificationItem = '<div class="col-md-4 mb-3">' +
                    '<div class="card card-custom ' + borderClass + '">' +
                    '<img src="' + notification.imagen + '" class="card-img-top" alt="Imagen de notificación">' +
                    '<div class="card-body">' +
                    '<h5 class="subtitulo">' + notification.titulo_Notificacion + '</h5>' +
                    '<div class="alert alert-light fade show" role="alert">' +
                    '<p class="card-text text-justify">' + truncatedMessage + '</p>' +
                    '</div>' +
                    '<p class="card-text"><small class="text-muted">Fecha: ' + notification.fecha_Notificacion + '</small></p>' +
                    '<p class="card-text"><small class="text-muted">Visto: ' + (notification.visto ? 'Sí' : 'No') + '</small></p>' +
                    '<a href="@Url.Action("NotificationDetails", "Usuarios")?titulo=' + encodeURIComponent(notification.titulo_Notificacion) +
                    '&mensaje=' + encodeURIComponent(notification.mensaje) +
                    '&fecha=' + encodeURIComponent(notification.fecha_Notificacion) +
                    '&link=' + encodeURIComponent(notification.link) +
                    '" onclick="markAsRead(' + notification.id + ', this); return false;" class="btn ' + buttonClass + '">Ver Detalles</a>' +
                    '</div>' +
                    '</div>' +
                    '</div>';
                notificationsContainer.innerHTML += notificationItem;
            });

            updatePaginationButtons();
        }

        // Función para actualizar la visibilidad de los botones de paginación
        function updatePaginationButtons() {
            var totalPages = Math.ceil(notifications.length / notificationsPerPage);
            document.getElementById('prev-page').style.display = currentPage === 1 ? 'none' : 'inline-block';
            document.getElementById('next-page').style.display = currentPage === totalPages ? 'none' : 'inline-block';
        }

        // Mostrar las notificaciones en la página 1 al cargar la página
        displayNotifications(currentPage);

        // Manejar el evento de hacer clic en el botón "Página anterior"
        document.getElementById('prev-page').addEventListener('click', function() {
            if (currentPage > 1) {
                currentPage--;
                displayNotifications(currentPage);
                window.scrollTo(0, 0); // Desplazar hacia la parte superior de la página
            }
        });

        // Manejar el evento de hacer clic en el botón "Página siguiente"
        document.getElementById('next-page').addEventListener('click', function() {
            var totalPages = Math.ceil(notifications.length / notificationsPerPage);
            if (currentPage < totalPages) {
                currentPage++;
                displayNotifications(currentPage);
                window.scrollTo(0, 0); // Desplazar hacia la parte superior de la página
            }
        });

        function markAsRead(notificationId, linkElement) {
            $.ajax({
                url: '@Url.Action("MarkNotificationAsRead", "Usuarios")',
                type: 'POST',
                data: { notificationId: notificationId },
                success: function (response) {
                    if (response.success) {
                        var notificationItem = $(linkElement).closest('.card');
                        notificationItem.removeClass('border-primary');

                        // Cambiar el estilo del botón a gris claro
                        $(linkElement).removeClass('btn-primary').addClass('btn-secondary');

                        var notificationBadge = $('#notification-count');
                        var currentCount = parseInt(notificationBadge.text());
                        var newCount = currentCount - 1;

                        if (newCount > 0) {
                            notificationBadge.text(newCount);
                        } else {
                            notificationBadge.addClass('hidden');
                        }

                        // Redirigir a la nueva página después de marcar como leída
                        var url = $(linkElement).attr('href');
                        window.open(url, '_blank');
                    } else {
                        console.error("Error al marcar la notificación como leída.");
                    }
                },
                error: function (xhr, status, error) {
                    console.error("Error al marcar la notificación como leída:", error);
                }
            });
        }
    </script>
}
