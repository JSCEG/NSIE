@using Microsoft.AspNetCore.Http
@using Newtonsoft.Json
@using NSIE.Models
@inject IHttpContextAccessor HttpContextAccessor

@{
    var httpContext = HttpContextAccessor.HttpContext;
    var perfilUsuarioJson = httpContext.Session.GetString("PerfilUsuario");
    var perfilUsuario = JsonConvert.DeserializeObject<PerfilUsuario>(perfilUsuarioJson);

    // Utilizar los datos del usuario para personalizar la vista
    ViewData["NombreUsuario"] = perfilUsuario.Nombre;
    ViewData["RolUsuario"] = perfilUsuario.Rol;
    ViewData["MercadoUsuario"] = perfilUsuario.Mercado_ID;
}

@{
    ViewData["Title"] = "Flujo Físico de la Energía del Sistema Energético Mexicano";
}
@{
    var header = new HeaderViewModel
    {
        Title = "Flujo Físico de la Energía del Sistema Energético Mexicano",
        IconPath = "sankey.png",
        Description = "Visualiza cómo fluye la energía a través de las distintas fuentes y sectores del país con base en información oficial.",
        Section = "Balance Nacional de Energía",
        ModuleInfo = JsonConvert.SerializeObject(new
        {
            title = "Flujo Físico de la Energía",
            description = "Este módulo permite analizar la distribución de energía desde su origen hasta su uso final, a través de un diagrama Sankey interactivo.",
            functionality = "Consulta interactiva y visual del flujo energético nacional.",
            stage = "Análisis de Datos",
            roles = new[] {
                new { icon = "chart-line", text = "Secretaría de Energía: Seguimiento y planificación energética" },
                new { icon = "database", text = "Unidad SNIEr: Visualización y validación de datos energéticos" },
                new { icon = "user-cog", text = "CRE y CNH: Control regulatorio de flujos" },
                new { icon = "eye", text = "Consulta Pública: Transparencia energética" }
            },
            order = new { step = 2, description = "Análisis y visualización conforme a la Ley de Transición Energética" }
        }),
        LegalDescription = "Basado en los Lineamientos del SNIEr y la Ley de Transición Energética para garantizar el monitoreo del flujo energético.",
        Fundamentos = new List<FundamentoLegal> {
            new() { Reference = "Art. 70 Reglamento SNIEr", Description = "Establece la obligación de registrar y visualizar flujos energéticos" },
            new() { Reference = "Ley de Transición Energética", Description = "Obliga a reportar y dar seguimiento a la eficiencia y trazabilidad energética" },
            new() { Reference = "Artículo 33 LIE", Description = "Define la segmentación y reporte de usos de energía" }
        }
    };
}

@await Html.PartialAsync("_ViewHeader", header)

@* 
<div class="text-center">
    <h3 class="cp-section cp-grouping-section"> <img src="@Cdn.Url/img_snier/vistas/sankey.png" alt="Icono personalizado" class="iconomenu">@ViewData["Title"]</h3>
</div>
<!-- Miga de Pan -->
<nav style="--bs-breadcrumb-divider: url(&#34;data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='8' height='8'%3E%3Cpath d='M2.5 0L1 1.5 3.5 4 1 6.5 2.5 8l4-4-4-4z' fill='currentColor'/%3E%3C/svg%3E&#34;);" aria-label="breadcrumb" style="padding-left:15px">
    <ol class="breadcrumb lp-5">
        <li class="breadcrumb-item"><a href="@Url.Action("Index", "Home" )">Inicio</a></li>
        <li class="breadcrumb-item active" aria-current="page">@ViewData["Title"]</li>
    </ol>
</nav> *@


    <div class="row">
        <div class="col-12">
            <h2 class="fw-bold subtitulo">Seleccione un Año:</h2>
        </div>
    </div>


    <br>
    <br>
    <!-- Mensaje de alerta -->
    <div class="row">
        <div class="col-12">
            <div id="message" class="alert alert-warning d-none" role="alert">
                <!-- Mensaje aquí -->
            </div>
        </div>
    </div>

        <div class="col-3 ">
            <button id="btnPantallaCompleta" class="btn btn-cre-rojo">Ver en Pantalla Completa</button>
        </div>
<div id="flujoPantallaCompleta" class="pt-3">
     <!-- Selector de año y botón -->
    <div class="row">
        <div class="col-6 "> 
            <select id="year" class="form-select">
                @foreach (var year in ViewBag.Years)
                {
                    <option value="@year">@year</option>
                }
            </select>
        </div>

        <div class="col-6 ">
            <button id="btnEjecutar" class="btn btn-primary w-100">Consulta</button>
        </div>
    </div>


        <!-- Gráfico SVG -->
    <div style="overflow-x:auto;"> 
        
        <div class="map-container_sankey"> 


            <div class="container-fluid">
                <div class="row mt-3">
                    <div class="col-12">
                        <div style="overflow-x:auto; display:flex; justify-content:center; align-items:center; position: relative; z-index: 2;">
                            <svg width="100%" height="1300px" id="sankeySvg">
                                <g id="particlesGroup"></g>
                                <!-- Otros elementos del gráfico Sankey -->
                            </svg>
                        </div>
                    </div>
                </div>

                <div class="row mt-3" style="position: relative;">
                    <!-- Gráfica original y controles -->
                    <div class="col-md-6" style="position: relative;">
                        <br>
                        <br>
                        <div id="highchartsContainer" style="width: 100%; max-height: 400px; margin: 0 auto; display: none; position: relative; z-index: 1;">
                            <!-- Aquí se insertará el gráfico de Highcharts -->
                        </div>
                        <div class="d-flex justify-content-center align-items-center">
                            <button id="playButton" class="btn btn-primary" style="display: none; background-color: #1CA0F8; color: white; font-size: 15px; width: 63px; height: 40px; line-height: 1;">▶️</button>
                            <input type="range" id="yearSlider" class="ml-3" style="width: 80%; display: none; background-color: #1CA0F8; color: white; border: 1px solid #1CA0F8;">
                            <style>

                                /* Establece el color de fondo del contenedor y otros elementos */
                                #highchartsContainer,
                                #newChartContainer {
                                    background-color: #adb5bd; /* white */  /* Cambia a tu color preferido */
                                }
                                /* Establece el color de fondo del slider */
                                input[type="range"] {
                                    background-color: #1CA0F8;
                                    color: white;
                                    border: 1px solid #1CA0F8;
                                }

                                /* Oculta el estilo predeterminado del rango en algunos navegadores */
                                input[type="range"]::-webkit-slider-thumb {
                                    background-color: #1CA0F8;
                                    color: white;
                                }
                            </style>
                        </div>
                    </div>

                    <!-- Nueva gráfica -->
                    <div class="col-md-6" style="position: relative;">
                        <br>
                        <br>
                        <div id="newChartContainer" style="width: 100%; max-height: 400px; margin: 0 auto; position: relative; z-index: 1; height: 400px; display:none;">
                            <!-- Inserta tu nueva gráfica aquí -->
                        </div>
                        <div style="position: absolute; top: -5px; right: 12px;">
                            <button id="regresarSankeyButton" class="btn btn-danger" style="display: none; background-color: #B41503; color: white; font-size: 15px; width: 80px; height: 40px; line-height: 1;">Ocultar</button>
                        </div>
                    </div>
                </div>
            </div>
        </div> 
    </div> 

</div>




<script>
    document.addEventListener("DOMContentLoaded", function () {
//Arrastre derl SVG
    let isDragging = false;
    let originalX;

    const svg = document.getElementById('sankeySvg');

    svg.addEventListener('mousedown', function(e) {
        isDragging = true;
        originalX = e.clientX;
    });

    document.addEventListener('mousemove', function(e) {
        if (isDragging) {
            const deltaX = e.clientX - originalX;
            const newTransform = `translate(${deltaX}px, 0px)`;
            svg.style.transform = newTransform;
        }
    });

    document.addEventListener('mouseup', function() {
        isDragging = false;
    });

//Para pantalla Completa
function togglePantallaCompleta() {
    var elem = document.getElementById("flujoPantallaCompleta");

    if (!document.fullscreenElement) {
        if (elem.requestFullscreen) {
            elem.requestFullscreen();
        } else if (elem.mozRequestFullScreen) { /* Firefox */
            elem.mozRequestFullScreen();
        } else if (elem.webkitRequestFullscreen) { /* Chrome, Safari y Opera */
            elem.webkitRequestFullscreen();
        } else if (elem.msRequestFullscreen) { /* IE/Edge */
            elem.msRequestFullscreen();
        }
    } else {
        if (document.exitFullscreen) {
            document.exitFullscreen();
        } else if (document.mozCancelFullScreen) { /* Firefox */
            document.mozCancelFullScreen();
        } else if (document.webkitExitFullscreen) { /* Chrome, Safari y Opera */
            document.webkitExitFullscreen();
        } else if (document.msExitFullscreen) { /* IE/Edge */
            document.msExitFullscreen();
        }
    }
}
document.getElementById("btnPantallaCompleta").addEventListener("click", togglePantallaCompleta);

//Fin Para pantalla Completa


        //Mensaje
        var messageDiv = document.getElementById('message');
$(document).ready(function () {

        //svgContainer.innerHTML = '';
                var yearSelect = $('#year').val();
                var dataToSend = { yearSelect: yearSelect };



                let nodes = [];
                let enlaces = [];

                let nodesNodo = [];
                let nodesSector = [];
                let nodesTransformacion = [];
                let nodesTipos = [];
                let nodesUso = [];

                let nodesPrueba = [];
                let enlacesPrueba = [];


                function consultaSankey(){
                        return new Promise((resolve, reject) => {
                            $.ajax({ 
                                url: '/Sankey/consulta_Sankey',
                                type: 'POST',
                                data: JSON.stringify(dataToSend),
                                contentType: 'application/json',
                                success: function (response) {
                                    // Manejo de la respuesta
                                    console.log("Estructura Sankey", response);
                                    resolve(response);
                                },
                                error: function (error) {
                                    // Manejo del error
                                    reject(error);
                                }
                            });
                        });
                }
                
                function obtieneNodosCaja() {
                    return new Promise((resolve, reject) => {
                    $.ajax({
                        url: '/Sankey/nodoscaja',
                        type: 'GET',
                        contentType: 'application/json',
                        success: function (response) {
                            console.log("Estructura NodosCajaSankey", response);
                            // Puedes descomentar la siguiente línea si es necesario
                            // document.getElementById('sankeySvg').innerHTML = '';

                            let yextra = 0;
                            response.forEach((data) => {
                                const { id, x, y, nombre, width, height } = data;
                                const color = getColorFromNombre(nombre);

                                const newData = { ...data };

                                if(id === "Retroalimentación"){
                                    newData.yfinal = y + 395;
                                    newData.xfinal = x + 260;
                                } else if(id === "nodoUsosFinales"){
                                    newData.yfinal = y;
                                    newData.xfinal = x + 410;
                                } else{
                                    newData.yfinal = y;
                                    newData.xfinal = x;
                                }

                                const{
                                    yfinal,
                                    xfinal
                                } = newData;
                                const imgcapa = "/img/co2.png";

                                
                                // Crea una nueva instancia de WrapperNode y la retorna
                                const nuevoNodo = new WrapperNode(id, xfinal, yfinal, nombre, color, width, height, imgcapa, nodes, enlaces);

                                nodes = nodes.concat(nuevoNodo);

                            });


                            resolve(response);


                        },
                        error: function (error) {
                            // Manejo del error
                            console.error("Error al obtener nodos de caja: ", error);
                            reject(error);
                        }
                    });
                    });
                }

                //Nodos Caja
                
                   

                //Nodos
                function nodos(){
                    return new Promise((resolve, reject) => {
                    $.ajax({
                        url: '/Sankey/obtieneNodos',
                        type: 'POST',
                        data: JSON.stringify(dataToSend),
                        contentType: 'application/json',
                        success: function (response) {

                            // Manejo de la respuesta
                            console.log("Estructura BD", response);
                            // Asegúrate de que el contenedor SVG esté vacío antes de añadir nuevos elementos



                            
                            document.getElementById('sankeySvg');




                            let contador = 0;
                            let contadorTotal = 0;
                            let contadorImp = 0;
                            let contadorExp = 0;
                            let valoress = [];
                            let nombress = [];
                            let id = [];
                            let valorfep = [];
                            let feP_ID2 = 100;
                            let valor2 = 0;
                            let valor_importaciones2 = 0;
                            let valor_exportaciones2 = 0;
                            //let idejemplo = 100;
                            //const nodoA;

                            response.forEach((data) => {
                                const {
                                    feP_ID, 
                                    x, 
                                    y, 
                                    feP_Nombre_sin_espacios,
                                    valor, 
                                    width, 
                                    height, 
                                    infoDataImp, 
                                    infoDataExp, 
                                    valor_importaciones,
                                    valor_exportaciones, 
                                    tooltipPos,
                                    año
                                } = data; 

                                contador = contador + 1;
                                contadorTotal = contadorTotal + data.valor;
                                contadorImp = contadorImp + valor_importaciones;
                                contadorExp = contadorExp + valor_exportaciones;

                                // Crear una copia del objeto original
                                const newData = { ...data };
                                valor2= contadorTotal;
                                valor_importaciones2= contadorImp;
                                valor_exportaciones2 = contadorExp;
                                newData.cont = contador;
                                newData.valorOfertaTotal = 20;
                                id.push(feP_ID);
                                valorfep.push(valor);



                                console.log("Contador: ", newData.cont);
                                console.log("Valor: ", newData.valor2);
                                // Asignar un nuevo valor dinámico a la propiedad nombreNodo en la copia
                                
                                
                                // Destructurar el nuevo objeto con las nuevas propiedades
                                const {
                                    cont,
                                    valorOfertaTotal
                                } = newData; 

                                const imagen_sin_espacios = getImageFromNombre(feP_Nombre_sin_espacios);
                                const color = getColorFromNombre(feP_Nombre_sin_espacios); // Asume que tienes esta función definida 
                                // Crea una nueva instancia de Nodo y la añade al SVG
                                const nuevoNodo = new Nodo(
                                    feP_ID, 
                                    x, 
                                    y, 
                                    feP_Nombre_sin_espacios,
                                    valor,
                                    color,
                                    imagen_sin_espacios,
                                    width, 
                                    height, 
                                    infoDataImp, 
                                    infoDataExp, 
                                    valor_importaciones,
                                    valor_exportaciones, 
                                    tooltipPos,
                                    cont,
                                    año,
                                    nodes,
                                    enlaces,
                                );

                                // Verificar si el nodo ya existe en nodes antes de agregarlo
                                //const existeEnNodes = nodesPrueba.some((existingNode) => existingNode.feP_ID === nuevoNodo4.feP_ID);

                                //if (!existeEnNodes) {
                                    // Agregar el nuevo nodo a nodes
                                    nodes = nodes.concat(nuevoNodo);
                                    nodesNodo.push(nuevoNodo);
                                //}    
                                
                                //const nodoA = new Nodo(/* parámetros para Nodo */);      
                            });

                            const nuevoNodoTotal = new NodoTotal(
                                feP_ID2,
                                valor2,
                                valor_importaciones2,
                                valor_exportaciones2,
                                contador,
                                nodes,
                                enlaces
                            );
                                nodes = nodes.concat(nuevoNodoTotal);
                                nodesNodo.push(nuevoNodoTotal);

                            console.log("Nodos:", nodes);

                            for (let z=0; z<=11; z++){
                                const sourceNode = nodesNodo.find((nodo) => nodo.id === id[z]);
                                const targetNode = nodesNodo.find((nodo) => nodo.id === feP_ID2);
                                const backgroundColor = coloresEnergia["FondoNodo"];
                                let pcolors = [];

                                if(z === 0){
                                    pcolors = ["BagazoCana"];
                                } else if(z === 1){
                                    pcolors = ["Biogas"];
                                } else if(z === 2){
                                    pcolors = ["Carbon"];
                                } else if(z === 3){
                                    pcolors = ["Condensados"];
                                } else if(z === 4){
                                    pcolors = ["EnergiaEolica"];
                                } else if(z === 5){
                                    pcolors = ["EnergiaSolar"];
                                } else if(z === 6){
                                    pcolors = ["GasNatural"];
                                } else if(z === 7){
                                    pcolors = ["Geotermia"];
                                } else if(z === 8){
                                    pcolors = ["EnergiaHidrica"];
                                } else if(z === 9){
                                    pcolors = ["Lena"];
                                } else if(z === 10){
                                    pcolors = ["Nucleoenergia"];
                                } else{
                                    pcolors = ["Petroleo"];
                                }

                                const particleColors = pcolors.map(key => coloresEnergia[key]);

                                console.log("Valor colores:", particleColors);
                                const widthlinks = 5;
                                const value = valorfep[z];
                                const curve = 0;
                                const type = "normal";
                                const links = new Link(
                                    sourceNode,
                                    targetNode,
                                    widthlinks,
                                    backgroundColor,
                                    value,
                                    curve,
                                    particleColors,
                                    type
                                );
                                

                                enlaces = enlaces.concat(links);
                            }

                            // Aplicar el evento de clic a todos los nodos en el array
                            nodes.forEach((nodo) => {
                                nodo.addEventListeners(nodes, enlaces);
                            });

                            resolve(response);
                        },
                        error: function (error) {
                            console.error('Error al obtener nodos Sankey:', error);
                            reject(error);
                        }
                    });
                    });
                }

                function sector(){
                    //Nodos Sectores
                    return new Promise((resolve, reject) => {
                    $.ajax({
                        url: '/Sankey/nodossectores',
                        type: 'POST',
                        data: JSON.stringify(dataToSend),
                        contentType: 'application/json',
                        success: function (response) {

                            // Manejo de la respuesta
                            console.log("Estructura Sectores", response);
                            // Asegúrate de que el contenedor SVG esté vacío antes de añadir nuevos elementos


                            let contador = 0;
                            let contadorPet = 0;
                            let contnom = [];
                            let contval = [];
                            let z = 0;
                            let l = 0;
                            let contadorEl = 0;
                            let contadorCoqnom;
                            let contadorRefnom;
                            let contadorRef = 0;
                            let contadorCoq = 0;
                            let contadorCombus = 0;
                            let contadorPlantnom;
                            let contadorPlant = 0;
                            let yvalue = [];
                            let idvalue = [];
                            let nomvalue = [];
                            let imagenes = [];


                            response.forEach((data) => {
                                const {
                                    sectorID, 
                                    sector_Nombre_SE, 
                                    tipo_SE, 
                                    valor
                                } = data; 

                            
                                
                                
                                if(tipo_SE === "Sector petróleo y gas"){
                                    contadorPet = contadorPet + valor;
                                    if(sector_Nombre_SE === "Otros productos , no definidos (idustria carbón y bagazo de caña) y otras ramas"){
                                        contnom.push("Otros productos");
                                    }
                                    else{
                                        contnom.push(sector_Nombre_SE);
                                    }
                                    contval.push(valor);
                                }
                                else{
                                    contadorEl = contadorEl + valor;
                                    contnom.push(sector_Nombre_SE);
                                    contval.push(valor);
                                }

                                if(sector_Nombre_SE === "Coquizadoras"){
                                    contadorCoqnom = sector_Nombre_SE;
                                    contadorCoq = valor;
                                    contadorCombus = contadorCombus + valor;
                                }
                                if(sector_Nombre_SE === "Refinerias y despuntadoras"){
                                    contadorRefnom = sector_Nombre_SE;
                                    contadorRef = valor;
                                    contadorCombus = contadorCombus + valor;
                                }
                                if(sector_Nombre_SE === "Plantas de gas y fraccionadoras"){
                                    contadorPlantnom = sector_Nombre_SE;
                                    contadorPlant = valor;
                                }

                                contador = contador + 1;

                                const newData = { ...data };
                                newData.idnuevo = sectorID + 220
                                newData.cont = contador;
                                newData.pet = contadorPet;
                                newData.el = contadorEl;
                                newData.tam = z;
                                newData.tam2 = l;


                            
                                
                                // Destructurar el nuevo objeto con las nuevas propiedades
                    
                                const{
                                    idnuevo,
                                    cont,
                                    pet,
                                    el,
                                    tam,
                                    tam2
                                } = newData;


                                const color = getColorFromNombre(tipo_SE); // Asume que tienes esta función definida 
                            });

                            for(let i=0; i<=1; i++){

                                if(i === 0){
                                    idvalue[i] = 200;
                                    yvalue[i] = 330;
                                    nomvalue[i] = "Sector petróleo y gas"
                                    imagenes [i] = "/img/s_petroliferos.png";
                                } else{
                                    idvalue[i] = 210;
                                    yvalue[i] = 620;
                                    nomvalue[i] = "Sector eléctrico"
                                    imagenes [i] = "/img/electricidadi.png";
                                }


                                const nuevoNodoTooltip = new SectorTooltip(
                                    idvalue[i],
                                    nomvalue[i],
                                    yvalue[i],
                                    imagenes[i],
                                    contadorPet,
                                    contadorEl,
                                    contnom,
                                    contval,
                                    nodes,
                                    enlaces
                                );

                                
                                //nodes = nodes.concat(nuevoNodoTooltip);
                                nodes = nodes.concat(nuevoNodoTooltip);
                                nodesSector.push(nuevoNodoTooltip);
                                
                                const sourceNode = nodesNodo.find((nodo) => nodo.id === 100);
                                const targetNode = nodesSector.find((nodo) => nodo.id === idvalue[i]);
                                //const targetNode2 = nodes.find((nodo)=> nodo.id2 === 210);
                                const backgroundColor = coloresEnergia["FondoNodo"];
                                let pcolors = [];
                                let vl = 0;
                                
                                if(i === 0){
                                    pcolors = ["Carbon", "Condensados", "GasNatural", "Petroleo"];
                                    vl = contadorPet;
                                } else{
                                    pcolors = ["Nucleoenergia", "BagazoCana", "Biogas", "EnergiaEolica", "EnergiaSolar", "Geotermia", "EnergiaHidrica", "Lena"];
                                    vl = contadorEl;
                                } 

                                const particleColors = pcolors.map(key => coloresEnergia[key]);
                                //const particleColors2 = coloresEnergia["Condensados", "Carbon", "GasNatural", "EnergiaHidrica", "EnergiaSolar", "EnergiaEolica", "Geotermia", "Biogas", "Lena"];
                                const widthlinks = 5;
                                const value = vl;
                                //const value2 = contadorEl;
                                const curve = 0;
                                const type = "normal";
                                const links = new Link(
                                    sourceNode,
                                    targetNode,
                                    widthlinks,
                                    backgroundColor,
                                    value,
                                    curve,
                                    particleColors,
                                    type
                                );

                                //svgElement.appendChild(links);

                                enlaces = enlaces.concat(links); 
                            }
                            
                            let idn = [];
                            let yn = [];
                            let nombren = [];
    
                            for(let z=0; z<=2; z++){
                                if(z === 0){
                                    idn[z] = 300;
                                    yn[z] = 280;
                                    nombren[z] = "Combustible";
                                } else if (z === 1){
                                    idn[z] = 301;
                                    yn[z] = 420;
                                    nombren[z] = "Calor";
                                } else {
                                    idn[z] = 302;
                                    yn[z] = 640;
                                    nombren[z] = "Electricidad";
                                }
                                const nuevoNodoProvision = new NodoProvisionyProduccion(
                                    idn[z],
                                    yn[z],
                                    nombren[z],
                                    contadorCombus,
                                    contadorCoq,
                                    contadorRef,
                                    contadorCoqnom,
                                    contadorRefnom,
                                    contadorPlant,
                                    contadorPlantnom,
                                    contadorEl,
                                    nodes,
                                    enlaces,
                                );
                                // Agregar el nuevo nodo a nodes
                                nodes = nodes.concat(nuevoNodoProvision);
                                nodesSector.push(nuevoNodoProvision);
                                let srce;

                                if(z === 0){
                                    srce = nodesSector.find((nodo) => nodo.id === idvalue[0]);
                                } else if (z === 1){
                                    srce = nodesSector.find((nodo) => nodo.id === idvalue[0]);
                                } else {
                                    srce = nodesSector.find((nodo) => nodo.id === idvalue[1]);
                                }
                                const sourceNodeB = srce;
                                const targetNodeB = nodesSector.find((nodo) => nodo.id === idn[z]);

                                //const targetNode2 = nodes.find((nodo)=> nodo.id2 === 210);
                                const backgroundColorB = coloresEnergia["FondoNodo"];
                                let pcolors = [];
                                let vl = 0;
                                
                                if(z === 0){
                                    pcolors = ["Carbon", "Condensados", "GasNatural", "Petroleo"];
                                    vl = contadorCombus;
                                } else if (z === 1){
                                    pcolors = ["Carbon", "Condensados", "GasNatural", "Petroleo"];
                                    vl = contadorPlant;
                                } else{
                                    pcolors = ["Nucleoenergia", "BagazoCana", "Biogas", "EnergiaEolica", "EnergiaSolar", "Geotermia", "EnergiaHidrica", "Lena"];
                                    vl = contadorEl;
                                }

                                const particleColorsB = pcolors.map(key => coloresEnergia[key]);
                                //const particleColors2 = coloresEnergia["Condensados", "Carbon", "GasNatural", "EnergiaHidrica", "EnergiaSolar", "EnergiaEolica", "Geotermia", "Biogas", "Lena"];
                                const widthlinksB = 5;
                                const valueB = vl;
                                //const value2 = contadorEl;
                                const curveB = 0;
                                const typeB = "normal";
                                const linksB = new Link(
                                    sourceNodeB,
                                    targetNodeB,
                                    widthlinksB,
                                    backgroundColorB,
                                    valueB,
                                    curveB,
                                    particleColorsB,
                                    typeB
                                );

                                enlaces = enlaces.concat(linksB);   
                            }   

                             // Aplicar el evento de clic a todos los nodos en el array
                            nodes.forEach((nodo) => {
                                nodo.addEventListeners(nodes, enlaces);
                            }); 


                            resolve(response);
                            
                        },
                        error: function (error) {
                            console.error('Error al obtener nodos Sankey:', error);
                            reject(error);
                        }
                    });
                    });
                }

                function transformaciones(){
                    //Nodos Transformaciones
                    return new Promise((resolve, reject) => {
                    $.ajax({
                        url: '/Sankey/nodostransformaciones',
                        type: 'POST',
                        data: JSON.stringify(dataToSend),
                        contentType: 'application/json',
                        success: function (response) {

                            // Manejo de la respuesta
                            console.log("Estructura Transformaciones", response);
                            // Asegúrate de que el contenedor SVG esté vacío antes de añadir nuevos elementos

                            let yvalue = 30;
                            let cont = 70;
                            let yvalue2 = 120;
                            let contPetro = 0;
                            let contCent = 0;
                            let petro;
                            let cent;
                            let contador = 0;
                            let idsum = [];
                            let idtot = [];
                            let ytot = [];
                            let capa = 0;
                            let capacont = 0;

                            response.forEach((data) => {
                                const {
                                    transformacionID, 
                                    transformacion_Nombre_SE, 
                                    tipo, 
                                    valor
                                } = data; 

                                const newData = { ...data };

                                //Capa extra
                                if (capacont === 0){
                                    for(let f=0; f<=2; f++){
                                        //const { id, x, y, nombre, width, height } = data;

                                        let contid;
                                        let conty;
                                        let contheight;
                                        let contimg;

                                        if(f === 0){
                                            contid = "Transformacion1";
                                            conty = 310;
                                            contheight = 355;
                                            contimg = "/img/co2.png";
                                        } else if(f === 1){
                                            contid = "Transformacion2";
                                            conty = 670;
                                            contheight = 420;
                                            contimg = "/img/rr4.png";
                                        } else{
                                            contid = "Transformacion3";
                                            conty = 60;
                                            contheight = 206;
                                            contimg = "/img/co2.png";
                                        }

                                        const idCapa = contid;
                                        const xCapa = 770;
                                        const yCapa = conty;
                                        const nombreCapa = "Transformación";
                                        const colorCapa = getColorFromNombre(nombreCapa);
                                        const widthCapa = 150;
                                        const heightCapa = contheight;
                                        const imgcapa = contimg;
                                        
                                        // Crea una nueva instancia de WrapperNode y la retorna
                                        const nuevoCapa = new WrapperNode(idCapa, xCapa, yCapa, nombreCapa, colorCapa, widthCapa, heightCapa, imgcapa, nodes, enlaces);

                                        nodes = nodes.concat(nuevoCapa);
                                    }
                                }
                                capacont = 1;

                                //Fin de capa extra
                                

                                if(tipo === "Petróleo y gas"){
                                    yvalue = yvalue + cont;
                                    contPetro = contPetro + valor;
                                    petro = tipo;
                                    console.log("valor de y:", yvalue);

                                }
                                else {
                                    yvalue = yvalue + yvalue2;
                                    contCent = contCent + valor;
                                    yvalue2 = 70;
                                    cent = tipo;
                                    console.log("valor de y:", yvalue);
                                }
                                
                                newData.y = yvalue;
                                newData.idfinal = transformacionID + 400;

                                
                                // Destructurar el nuevo objeto con las nuevas propiedades
                    
                                const{
                                    y,
                                    idfinal
                                } = newData;


                                const color = getColorFromNombre(transformacion_Nombre_SE); // Asume que tienes esta función definida 
                                //const color2 = getColorFromNombre(feP_Nombre_sin_espacios2); // Asume que tienes esta función definida
                                // Crea una nueva instancia de Nodo y la añade al SVG
                                const nuevoNodoTranformacion = new NodoTransformacion(
                                    idfinal,
                                    transformacion_Nombre_SE,
                                    tipo,
                                    valor,
                                    color,
                                    y,
                                    nodes,
                                    enlaces
                                );

                                idsum[contador] = idfinal;
                                contador = contador + 1;

                                nodes = nodes.concat(nuevoNodoTranformacion);
                                nodesTransformacion.push(nuevoNodoTranformacion);

                                let srce;

                                for(let z=0; z<=1; z++){
                                    if(tipo === "Petróleo y gas" && z === 0){
                                        srce = nodesSector.find((nodo) => nodo.id === 300);
                                    } else if (tipo === "Petróleo y gas" && z === 1){
                                        srce = nodesSector.find((nodo) => nodo.id === 301);
                                    } else{
                                        srce = nodesSector.find((nodo) => nodo.id === 302);
                                        z = 1;
                                    }
                                    const sourceNode = srce;
                                    const targetNode = nodesTransformacion.find((nodo) => nodo.id === idfinal);
                            

                                    //const targetNode2 = nodes.find((nodo)=> nodo.id2 === 210);
                                    const backgroundColor = coloresEnergia["FondoNodo"];
                                    let pcolors = [];
                                    let vl = 0;
                                    
                                    if(tipo === "Petróleo y gas"){
                                        pcolors = ["Carbon", "Condensados", "GasNatural", "Petroleo"];
                                    } else{
                                        pcolors = ["Nucleoenergia", "BagazoCana", "Biogas", "EnergiaEolica", "EnergiaSolar", "Geotermia", "EnergiaHidrica", "Lena"];
                                    }

                                    const particleColors = pcolors.map(key => coloresEnergia[key]);
                                    //const particleColors2 = coloresEnergia["Condensados", "Carbon", "GasNatural", "EnergiaHidrica", "EnergiaSolar", "EnergiaEolica", "Geotermia", "Biogas", "Lena"];
                                    const widthlinks = 5;
                                    const value = valor;
                                    //const value2 = contadorEl;
                                    const curve = 0;
                                    const type = "normal";
                                    const links = new Link(
                                        sourceNode,
                                        targetNode,
                                        widthlinks,
                                        backgroundColor,
                                        value,
                                        curve,
                                        particleColors,
                                        type
                                    );

                                    enlaces = enlaces.concat(links);
                                } 


                            });
                            
                            for(let k=0; k<=1; k++){

                                if(k === 0){
                                    idtot[k] = 500;
                                    ytot[k] = 165;
                                } else {
                                    idtot[k] = 501;
                                    ytot[k] = 705;
                                }

                                const nuevoNodoTransTotal = new NodoTransformacionTotal(
                                idtot[k],
                                ytot[k],
                                contPetro,
                                contCent,
                                petro,
                                cent,
                                nodes,
                                enlaces
                                );
                                // Agregar el nuevo nodo a nodes
                                nodes = nodes.concat(nuevoNodoTransTotal);
                                nodesTransformacion.push(nuevoNodoTransTotal);
                            }

                            let srce;

                            for(let v=0; v<=13; v++){
                                const sourceNode = nodesTransformacion.find((nodo) => nodo.id === idsum[v]);

                                if(v<=2){
                                    srce = nodesTransformacion.find((nodo) => nodo.id === idtot[0]);
                                } else{
                                    srce = nodesTransformacion.find((nodo) => nodo.id === idtot[1]);
                                }

                                const targetNode = srce;
                        

                                //const targetNode2 = nodes.find((nodo)=> nodo.id2 === 210);
                                const backgroundColor = coloresEnergia["FondoNodo"];
                                let pcolors = [];
                                let vl = 0;
                                
                                if(v<=2){
                                    pcolors = ["Carbon", "Condensados", "GasNatural", "Petroleo"];
                                    vl = contPetro;
                                } else{
                                    pcolors = ["Nucleoenergia", "BagazoCana", "Biogas", "EnergiaEolica", "EnergiaSolar", "Geotermia", "EnergiaHidrica", "Lena"];
                                    vl = contCent;
                                }

                                const particleColors = pcolors.map(key => coloresEnergia[key]);
                                //const particleColors2 = coloresEnergia["Condensados", "Carbon", "GasNatural", "EnergiaHidrica", "EnergiaSolar", "EnergiaEolica", "Geotermia", "Biogas", "Lena"];
                                const widthlinks = 5;
                                const value = vl;
                                //const value2 = contadorEl;
                                const curve = 0;
                                const type = "normal";
                                const links = new Link(
                                    sourceNode,
                                    targetNode,
                                    widthlinks,
                                    backgroundColor,
                                    value,
                                    curve,
                                    particleColors,
                                    type
                                );

                                enlaces = enlaces.concat(links);
                            } 

                            nodes.forEach((nodo) => {
                                nodo.addEventListeners(nodes, enlaces);
                            }); 

                            resolve(response);
                        },
                        error: function (error) {
                            console.error('Error al obtener nodos Sankey:', error);
                            reject(error);
                        }
                    });
                    });
                }
                
                function tiposEnergia(){
                    //Nodos Tipos Energia
                    return new Promise((resolve, reject) => {
                    $.ajax({
                        url: '/Sankey/nodostiposenergia',
                        type: 'POST',
                        data: JSON.stringify(dataToSend),
                        contentType: 'application/json',
                        success: function (response) {

                            // Manejo de la respuesta
                            console.log("Estructura Tipos Energía", response);
                            // Asegúrate de que el contenedor SVG esté vacío antes de añadir nuevos elementos

                            let cont = 0;
                            let idv = 600;
                            let yvalues = 0;
                            let xvalores = [];
                            let yvalores = [];
                            let nombrecont = [];
                            let nombrearray = [];
                            let ycont = [];
                            let idcont = [];
                            let idarray = [];
                            let dist = 0;
                            let rnt = 0;
                            let capacont = 0;
                            response.forEach((data) => {
                                const {
                                    cargaPico, 
                                    intermitente, 
                                    cargaBase, 
                                    gasSeco,
                                    gasLP,
                                    petrolíferos
                                } = data;

                                //Capa extra
                                if (capacont === 0){
                                    for(let f=0; f<=3; f++){
                                        //const { id, x, y, nombre, width, height } = data;

                                        let contid;
                                        let conty;
                                        let contheight;
                                        let contx;
                                        let imgimpexp;

                                        if(f === 0){
                                            contid = "Importacion1";
                                            contx = 800;
                                            conty = 310;
                                            contheight = 206;
                                            imgimpexp = "/img/importacion.png";
                                        } else if(f === 1){
                                            contid = "Importacion2";
                                            contx = 800;
                                            conty = 670;
                                            contheight = 206;
                                            imgimpexp = "/img/importacion.png";
                                        } else if(f === 2){
                                            contid = "Exportacion1";
                                            contx = 820;
                                            conty = 310;
                                            contheight = 206;
                                            imgimpexp = "/img/exportacion.png";
                                        } else{
                                            contid = "Exportacion2";
                                            contx = 820;
                                            conty = 670;
                                            contheight = 206;
                                            imgimpexp = "/img/exportacion.png";
                                        }

                                        const idCapa = contid;
                                        const xCapa = contx;
                                        const yCapa = conty;
                                        const nombreCapa = "Transformación";
                                        const colorCapa = getColorFromNombre(nombreCapa);
                                        const widthCapa = 150;
                                        const heightCapa = contheight;
                                        const imgcapa = imgimpexp;
                                        
                                        // Crea una nueva instancia de WrapperNode y la retorna
                                        const nuevoCapa = new WrapperNode(idCapa, xCapa, yCapa, nombreCapa, colorCapa, widthCapa, heightCapa, imgcapa, nodes, enlaces);

                                        nodes = nodes.concat(nuevoCapa);
                                    }
                                }
                                capacont = 1;

                                //Fin de capa extra


                                for(let i=0; i<=5; i++){
                                    idcont[i] = idv;
                                    if(i===3){
                                        nombrecont[i] = "Carga Pico";
                                        yvalues = 635;                                 
                                    } else if (i===5) {
                                        nombrecont[i] = "Intermitente";
                                        yvalues = 775;
                                    }else if (i===4) {
                                        nombrecont[i] = "Carga Base";
                                        yvalues = 705;
                                    }else if (i===1) {
                                        nombrecont[i] = "Gas Seco";
                                        nombrearray[i] = "RNT";
                                        yvalues = 170;
                                        yvalores[i] = 687;
                                        xvalores[i] = 1280;
                                        idarray[i] = 710;
                                    }else if (i===2) {
                                        nombrecont[i] = "Gas LP";
                                        nombrearray[i] = "RGD";
                                        yvalues = 240;
                                        yvalores[i] = 687;
                                        xvalores[i] = 1380;
                                        idarray[i] = 720;
                                    }else {
                                        nombrecont[i] = "Petrolíferos";
                                        nombrearray[i] = "Distribución";
                                        yvalues = 100;
                                        yvalores[i] = 155;
                                        xvalores[i] = 1360;
                                        idarray[i] = 700;
                                    }
                                    idv = idv + 1;
                                    ycont[i] = yvalues;
                                    //yvalues = yvalues + 50;
                                }
                                    


                                const newData = { ...data };
                                newData.id = idcont;
                                newData.nombre = nombrecont;
                                newData.y = ycont;
                            




                                

                                idv = idv + 1;
                                cont = cont + 1;

                                // Destructurar el nuevo objeto con las nuevas propiedades
                                const{
                                    id,
                                    nombre,
                                    y
                                } = newData;

                                
                                //const color2 = getColorFromNombre(feP_Nombre_sin_espacios2); // Asume que tienes esta función definida
                                // Crea una nueva instancia de Nodo y la añade al SVG
                                for (let k=0; k<=5; k++){
                                    const color = getColorFromNombre(nombre[k]); // Asume que tienes esta función definida 
                                    const image = getImageFromNombre(nombre[k]);
                                    const nuevoNodoTipos = new NodoTiposEnergia(
                                    id[k],
                                    nombre[k],
                                    y[k],
                                    cargaPico, 
                                    intermitente, 
                                    cargaBase, 
                                    gasSeco,
                                    gasLP,
                                    petrolíferos,
                                    color,
                                    image,
                                    nodes,
                                    enlaces
                                    );
                                    nodes = nodes.concat(nuevoNodoTipos);
                                    nodesTipos.push(nuevoNodoTipos);

                                    let srce;

                                    if(k<=2){
                                        srce =  nodesTransformacion.find((nodo) => nodo.id === 500);                                
                                    }else {
                                        srce =  nodesTransformacion.find((nodo) => nodo.id === 501);
                                    }
                                    const sourceNode = srce;

                                    const targetNode = nodesTipos.find((nodo) => nodo.id === id[k]);

                                    const backgroundColor = coloresEnergia["FondoNodo"];
                                    let pcolors = [];
                                    let vl = 0;
                                    
                                    if(k === 0){
                                        pcolors = ["Carbon", "Condensados", "GasNatural", "Petroleo"];
                                        vl = petrolíferos;
                                    } else if(k === 1){
                                        pcolors = ["Carbon", "Condensados", "GasNatural", "Petroleo"];
                                        vl = gasSeco;
                                    } else if(k === 2){
                                        pcolors = ["Carbon", "Condensados", "GasNatural", "Petroleo"];
                                        vl = gasLP;
                                    } else if(k === 3){
                                        pcolors = ["Nucleoenergia", "BagazoCana", "Biogas", "EnergiaEolica", "EnergiaSolar", "Geotermia", "EnergiaHidrica", "Lena"];
                                        vl = cargaPico;
                                    } else if(k === 4){
                                        pcolors = ["Nucleoenergia", "BagazoCana", "Biogas", "EnergiaEolica", "EnergiaSolar", "Geotermia", "EnergiaHidrica", "Lena"];
                                        vl = cargaBase;
                                    } else{
                                        pcolors = ["Nucleoenergia", "BagazoCana", "Biogas", "EnergiaEolica", "EnergiaSolar", "Geotermia", "EnergiaHidrica", "Lena"];
                                        vl = intermitente;
                                    }

                                    const particleColors = pcolors.map(key => coloresEnergia[key]);
                                    //const particleColors2 = coloresEnergia["Condensados", "Carbon", "GasNatural", "EnergiaHidrica", "EnergiaSolar", "EnergiaEolica", "Geotermia", "Biogas", "Lena"];
                                    const widthlinks = 5;
                                    const value = vl;
                                    //const value2 = contadorEl;
                                    const curve = 0;
                                    const type = "normal";
                                    const links = new Link(
                                        sourceNode,
                                        targetNode,
                                        widthlinks,
                                        backgroundColor,
                                        value,
                                        curve,
                                        particleColors,
                                        type
                                    );

                                    enlaces = enlaces.concat(links); 
                                }

                                dist = petrolíferos + gasSeco + gasLP;
                                rnt = cargaPico + cargaBase + intermitente;
                                
                            });
                            for (let z=0; z<=2; z++){
                                const color2 = getColorFromNombre(nombrearray[z]); // Asume que tienes esta función definida 
                                const image2 = getImageFromNombre(nombrearray[z]);
                                const nuevoNodoDist = new NodoDistribucion(
                                idarray[z],
                                nombrearray[z],
                                yvalores[z],
                                xvalores[z],
                                dist,
                                rnt,
                                color2,
                                image2,
                                nodes,
                                enlaces
                                );
                                nodes = nodes.concat(nuevoNodoDist);
                                nodesTipos.push(nuevoNodoDist);
                            }

                            let srce;
                            let trgt;
                            let pcolors = [];
                            let vl = 0;

                            for(let b=0; b<=6; b++){
                                if(b === 0){
                                    srce =  nodesTipos.find((nodo) => nodo.id === 600);
                                    trgt =  nodesTipos.find((nodo) => nodo.id === idarray[0]);
                                    pcolors = ["Carbon", "Condensados", "GasNatural", "Petroleo"];
                                    vl = dist;                               
                                } else if(b === 1) {
                                    srce =  nodesTipos.find((nodo) => nodo.id === 601);
                                    trgt =  nodesTipos.find((nodo) => nodo.id === idarray[0]);
                                    pcolors = ["Carbon", "Condensados", "GasNatural", "Petroleo"];
                                    vl = dist;
                                } else if(b === 2) {
                                    srce =  nodesTipos.find((nodo) => nodo.id === 602);
                                    trgt =  nodesTipos.find((nodo) => nodo.id === idarray[0]);
                                    pcolors = ["Carbon", "Condensados", "GasNatural", "Petroleo"];
                                    vl = dist;
                                } else if(b === 3) {
                                    srce =  nodesTipos.find((nodo) => nodo.id === 603);
                                    trgt =  nodesTipos.find((nodo) => nodo.id === idarray[1]);
                                    pcolors = ["Nucleoenergia", "BagazoCana", "Biogas", "EnergiaEolica", "EnergiaSolar", "Geotermia", "EnergiaHidrica", "Lena"];
                                    vl = rnt;
                                } else if(b === 4) {
                                    srce =  nodesTipos.find((nodo) => nodo.id === 604);
                                    trgt =  nodesTipos.find((nodo) => nodo.id === idarray[1]);
                                    pcolors = ["Nucleoenergia", "BagazoCana", "Biogas", "EnergiaEolica", "EnergiaSolar", "Geotermia", "EnergiaHidrica", "Lena"];
                                    vl = rnt;
                                } else if(b === 5){
                                    srce =  nodesTipos.find((nodo) => nodo.id === 605);
                                    trgt =  nodesTipos.find((nodo) => nodo.id === idarray[1]);
                                    pcolors = ["Nucleoenergia", "BagazoCana", "Biogas", "EnergiaEolica", "EnergiaSolar", "Geotermia", "EnergiaHidrica", "Lena"];
                                    vl = rnt;
                                } else{
                                    srce =  nodesTipos.find((nodo) => nodo.id === idarray[1]);
                                    trgt =  nodesTipos.find((nodo) => nodo.id === idarray[2]);
                                    pcolors = ["Nucleoenergia", "BagazoCana", "Biogas", "EnergiaEolica", "EnergiaSolar", "Geotermia", "EnergiaHidrica", "Lena"];
                                    vl = rnt;
                                }
                                const sourceNode = srce;

                                const targetNode = trgt;

                                const backgroundColor = coloresEnergia["FondoNodo"];

                                const particleColors = pcolors.map(key => coloresEnergia[key]);
                                //const particleColors2 = coloresEnergia["Condensados", "Carbon", "GasNatural", "EnergiaHidrica", "EnergiaSolar", "EnergiaEolica", "Geotermia", "Biogas", "Lena"];
                                const widthlinks = 5;
                                const value = vl;
                                //const value2 = contadorEl;
                                const curve = 0;
                                const type = "normal";
                                const links = new Link(
                                    sourceNode,
                                    targetNode,
                                    widthlinks,
                                    backgroundColor,
                                    value,
                                    curve,
                                    particleColors,
                                    type
                                );

                                enlaces = enlaces.concat(links);
                            } 

                            nodes.forEach((nodo) => {
                                nodo.addEventListeners(nodes, enlaces);
                            });

                            resolve(response);
                        },
                        error: function (error) {
                            console.error('Error al obtener nodos Sankey:', error);
                            reject(error);
                        }
                    });
                    });
                }

                function usosFinales(){
                    //Nodos Usos finales
                    return new Promise((resolve, reject) => {
                    $.ajax({
                        url: '/Sankey/nodosusofinal',
                        type: 'POST',
                        data: JSON.stringify(dataToSend),
                        contentType: 'application/json',
                        success: function (response) {

                            // Manejo de la respuesta
                            console.log("Estructura Uso Final", response);
                            // Asegúrate de que el contenedor SVG esté vacío antes de añadir nuevos elementos

                            let cont = 0;
                            let idv = 800;
                            let newid = 0;
                            let yvalues = 325;
                            let yvalores = [];
                            let nombrecont = [];
                            let nombrearray = [];
                            let ycont = [];
                            let idcont = [];
                            let idarray = [];
                            let vl = 0;
                            let totalfinal = 0;
                            response.forEach((data) => {
                                const {
                                    hogares,
                                    transporte,
                                    serPubCom,
                                    agricultura,
                                    industrial,
                                    sectorEnergia,
                                    año
                                } = data; 

                                for(let i=0; i<=5; i++){
                                    idcont[i] = idv;
                                    if(i===3){
                                        nombrecont[i] = "Agricultura";
                                        vl = agricultura;                               
                                    } else if (i===5) {
                                        nombrecont[i] = "Sector Energía";
                                        vl = sectorEnergia;
                                    }else if (i===4) {
                                        nombrecont[i] = "Industrial";
                                        vl = industrial;
                                    }else if (i===1) {
                                        nombrecont[i] = "Transporte";
                                        vl = transporte;
                                    }else if (i===2) {
                                        nombrecont[i] = "Serv. Púb. y Com.";
                                        vl = serPubCom;
                                    }else {
                                        nombrecont[i] = "Hogares";
                                        vl = hogares;
                                    }
                                    idv = idv + 1;
                                    ycont[i] = yvalues;
                                    yvalues = yvalues + 70;
                                    //yvalues = yvalues + 50;
                                }
                                
                                

                                yvalues = yvalues + 70;    

                                cont = cont + 1;

                                const newData = { ...data };
                                newData.newid = idcont;
                                newData.newy = ycont;
                                newData.newnombre = nombrecont;
                            




                                

                                // idv = idv + 1;
                                cont = cont + 1;

                                // Destructurar el nuevo objeto con las nuevas propiedades
                                const{
                                    newid,
                                    newnombre,
                                    newy
                                } = newData;

                                
                                //const color2 = getColorFromNombre(feP_Nombre_sin_espacios2); // Asume que tienes esta función definida
                                // Crea una nueva instancia de Nodo y la añade al SVG
                                for(let k=0; k<=5; k++){
                                    const color = getColorFromNombre(newnombre[k]); // Asume que tienes esta función definida 
                                    const image = getImageFromNombre(newnombre[k]);
                                    const nuevoNodoFinal = new NodoUsoFinal(
                                    newid[k],
                                    newnombre[k],
                                    newy[k],
                                    hogares,
                                    transporte,
                                    serPubCom,
                                    agricultura,
                                    industrial,
                                    sectorEnergia,
                                    año,
                                    color,
                                    image,
                                    nodes,
                                    enlaces
                                    );
                                    nodes = nodes.concat(nuevoNodoFinal);
                                    nodesUso.push(nuevoNodoFinal);

                                    let srce;
                                    let pcolors = [];

                                    console.log ("Nodos de tipos:", nodesTipos);

                                    for(let z=0; z<=1; z++){
                                        if(z === 0){
                                            srce =  nodesTipos.find((nodo) => nodo.id === 700);
                                            pcolors = ["Carbon", "Condensados", "GasNatural", "Petroleo"];                           
                                        } else{
                                            srce =  nodesTipos.find((nodo) => nodo.id === 720);
                                            pcolors = ["Nucleoenergia", "BagazoCana", "Biogas", "EnergiaEolica", "EnergiaSolar", "Geotermia", "EnergiaHidrica", "Lena"];
                                        }
                                        const sourceNode = srce;

                                        const targetNode = nodesUso.find((nodo) => nodo.id === newid[k]);

                                        const backgroundColor = coloresEnergia["FondoNodo"];

                                        const particleColors = pcolors.map(key => coloresEnergia[key]);
                                        //const particleColors2 = coloresEnergia["Condensados", "Carbon", "GasNatural", "EnergiaHidrica", "EnergiaSolar", "EnergiaEolica", "Geotermia", "Biogas", "Lena"];
                                        const widthlinks = 5;
                                        const value = vl;
                                        //const value2 = contadorEl;
                                        const curve = 0;
                                        const type = "normal";
                                        const links = new Link(
                                            sourceNode,
                                            targetNode,
                                            widthlinks,
                                            backgroundColor,
                                            value,
                                            curve,
                                            particleColors,
                                            type
                                        );

                                        enlaces = enlaces.concat(links);
                                    } 

                                    totalfinal = totalfinal + vl;
                                }
                                
                            });

                            const sourceNode = nodes.find((nodo) => nodo.id === "nodoUsosFinales");

                            const targetNode = nodes.find((nodo) => nodo.id === "Transformación");

                            const backgroundColor = coloresEnergia["FondoNodo"];

                            let pcolors = ["Carbon", "Condensados", "GasNatural", "Petroleo", "Nucleoenergia", "BagazoCana", "Biogas", "EnergiaEolica", "EnergiaSolar", "Geotermia", "EnergiaHidrica", "Lena"];

                            const particleColors = pcolors.map(key => coloresEnergia[key]);
                            //const particleColors2 = coloresEnergia["Condensados", "Carbon", "GasNatural", "EnergiaHidrica", "EnergiaSolar", "EnergiaEolica", "Geotermia", "Biogas", "Lena"];
                            const widthlinks = 5;
                            const value = totalfinal;
                            //const value2 = contadorEl;
                            const curve = 18;
                            const type = "retroalimentacion";
                            const links = new Link(
                                sourceNode,
                                targetNode,
                                widthlinks,
                                backgroundColor,
                                value,
                                curve,
                                particleColors,
                                type
                            );

                            enlaces = enlaces.concat(links);

                            nodes.forEach((nodo) => {
                                nodo.addEventListeners(nodes, enlaces);
                            });


                            resolve(response);
                        },
                        error: function (error) {
                            console.error('Error al obtener nodos Sankey:', error);
                            reject(error);
                        }
                    });
                    });
                }

                obtieneNodosCaja()
                    .then(() => consultaSankey())
                    .then(() => nodos())
                    .then(() => sector())
                    .then(() => transformaciones())
                    .then(() => tiposEnergia())
                    .then(() => usosFinales())
                    .catch((error) => {
                        console.error('Error en la cadena de promesas:', error);
                    });

                
                // Al hacer clic fuera de un nodo
                sankeySvg.addEventListener("click", (evt) => {
                    nodes.forEach((node) => (node.group.style.opacity = 1)); // Restaura la opacidad de todos los nodos
                    enlaces.forEach((link) => {
                        link.pathElement.style.opacity = 1; // Restaura la opacidad del enlace
                        if (link.particles) {
                            link.particles.forEach((particle) => {
                                particle.style.opacity = 1; // Restaura la opacidad de las partículas
                            });
                        }
                    });
                });
});


        //Boton Ejecutar
        @*Funcion para Evaluar La Solicitud*@
            $("#btnEjecutar").click(function (event) {
                const svgContainer = document.getElementById('sankeySvg').innerHTML = '';
                var contenedorAdicional = document.getElementById("highchartsContainer");
                var contenedorAdicional2 = document.getElementById("playButton");
                var contenedorAdicional3 = document.getElementById("yearSlider");
                var contenedorAdicional4 = document.getElementById("newChartContainer");
                var contenedorAdicional5 = document.getElementById("regresarSankeyButton");
                contenedorAdicional.style.display = "none";
                contenedorAdicional2.style.display = "none";
                contenedorAdicional3.style.display = "none";
                contenedorAdicional4.style.display = "none";
                contenedorAdicional5.style.display = "none";
                //svgContainer.innerHTML = '';
                var yearSelect = $('#year').val();
                var dataToSend = { yearSelect: yearSelect };
                // Valida que el campo no este vacío
                // Validar que ninguna de las variables esté vacía o nula
                if (!yearSelect) {
                    var messageDiv = document.getElementById('message');
                    messageDiv.innerHTML = 'Debes seleccionar un año primero antes de ejecutar la consulta.';
                    messageDiv.classList.remove('d-none'); // Muestra el mensaje
                    // Opcional: Ocultar el mensaje después de 5 segundos
                    setTimeout(function () {
                        messageDiv.classList.add('d-none'); // Oculta el mensaje
                    }, 5000); // 5 segundos
                    return; // Termina la función aquí para no enviar la solicitud AJAX
                }

                let nodes = [];
                let enlaces = [];

                let nodesNodo = [];
                let nodesSector = [];
                let nodesTransformacion = [];
                let nodesTipos = [];
                let nodesUso = [];

                let nodesPrueba = [];
                let enlacesPrueba = [];

                function consultaSankey(){
                return new Promise((resolve, reject) => {
                $.ajax({
                    
                    url: '/Sankey/consulta_Sankey',
                    type: 'POST',
                    data: JSON.stringify(dataToSend),
                    contentType: 'application/json',
                    success: function (response) {
                        // Manejo de la respuesta
                        console.log("Estructura Sankey", response);
                        resolve(response);
                    },
                    error: function (error) {
                        // Manejo del error
                        reject(error);
                    }
                });
                });
                }

                
                function obtieneNodosCaja() {
                    return new Promise((resolve, reject) => {
                    $.ajax({
                        url: '/Sankey/nodoscaja',
                        type: 'GET',
                        contentType: 'application/json',
                        success: function (response) {
                            console.log("Estructura NodosCajaSankey", response);
                            // Puedes descomentar la siguiente línea si es necesario
                            // document.getElementById('sankeySvg').innerHTML = '';

                            let yextra = 0;
                            response.forEach((data) => {
                                const { id, x, y, nombre, width, height } = data;
                                const color = getColorFromNombre(nombre);

                                const newData = { ...data };

                                if(id === "Retroalimentación"){
                                    newData.yfinal = y + 395;
                                    newData.xfinal = x + 260;
                                } else if(id === "nodoUsosFinales"){
                                    newData.yfinal = y;
                                    newData.xfinal = x + 410;
                                } else{
                                    newData.yfinal = y;
                                    newData.xfinal = x;
                                }

                                const{
                                    yfinal,
                                    xfinal
                                } = newData;

                                const imgcapa = "/img/co2.png";

                                
                                // Crea una nueva instancia de WrapperNode y la retorna
                                const nuevoNodo = new WrapperNode(id, xfinal, yfinal, nombre, color, width, height, imgcapa, nodes, enlaces);

                                nodes = nodes.concat(nuevoNodo);

                            });


                            resolve(response);


                        },
                        error: function (error) {
                            // Manejo del error
                            console.error("Error al obtener nodos de caja: ", error);
                            reject(error);
                        }
                    });
                    });
                }

                //Nodos Caja
                
                   

                //Nodos
                function nodos(){
                    return new Promise((resolve, reject) => {
                    $.ajax({
                        url: '/Sankey/obtieneNodos',
                        type: 'POST',
                        data: JSON.stringify(dataToSend),
                        contentType: 'application/json',
                        success: function (response) {

                            // Manejo de la respuesta
                            console.log("Estructura BD", response);
                            // Asegúrate de que el contenedor SVG esté vacío antes de añadir nuevos elementos



                            
                            document.getElementById('sankeySvg');




                            let contador = 0;
                            let contadorTotal = 0;
                            let contadorImp = 0;
                            let contadorExp = 0;
                            let valoress = [];
                            let nombress = [];
                            let id = [];
                            let valorfep = [];
                            let feP_ID2 = 100;
                            let valor2 = 0;
                            let valor_importaciones2 = 0;
                            let valor_exportaciones2 = 0;
                            //let idejemplo = 100;
                            //const nodoA;

                            response.forEach((data) => {
                                const {
                                    feP_ID, 
                                    x, 
                                    y, 
                                    feP_Nombre_sin_espacios,
                                    valor, 
                                    width, 
                                    height, 
                                    infoDataImp, 
                                    infoDataExp, 
                                    valor_importaciones,
                                    valor_exportaciones, 
                                    tooltipPos,
                                    año
                                } = data; 

                                contador = contador + 1;
                                contadorTotal = contadorTotal + data.valor;
                                contadorImp = contadorImp + valor_importaciones;
                                contadorExp = contadorExp + valor_exportaciones;

                                // Crear una copia del objeto original
                                const newData = { ...data };
                                valor2= contadorTotal;
                                valor_importaciones2= contadorImp;
                                valor_exportaciones2 = contadorExp;
                                newData.cont = contador;
                                newData.valorOfertaTotal = 20;
                                id.push(feP_ID);
                                valorfep.push(valor);



                                console.log("Contador: ", newData.cont);
                                console.log("Valor: ", newData.valor2);
                                // Asignar un nuevo valor dinámico a la propiedad nombreNodo en la copia
                                
                                
                                // Destructurar el nuevo objeto con las nuevas propiedades
                                const {
                                    cont,
                                    valorOfertaTotal
                                } = newData; 

                                const imagen_sin_espacios = getImageFromNombre(feP_Nombre_sin_espacios);
                                const color = getColorFromNombre(feP_Nombre_sin_espacios); // Asume que tienes esta función definida 
                                // Crea una nueva instancia de Nodo y la añade al SVG
                                const nuevoNodo = new Nodo(
                                    feP_ID, 
                                    x, 
                                    y, 
                                    feP_Nombre_sin_espacios,
                                    valor,
                                    color,
                                    imagen_sin_espacios,
                                    width, 
                                    height, 
                                    infoDataImp, 
                                    infoDataExp, 
                                    valor_importaciones,
                                    valor_exportaciones, 
                                    tooltipPos,
                                    cont,
                                    año,
                                    nodes,
                                    enlaces,
                                );

                                // Verificar si el nodo ya existe en nodes antes de agregarlo
                                //const existeEnNodes = nodesPrueba.some((existingNode) => existingNode.feP_ID === nuevoNodo4.feP_ID);

                                //if (!existeEnNodes) {
                                    // Agregar el nuevo nodo a nodes
                                    nodes = nodes.concat(nuevoNodo);
                                    nodesNodo.push(nuevoNodo);
                                //}    
                                
                                //const nodoA = new Nodo(/* parámetros para Nodo */);      
                            });

                            const nuevoNodoTotal = new NodoTotal(
                                feP_ID2,
                                valor2,
                                valor_importaciones2,
                                valor_exportaciones2,
                                contador,
                                nodes,
                                enlaces
                            );
                                nodes = nodes.concat(nuevoNodoTotal);
                                nodesNodo.push(nuevoNodoTotal);

                            console.log("Nodos:", nodes);

                            for (let z=0; z<=11; z++){
                                const sourceNode = nodesNodo.find((nodo) => nodo.id === id[z]);
                                const targetNode = nodesNodo.find((nodo) => nodo.id === feP_ID2);
                                const backgroundColor = coloresEnergia["FondoNodo"];
                                let pcolors = [];

                                if(z === 0){
                                    pcolors = ["BagazoCana"];
                                } else if(z === 1){
                                    pcolors = ["Biogas"];
                                } else if(z === 2){
                                    pcolors = ["Carbon"];
                                } else if(z === 3){
                                    pcolors = ["Condensados"];
                                } else if(z === 4){
                                    pcolors = ["EnergiaEolica"];
                                } else if(z === 5){
                                    pcolors = ["EnergiaSolar"];
                                } else if(z === 6){
                                    pcolors = ["GasNatural"];
                                } else if(z === 7){
                                    pcolors = ["Geotermia"];
                                } else if(z === 8){
                                    pcolors = ["EnergiaHidrica"];
                                } else if(z === 9){
                                    pcolors = ["Lena"];
                                } else if(z === 10){
                                    pcolors = ["Nucleoenergia"];
                                } else{
                                    pcolors = ["Petroleo"];
                                }

                                const particleColors = pcolors.map(key => coloresEnergia[key]);

                                console.log("Valor colores:", particleColors);
                                const widthlinks = 5;
                                const value = valorfep[z];
                                const curve = 0;
                                const type = "normal";
                                const links = new Link(
                                    sourceNode,
                                    targetNode,
                                    widthlinks,
                                    backgroundColor,
                                    value,
                                    curve,
                                    particleColors,
                                    type
                                );
                                

                                enlaces = enlaces.concat(links);
                            }

                            // Aplicar el evento de clic a todos los nodos en el array
                            nodes.forEach((nodo) => {
                                nodo.addEventListeners(nodes, enlaces);
                            });

                            resolve(response);
                        },
                        error: function (error) {
                            console.error('Error al obtener nodos Sankey:', error);
                            reject(error);
                        }
                    });
                    });
                }

                function sector(){
                    //Nodos Sectores
                    return new Promise((resolve, reject) => {
                    $.ajax({
                        url: '/Sankey/nodossectores',
                        type: 'POST',
                        data: JSON.stringify(dataToSend),
                        contentType: 'application/json',
                        success: function (response) {

                            // Manejo de la respuesta
                            console.log("Estructura Sectores", response);
                            // Asegúrate de que el contenedor SVG esté vacío antes de añadir nuevos elementos


                            let contador = 0;
                            let contadorPet = 0;
                            let contnom = [];
                            let contval = [];
                            let z = 0;
                            let l = 0;
                            let contadorEl = 0;
                            let contadorCoqnom;
                            let contadorRefnom;
                            let contadorRef = 0;
                            let contadorCoq = 0;
                            let contadorCombus = 0;
                            let contadorPlantnom;
                            let contadorPlant = 0;
                            let yvalue = [];
                            let idvalue = [];
                            let nomvalue = [];
                            let imagenes = [];


                            response.forEach((data) => {
                                const {
                                    sectorID, 
                                    sector_Nombre_SE, 
                                    tipo_SE, 
                                    valor
                                } = data; 

                            
                                
                                
                                if(tipo_SE === "Sector petróleo y gas"){
                                    contadorPet = contadorPet + valor;
                                    if(sector_Nombre_SE === "Otros productos , no definidos (idustria carbón y bagazo de caña) y otras ramas"){
                                        contnom.push("Otros productos");
                                    }
                                    else{
                                        contnom.push(sector_Nombre_SE);
                                    }
                                    contval.push(valor);
                                }
                                else{
                                    contadorEl = contadorEl + valor;
                                    contnom.push(sector_Nombre_SE);
                                    contval.push(valor);
                                }

                                if(sector_Nombre_SE === "Coquizadoras"){
                                    contadorCoqnom = sector_Nombre_SE;
                                    contadorCoq = valor;
                                    contadorCombus = contadorCombus + valor;
                                }
                                if(sector_Nombre_SE === "Refinerias y despuntadoras"){
                                    contadorRefnom = sector_Nombre_SE;
                                    contadorRef = valor;
                                    contadorCombus = contadorCombus + valor;
                                }
                                if(sector_Nombre_SE === "Plantas de gas y fraccionadoras"){
                                    contadorPlantnom = sector_Nombre_SE;
                                    contadorPlant = valor;
                                }

                                contador = contador + 1;

                                const newData = { ...data };
                                newData.idnuevo = sectorID + 220
                                newData.cont = contador;
                                newData.pet = contadorPet;
                                newData.el = contadorEl;
                                newData.tam = z;
                                newData.tam2 = l;


                            
                                
                                // Destructurar el nuevo objeto con las nuevas propiedades
                    
                                const{
                                    idnuevo,
                                    cont,
                                    pet,
                                    el,
                                    tam,
                                    tam2
                                } = newData;


                                const color = getColorFromNombre(tipo_SE); // Asume que tienes esta función definida 
                            });

                            for(let i=0; i<=1; i++){

                                if(i === 0){
                                    idvalue[i] = 200;
                                    yvalue[i] = 330;
                                    nomvalue[i] = "Sector petróleo y gas"
                                    imagenes [i] = "/img/s_petroliferos.png";
                                } else{
                                    idvalue[i] = 210;
                                    yvalue[i] = 620;
                                    nomvalue[i] = "Sector eléctrico"
                                    imagenes [i] = "/img/electricidadi.png";
                                }


                                const nuevoNodoTooltip = new SectorTooltip(
                                    idvalue[i],
                                    nomvalue[i],
                                    yvalue[i],
                                    imagenes[i],
                                    contadorPet,
                                    contadorEl,
                                    contnom,
                                    contval,
                                    nodes,
                                    enlaces
                                );

                                
                                //nodes = nodes.concat(nuevoNodoTooltip);
                                nodes = nodes.concat(nuevoNodoTooltip);
                                nodesSector.push(nuevoNodoTooltip);
                                
                                const sourceNode = nodesNodo.find((nodo) => nodo.id === 100);
                                const targetNode = nodesSector.find((nodo) => nodo.id === idvalue[i]);
                                //const targetNode2 = nodes.find((nodo)=> nodo.id2 === 210);
                                const backgroundColor = coloresEnergia["FondoNodo"];
                                let pcolors = [];
                                let vl = 0;
                                
                                if(i === 0){
                                    pcolors = ["Carbon", "Condensados", "GasNatural", "Petroleo"];
                                    vl = contadorPet;
                                } else{
                                    pcolors = ["Nucleoenergia", "BagazoCana", "Biogas", "EnergiaEolica", "EnergiaSolar", "Geotermia", "EnergiaHidrica", "Lena"];
                                    vl = contadorEl;
                                } 

                                const particleColors = pcolors.map(key => coloresEnergia[key]);
                                //const particleColors2 = coloresEnergia["Condensados", "Carbon", "GasNatural", "EnergiaHidrica", "EnergiaSolar", "EnergiaEolica", "Geotermia", "Biogas", "Lena"];
                                const widthlinks = 5;
                                const value = vl;
                                //const value2 = contadorEl;
                                const curve = 0;
                                const type = "normal";
                                const links = new Link(
                                    sourceNode,
                                    targetNode,
                                    widthlinks,
                                    backgroundColor,
                                    value,
                                    curve,
                                    particleColors,
                                    type
                                );

                                //svgElement.appendChild(links);

                                enlaces = enlaces.concat(links); 
                            }
                            
                            let idn = [];
                            let yn = [];
                            let nombren = [];
    
                            for(let z=0; z<=2; z++){
                                if(z === 0){
                                    idn[z] = 300;
                                    yn[z] = 280;
                                    nombren[z] = "Combustible";
                                } else if (z === 1){
                                    idn[z] = 301;
                                    yn[z] = 420;
                                    nombren[z] = "Calor";
                                } else {
                                    idn[z] = 302;
                                    yn[z] = 640;
                                    nombren[z] = "Electricidad";
                                }
                                const nuevoNodoProvision = new NodoProvisionyProduccion(
                                    idn[z],
                                    yn[z],
                                    nombren[z],
                                    contadorCombus,
                                    contadorCoq,
                                    contadorRef,
                                    contadorCoqnom,
                                    contadorRefnom,
                                    contadorPlant,
                                    contadorPlantnom,
                                    contadorEl,
                                    nodes,
                                    enlaces,
                                );
                                // Agregar el nuevo nodo a nodes
                                nodes = nodes.concat(nuevoNodoProvision);
                                nodesSector.push(nuevoNodoProvision);
                                let srce;

                                if(z === 0){
                                    srce = nodesSector.find((nodo) => nodo.id === idvalue[0]);
                                } else if (z === 1){
                                    srce = nodesSector.find((nodo) => nodo.id === idvalue[0]);
                                } else {
                                    srce = nodesSector.find((nodo) => nodo.id === idvalue[1]);
                                }
                                const sourceNodeB = srce;
                                const targetNodeB = nodesSector.find((nodo) => nodo.id === idn[z]);

                                //const targetNode2 = nodes.find((nodo)=> nodo.id2 === 210);
                                const backgroundColorB = coloresEnergia["FondoNodo"];
                                let pcolors = [];
                                let vl = 0;
                                
                                if(z === 0){
                                    pcolors = ["Carbon", "Condensados", "GasNatural", "Petroleo"];
                                    vl = contadorCombus;
                                } else if (z === 1){
                                    pcolors = ["Carbon", "Condensados", "GasNatural", "Petroleo"];
                                    vl = contadorPlant;
                                } else{
                                    pcolors = ["Nucleoenergia", "BagazoCana", "Biogas", "EnergiaEolica", "EnergiaSolar", "Geotermia", "EnergiaHidrica", "Lena"];
                                    vl = contadorEl;
                                }

                                const particleColorsB = pcolors.map(key => coloresEnergia[key]);
                                //const particleColors2 = coloresEnergia["Condensados", "Carbon", "GasNatural", "EnergiaHidrica", "EnergiaSolar", "EnergiaEolica", "Geotermia", "Biogas", "Lena"];
                                const widthlinksB = 5;
                                const valueB = vl;
                                //const value2 = contadorEl;
                                const curveB = 0;
                                const typeB = "normal";
                                const linksB = new Link(
                                    sourceNodeB,
                                    targetNodeB,
                                    widthlinksB,
                                    backgroundColorB,
                                    valueB,
                                    curveB,
                                    particleColorsB,
                                    typeB
                                );

                                enlaces = enlaces.concat(linksB);   
                            }   

                             // Aplicar el evento de clic a todos los nodos en el array
                            nodes.forEach((nodo) => {
                                nodo.addEventListeners(nodes, enlaces);
                            }); 


                            resolve(response);
                            
                        },
                        error: function (error) {
                            console.error('Error al obtener nodos Sankey:', error);
                            reject(error);
                        }
                    });
                    });
                }

                function transformaciones(){
                    //Nodos Transformaciones
                    return new Promise((resolve, reject) => {
                    $.ajax({
                        url: '/Sankey/nodostransformaciones',
                        type: 'POST',
                        data: JSON.stringify(dataToSend),
                        contentType: 'application/json',
                        success: function (response) {

                            // Manejo de la respuesta
                            console.log("Estructura Transformaciones", response);
                            // Asegúrate de que el contenedor SVG esté vacío antes de añadir nuevos elementos

                            let yvalue = 30;
                            let cont = 70;
                            let yvalue2 = 120;
                            let contPetro = 0;
                            let contCent = 0;
                            let petro;
                            let cent;
                            let contador = 0;
                            let idsum = [];
                            let idtot = [];
                            let ytot = [];
                            let capa = 0;
                            let capacont = 0;

                            response.forEach((data) => {
                                const {
                                    transformacionID, 
                                    transformacion_Nombre_SE, 
                                    tipo, 
                                    valor
                                } = data; 

                                const newData = { ...data };

                                ///Capa extra
                                if (capacont === 0){
                                    for(let f=0; f<=2; f++){
                                        //const { id, x, y, nombre, width, height } = data;

                                        let contid;
                                        let conty;
                                        let contheight;
                                        let contimg;

                                        if(f === 0){
                                            contid = "Transformacion1";
                                            conty = 310;
                                            contheight = 355;
                                            contimg = "/img/co2.png";
                                        } else if(f === 1){
                                            contid = "Transformacion2";
                                            conty = 670;
                                            contheight = 420;
                                            contimg = "/img/rr4.png";
                                        } else{
                                            contid = "Transformacion3";
                                            conty = 60;
                                            contheight = 206;
                                            contimg = "/img/co2.png";
                                        }

                                        const idCapa = contid;
                                        const xCapa = 770;
                                        const yCapa = conty;
                                        const nombreCapa = "Transformación";
                                        const colorCapa = getColorFromNombre(nombreCapa);
                                        const widthCapa = 150;
                                        const heightCapa = contheight;
                                        const imgcapa = contimg;
                                        
                                        // Crea una nueva instancia de WrapperNode y la retorna
                                        const nuevoCapa = new WrapperNode(idCapa, xCapa, yCapa, nombreCapa, colorCapa, widthCapa, heightCapa, imgcapa, nodes, enlaces);

                                        nodes = nodes.concat(nuevoCapa);
                                    }
                                }
                                capacont = 1;

                                //Fin de capa extra
                                

                                if(tipo === "Petróleo y gas"){
                                    yvalue = yvalue + cont;
                                    contPetro = contPetro + valor;
                                    petro = tipo;
                                    console.log("valor de y:", yvalue);

                                }
                                else {
                                    yvalue = yvalue + yvalue2;
                                    contCent = contCent + valor;
                                    yvalue2 = 70;
                                    cent = tipo;
                                    console.log("valor de y:", yvalue);
                                }
                                
                                newData.y = yvalue;
                                newData.idfinal = transformacionID + 400;

                                
                                // Destructurar el nuevo objeto con las nuevas propiedades
                    
                                const{
                                    y,
                                    idfinal
                                } = newData;


                                const color = getColorFromNombre(transformacion_Nombre_SE); // Asume que tienes esta función definida 
                                //const color2 = getColorFromNombre(feP_Nombre_sin_espacios2); // Asume que tienes esta función definida
                                // Crea una nueva instancia de Nodo y la añade al SVG
                                const nuevoNodoTranformacion = new NodoTransformacion(
                                    idfinal,
                                    transformacion_Nombre_SE,
                                    tipo,
                                    valor,
                                    color,
                                    y,
                                    nodes,
                                    enlaces
                                );

                                idsum[contador] = idfinal;
                                contador = contador + 1;

                                nodes = nodes.concat(nuevoNodoTranformacion);
                                nodesTransformacion.push(nuevoNodoTranformacion);

                                let srce;

                                for(let z=0; z<=1; z++){
                                    if(tipo === "Petróleo y gas" && z === 0){
                                        srce = nodesSector.find((nodo) => nodo.id === 300);
                                    } else if (tipo === "Petróleo y gas" && z === 1){
                                        srce = nodesSector.find((nodo) => nodo.id === 301);
                                    } else{
                                        srce = nodesSector.find((nodo) => nodo.id === 302);
                                        z = 1;
                                    }
                                    const sourceNode = srce;
                                    const targetNode = nodesTransformacion.find((nodo) => nodo.id === idfinal);
                            

                                    //const targetNode2 = nodes.find((nodo)=> nodo.id2 === 210);
                                    const backgroundColor = coloresEnergia["FondoNodo"];
                                    let pcolors = [];
                                    let vl = 0;
                                    
                                    if(tipo === "Petróleo y gas"){
                                        pcolors = ["Carbon", "Condensados", "GasNatural", "Petroleo"];
                                    } else{
                                        pcolors = ["Nucleoenergia", "BagazoCana", "Biogas", "EnergiaEolica", "EnergiaSolar", "Geotermia", "EnergiaHidrica", "Lena"];
                                    }

                                    const particleColors = pcolors.map(key => coloresEnergia[key]);
                                    //const particleColors2 = coloresEnergia["Condensados", "Carbon", "GasNatural", "EnergiaHidrica", "EnergiaSolar", "EnergiaEolica", "Geotermia", "Biogas", "Lena"];
                                    const widthlinks = 5;
                                    const value = valor;
                                    //const value2 = contadorEl;
                                    const curve = 0;
                                    const type = "normal";
                                    const links = new Link(
                                        sourceNode,
                                        targetNode,
                                        widthlinks,
                                        backgroundColor,
                                        value,
                                        curve,
                                        particleColors,
                                        type
                                    );

                                    enlaces = enlaces.concat(links);
                                } 


                            });
                            
                            for(let k=0; k<=1; k++){

                                if(k === 0){
                                    idtot[k] = 500;
                                    ytot[k] = 165;
                                } else {
                                    idtot[k] = 501;
                                    ytot[k] = 705;
                                }

                                const nuevoNodoTransTotal = new NodoTransformacionTotal(
                                idtot[k],
                                ytot[k],
                                contPetro,
                                contCent,
                                petro,
                                cent,
                                nodes,
                                enlaces
                                );
                                // Agregar el nuevo nodo a nodes
                                nodes = nodes.concat(nuevoNodoTransTotal);
                                nodesTransformacion.push(nuevoNodoTransTotal);
                            }

                            let srce;

                            for(let v=0; v<=13; v++){
                                const sourceNode = nodesTransformacion.find((nodo) => nodo.id === idsum[v]);

                                if(v<=2){
                                    srce = nodesTransformacion.find((nodo) => nodo.id === idtot[0]);
                                } else{
                                    srce = nodesTransformacion.find((nodo) => nodo.id === idtot[1]);
                                }

                                const targetNode = srce;
                        

                                //const targetNode2 = nodes.find((nodo)=> nodo.id2 === 210);
                                const backgroundColor = coloresEnergia["FondoNodo"];
                                let pcolors = [];
                                let vl = 0;
                                
                                if(v<=2){
                                    pcolors = ["Carbon", "Condensados", "GasNatural", "Petroleo"];
                                    vl = contPetro;
                                } else{
                                    pcolors = ["Nucleoenergia", "BagazoCana", "Biogas", "EnergiaEolica", "EnergiaSolar", "Geotermia", "EnergiaHidrica", "Lena"];
                                    vl = contCent;
                                }

                                const particleColors = pcolors.map(key => coloresEnergia[key]);
                                //const particleColors2 = coloresEnergia["Condensados", "Carbon", "GasNatural", "EnergiaHidrica", "EnergiaSolar", "EnergiaEolica", "Geotermia", "Biogas", "Lena"];
                                const widthlinks = 5;
                                const value = vl;
                                //const value2 = contadorEl;
                                const curve = 0;
                                const type = "normal";
                                const links = new Link(
                                    sourceNode,
                                    targetNode,
                                    widthlinks,
                                    backgroundColor,
                                    value,
                                    curve,
                                    particleColors,
                                    type
                                );

                                enlaces = enlaces.concat(links);
                            } 

                            nodes.forEach((nodo) => {
                                nodo.addEventListeners(nodes, enlaces);
                            }); 

                            resolve(response);
                        },
                        error: function (error) {
                            console.error('Error al obtener nodos Sankey:', error);
                            reject(error);
                        }
                    });
                    });
                }
                
                function tiposEnergia(){
                    //Nodos Tipos Energia
                    return new Promise((resolve, reject) => {
                    $.ajax({
                        url: '/Sankey/nodostiposenergia',
                        type: 'POST',
                        data: JSON.stringify(dataToSend),
                        contentType: 'application/json',
                        success: function (response) {

                            // Manejo de la respuesta
                            console.log("Estructura Tipos Energía", response);
                            // Asegúrate de que el contenedor SVG esté vacío antes de añadir nuevos elementos

                            let cont = 0;
                            let idv = 600;
                            let yvalues = 0;
                            let yvalores = [];
                            let xvalores = [];
                            let nombrecont = [];
                            let nombrearray = [];
                            let ycont = [];
                            let idcont = [];
                            let idarray = [];
                            let dist = 0;
                            let rnt = 0;
                            let capacont = 0;
                            response.forEach((data) => {
                                const {
                                    cargaPico, 
                                    intermitente, 
                                    cargaBase, 
                                    gasSeco,
                                    gasLP,
                                    petrolíferos
                                } = data; 

                                //Capa extra
                                if (capacont === 0){
                                    for(let f=0; f<=3; f++){
                                        //const { id, x, y, nombre, width, height } = data;

                                        let contid;
                                        let conty;
                                        let contheight;
                                        let contx;
                                        let imgimpexp;

                                        if(f === 0){
                                            contid = "Importacion1";
                                            contx = 800;
                                            conty = 310;
                                            contheight = 206;
                                            imgimpexp = "/img/importacion.png";
                                        } else if(f === 1){
                                            contid = "Importacion2";
                                            contx = 800;
                                            conty = 670;
                                            contheight = 206;
                                            imgimpexp = "/img/importacion.png";
                                        } else if(f === 2){
                                            contid = "Exportacion1";
                                            contx = 820;
                                            conty = 310;
                                            contheight = 206;
                                            imgimpexp = "/img/exportacion.png";
                                        } else{
                                            contid = "Exportacion2";
                                            contx = 820;
                                            conty = 670;
                                            contheight = 206;
                                            imgimpexp = "/img/exportacion.png";
                                        }

                                        const idCapa = contid;
                                        const xCapa = contx;
                                        const yCapa = conty;
                                        const nombreCapa = "Transformación";
                                        const colorCapa = getColorFromNombre(nombreCapa);
                                        const widthCapa = 150;
                                        const heightCapa = contheight;
                                        const imgcapa = imgimpexp;
                                        
                                        // Crea una nueva instancia de WrapperNode y la retorna
                                        const nuevoCapa = new WrapperNode(idCapa, xCapa, yCapa, nombreCapa, colorCapa, widthCapa, heightCapa, imgcapa, nodes, enlaces);

                                        nodes = nodes.concat(nuevoCapa);
                                    }
                                }
                                capacont = 1;

                                //Fin de capa extra


                                for(let i=0; i<=5; i++){
                                    idcont[i] = idv;
                                    if(i===3){
                                        nombrecont[i] = "Carga Pico";
                                        yvalues = 635;                                 
                                    } else if (i===5) {
                                        nombrecont[i] = "Intermitente";
                                        yvalues = 775;
                                    }else if (i===4) {
                                        nombrecont[i] = "Carga Base";
                                        yvalues = 705;
                                    }else if (i===1) {
                                        nombrecont[i] = "Gas Seco";
                                        nombrearray[i] = "RNT";
                                        yvalues = 170;
                                        yvalores[i] = 687;
                                        xvalores[i] = 1280;
                                        idarray[i] = 710;
                                    }else if (i===2) {
                                        nombrecont[i] = "Gas LP";
                                        nombrearray[i] = "RGD";
                                        yvalues = 240;
                                        yvalores[i] = 687;
                                        xvalores[i] = 1380;
                                        idarray[i] = 720;
                                    }else {
                                        nombrecont[i] = "Petrolíferos";
                                        nombrearray[i] = "Distribución";
                                        yvalues = 100;
                                        yvalores[i] = 155;
                                        xvalores[i] = 1360;
                                        idarray[i] = 700;
                                    }
                                    idv = idv + 1;
                                    ycont[i] = yvalues;
                                    //yvalues = yvalues + 50;
                                }
                                    


                                const newData = { ...data };
                                newData.id = idcont;
                                newData.nombre = nombrecont;
                                newData.y = ycont;
                            




                                

                                idv = idv + 1;
                                cont = cont + 1;

                                // Destructurar el nuevo objeto con las nuevas propiedades
                                const{
                                    id,
                                    nombre,
                                    y
                                } = newData;

                                
                                //const color2 = getColorFromNombre(feP_Nombre_sin_espacios2); // Asume que tienes esta función definida
                                // Crea una nueva instancia de Nodo y la añade al SVG
                                for (let k=0; k<=5; k++){
                                    const color = getColorFromNombre(nombre[k]); // Asume que tienes esta función definida 
                                    const image = getImageFromNombre(nombre[k]);
                                    const nuevoNodoTipos = new NodoTiposEnergia(
                                    id[k],
                                    nombre[k],
                                    y[k],
                                    cargaPico, 
                                    intermitente, 
                                    cargaBase, 
                                    gasSeco,
                                    gasLP,
                                    petrolíferos,
                                    color,
                                    image,
                                    nodes,
                                    enlaces
                                    );
                                    nodes = nodes.concat(nuevoNodoTipos);
                                    nodesTipos.push(nuevoNodoTipos);

                                    let srce;

                                    if(k<=2){
                                        srce =  nodesTransformacion.find((nodo) => nodo.id === 500);                                
                                    }else {
                                        srce =  nodesTransformacion.find((nodo) => nodo.id === 501);
                                    }
                                    const sourceNode = srce;

                                    const targetNode = nodesTipos.find((nodo) => nodo.id === id[k]);

                                    const backgroundColor = coloresEnergia["FondoNodo"];
                                    let pcolors = [];
                                    let vl = 0;
                                    
                                    if(k === 0){
                                        pcolors = ["Carbon", "Condensados", "GasNatural", "Petroleo"];
                                        vl = petrolíferos;
                                    } else if(k === 1){
                                        pcolors = ["Carbon", "Condensados", "GasNatural", "Petroleo"];
                                        vl = gasSeco;
                                    } else if(k === 2){
                                        pcolors = ["Carbon", "Condensados", "GasNatural", "Petroleo"];
                                        vl = gasLP;
                                    } else if(k === 3){
                                        pcolors = ["Nucleoenergia", "BagazoCana", "Biogas", "EnergiaEolica", "EnergiaSolar", "Geotermia", "EnergiaHidrica", "Lena"];
                                        vl = cargaPico;
                                    } else if(k === 4){
                                        pcolors = ["Nucleoenergia", "BagazoCana", "Biogas", "EnergiaEolica", "EnergiaSolar", "Geotermia", "EnergiaHidrica", "Lena"];
                                        vl = cargaBase;
                                    } else{
                                        pcolors = ["Nucleoenergia", "BagazoCana", "Biogas", "EnergiaEolica", "EnergiaSolar", "Geotermia", "EnergiaHidrica", "Lena"];
                                        vl = intermitente;
                                    }

                                    const particleColors = pcolors.map(key => coloresEnergia[key]);
                                    //const particleColors2 = coloresEnergia["Condensados", "Carbon", "GasNatural", "EnergiaHidrica", "EnergiaSolar", "EnergiaEolica", "Geotermia", "Biogas", "Lena"];
                                    const widthlinks = 5;
                                    const value = vl;
                                    //const value2 = contadorEl;
                                    const curve = 0;
                                    const type = "normal";
                                    const links = new Link(
                                        sourceNode,
                                        targetNode,
                                        widthlinks,
                                        backgroundColor,
                                        value,
                                        curve,
                                        particleColors,
                                        type
                                    );

                                    enlaces = enlaces.concat(links); 
                                }

                                dist = petrolíferos + gasSeco + gasLP;
                                rnt = cargaPico + cargaBase + intermitente;
                                
                            });
                            for (let z=0; z<=2; z++){
                                const color2 = getColorFromNombre(nombrearray[z]); // Asume que tienes esta función definida 
                                const image2 = getImageFromNombre(nombrearray[z]);
                                const nuevoNodoDist = new NodoDistribucion(
                                idarray[z],
                                nombrearray[z],
                                yvalores[z],
                                xvalores[z],
                                dist,
                                rnt,
                                color2,
                                image2,
                                nodes,
                                enlaces
                                );
                                nodes = nodes.concat(nuevoNodoDist);
                                nodesTipos.push(nuevoNodoDist);
                            }

                            let srce;
                            let trgt;
                            let pcolors = [];
                            let vl = 0;

                            for(let b=0; b<=6; b++){
                                if(b === 0){
                                    srce =  nodesTipos.find((nodo) => nodo.id === 600);
                                    trgt =  nodesTipos.find((nodo) => nodo.id === idarray[0]);
                                    pcolors = ["Carbon", "Condensados", "GasNatural", "Petroleo"];
                                    vl = dist;                               
                                } else if(b === 1) {
                                    srce =  nodesTipos.find((nodo) => nodo.id === 601);
                                    trgt =  nodesTipos.find((nodo) => nodo.id === idarray[0]);
                                    pcolors = ["Carbon", "Condensados", "GasNatural", "Petroleo"];
                                    vl = dist;
                                } else if(b === 2) {
                                    srce =  nodesTipos.find((nodo) => nodo.id === 602);
                                    trgt =  nodesTipos.find((nodo) => nodo.id === idarray[0]);
                                    pcolors = ["Carbon", "Condensados", "GasNatural", "Petroleo"];
                                    vl = dist;
                                } else if(b === 3) {
                                    srce =  nodesTipos.find((nodo) => nodo.id === 603);
                                    trgt =  nodesTipos.find((nodo) => nodo.id === idarray[1]);
                                    pcolors = ["Nucleoenergia", "BagazoCana", "Biogas", "EnergiaEolica", "EnergiaSolar", "Geotermia", "EnergiaHidrica", "Lena"];
                                    vl = rnt;
                                } else if(b === 4) {
                                    srce =  nodesTipos.find((nodo) => nodo.id === 604);
                                    trgt =  nodesTipos.find((nodo) => nodo.id === idarray[1]);
                                    pcolors = ["Nucleoenergia", "BagazoCana", "Biogas", "EnergiaEolica", "EnergiaSolar", "Geotermia", "EnergiaHidrica", "Lena"];
                                    vl = rnt;
                                } else if(b === 5){
                                    srce =  nodesTipos.find((nodo) => nodo.id === 605);
                                    trgt =  nodesTipos.find((nodo) => nodo.id === idarray[1]);
                                    pcolors = ["Nucleoenergia", "BagazoCana", "Biogas", "EnergiaEolica", "EnergiaSolar", "Geotermia", "EnergiaHidrica", "Lena"];
                                    vl = rnt;
                                } else{
                                    srce =  nodesTipos.find((nodo) => nodo.id === idarray[1]);
                                    trgt =  nodesTipos.find((nodo) => nodo.id === idarray[2]);
                                    pcolors = ["Nucleoenergia", "BagazoCana", "Biogas", "EnergiaEolica", "EnergiaSolar", "Geotermia", "EnergiaHidrica", "Lena"];
                                    vl = rnt;
                                }
                                const sourceNode = srce;

                                const targetNode = trgt;

                                const backgroundColor = coloresEnergia["FondoNodo"];

                                const particleColors = pcolors.map(key => coloresEnergia[key]);
                                //const particleColors2 = coloresEnergia["Condensados", "Carbon", "GasNatural", "EnergiaHidrica", "EnergiaSolar", "EnergiaEolica", "Geotermia", "Biogas", "Lena"];
                                const widthlinks = 5;
                                const value = vl;
                                //const value2 = contadorEl;
                                const curve = 0;
                                const type = "normal";
                                const links = new Link(
                                    sourceNode,
                                    targetNode,
                                    widthlinks,
                                    backgroundColor,
                                    value,
                                    curve,
                                    particleColors,
                                    type
                                );

                                enlaces = enlaces.concat(links);
                            } 

                            nodes.forEach((nodo) => {
                                nodo.addEventListeners(nodes, enlaces);
                            });

                            resolve(response);
                        },
                        error: function (error) {
                            console.error('Error al obtener nodos Sankey:', error);
                            reject(error);
                        }
                    });
                    });
                }

                function usosFinales(){
                    //Nodos Usos finales
                    return new Promise((resolve, reject) => {
                    $.ajax({
                        url: '/Sankey/nodosusofinal',
                        type: 'POST',
                        data: JSON.stringify(dataToSend),
                        contentType: 'application/json',
                        success: function (response) {

                            // Manejo de la respuesta
                            console.log("Estructura Uso Final", response);
                            // Asegúrate de que el contenedor SVG esté vacío antes de añadir nuevos elementos

                            let cont = 0;
                            let idv = 800;
                            let newid = 0;
                            let yvalues = 325;
                            let yvalores = [];
                            let nombrecont = [];
                            let nombrearray = [];
                            let ycont = [];
                            let idcont = [];
                            let idarray = [];
                            let vl = 0;
                            let totalfinal = 0;
                            response.forEach((data) => {
                                const {
                                    hogares,
                                    transporte,
                                    serPubCom,
                                    agricultura,
                                    industrial,
                                    sectorEnergia,
                                    año
                                } = data; 

                                for(let i=0; i<=5; i++){
                                    idcont[i] = idv;
                                    if(i===3){
                                        nombrecont[i] = "Agricultura";
                                        vl = agricultura;                               
                                    } else if (i===5) {
                                        nombrecont[i] = "Sector Energía";
                                        vl = sectorEnergia;
                                    }else if (i===4) {
                                        nombrecont[i] = "Industrial";
                                        vl = industrial;
                                    }else if (i===1) {
                                        nombrecont[i] = "Transporte";
                                        vl = transporte;
                                    }else if (i===2) {
                                        nombrecont[i] = "Serv. Púb. y Com.";
                                        vl = serPubCom;
                                    }else {
                                        nombrecont[i] = "Hogares";
                                        vl = hogares;
                                    }
                                    idv = idv + 1;
                                    ycont[i] = yvalues;
                                    yvalues = yvalues + 70;
                                    //yvalues = yvalues + 50;
                                }
                                
                                

                                yvalues = yvalues + 70;    

                                cont = cont + 1;

                                const newData = { ...data };
                                newData.newid = idcont;
                                newData.newy = ycont;
                                newData.newnombre = nombrecont;
                            




                                

                                // idv = idv + 1;
                                cont = cont + 1;

                                // Destructurar el nuevo objeto con las nuevas propiedades
                                const{
                                    newid,
                                    newnombre,
                                    newy
                                } = newData;

                                
                                //const color2 = getColorFromNombre(feP_Nombre_sin_espacios2); // Asume que tienes esta función definida
                                // Crea una nueva instancia de Nodo y la añade al SVG
                                for(let k=0; k<=5; k++){
                                    const color = getColorFromNombre(newnombre[k]); // Asume que tienes esta función definida 
                                    const image = getImageFromNombre(newnombre[k]);
                                    const nuevoNodoFinal = new NodoUsoFinal(
                                    newid[k],
                                    newnombre[k],
                                    newy[k],
                                    hogares,
                                    transporte,
                                    serPubCom,
                                    agricultura,
                                    industrial,
                                    sectorEnergia,
                                    año,
                                    color,
                                    image,
                                    nodes,
                                    enlaces
                                    );
                                    nodes = nodes.concat(nuevoNodoFinal);
                                    nodesUso.push(nuevoNodoFinal);

                                    let srce;
                                    let pcolors = [];

                                    console.log ("Nodos de tipos:", nodesTipos);

                                    for(let z=0; z<=2; z++){
                                        if(z === 0){
                                            srce =  nodesTipos.find((nodo) => nodo.id === 700);
                                            pcolors = ["Carbon", "Condensados", "GasNatural", "Petroleo"];                           
                                        } else{
                                            srce =  nodesTipos.find((nodo) => nodo.id === 720);
                                            pcolors = ["Nucleoenergia", "BagazoCana", "Biogas", "EnergiaEolica", "EnergiaSolar", "Geotermia", "EnergiaHidrica", "Lena"];
                                        }
                                        const sourceNode = srce;

                                        const targetNode = nodesUso.find((nodo) => nodo.id === newid[k]);

                                        const backgroundColor = coloresEnergia["FondoNodo"];

                                        const particleColors = pcolors.map(key => coloresEnergia[key]);
                                        //const particleColors2 = coloresEnergia["Condensados", "Carbon", "GasNatural", "EnergiaHidrica", "EnergiaSolar", "EnergiaEolica", "Geotermia", "Biogas", "Lena"];
                                        const widthlinks = 5;
                                        const value = vl;
                                        //const value2 = contadorEl;
                                        const curve = 0;
                                        const type = "normal";
                                        const links = new Link(
                                            sourceNode,
                                            targetNode,
                                            widthlinks,
                                            backgroundColor,
                                            value,
                                            curve,
                                            particleColors,
                                            type
                                        );

                                        enlaces = enlaces.concat(links);
                                    } 

                                    totalfinal = totalfinal + vl;
                                }
                                
                            });

                            const sourceNode = nodes.find((nodo) => nodo.id === "nodoUsosFinales");

                            const targetNode = nodes.find((nodo) => nodo.id === "Transformación");

                            const backgroundColor = coloresEnergia["FondoNodo"];

                            let pcolors = ["Carbon", "Condensados", "GasNatural", "Petroleo", "Nucleoenergia", "BagazoCana", "Biogas", "EnergiaEolica", "EnergiaSolar", "Geotermia", "EnergiaHidrica", "Lena"];

                            const particleColors = pcolors.map(key => coloresEnergia[key]);
                            //const particleColors2 = coloresEnergia["Condensados", "Carbon", "GasNatural", "EnergiaHidrica", "EnergiaSolar", "EnergiaEolica", "Geotermia", "Biogas", "Lena"];
                            const widthlinks = 5;
                            const value = totalfinal;
                            //const value2 = contadorEl;
                            const curve = 18;
                            const type = "retroalimentacion";
                            const links = new Link(
                                sourceNode,
                                targetNode,
                                widthlinks,
                                backgroundColor,
                                value,
                                curve,
                                particleColors,
                                type
                            );

                            enlaces = enlaces.concat(links);

                            nodes.forEach((nodo) => {
                                nodo.addEventListeners(nodes, enlaces);
                            });


                            resolve(response);
                        },
                        error: function (error) {
                            console.error('Error al obtener nodos Sankey:', error);
                            reject(error);
                        }
                    });
                    });
                }


                consultaSankey()
                    .then(() => obtieneNodosCaja())
                    .then(() => nodos())
                    .then(() => sector())
                    .then(() => transformaciones())
                    .then(() => tiposEnergia())
                    .then(() => usosFinales())
                    .catch((error) => {
                        console.error('Error en la cadena de promesas:', error);
                    });



                
                

                
                // Al hacer clic fuera de un nodo
                sankeySvg.addEventListener("click", (evt) => {
                    nodes.forEach((node) => (node.group.style.opacity = 1)); // Restaura la opacidad de todos los nodos
                    enlaces.forEach((link) => {
                        link.pathElement.style.opacity = 1; // Restaura la opacidad del enlace
                        if (link.particles) {
                            link.particles.forEach((particle) => {
                                particle.style.opacity = 1; // Restaura la opacidad de las partículas
                            });
                        }
                    });
                });
            });
            





        ///

        function ajustarAlturaContenedorAdicional(nombre, año) {
            // Ocultar la sección de gráficos
            var contenedorAdicional = document.getElementById("highchartsContainer");
            var contenedorAdicional2 = document.getElementById("playButton");
            var contenedorAdicional3 = document.getElementById("yearSlider");
            var contenedorAdicional4 = document.getElementById("newChartContainer");
            contenedorAdicional.style.display = "block"; // Mostrar el contenedor
            contenedorAdicional2.style.display = "block"; // Mostrar el contenedor
            contenedorAdicional3.style.display = "block"; // Mostrar el contenedor
            contenedorAdicional4.style.display = "block"; // Mostrar el contenedor
            contenedorAdicional.style.height = "4000px";
            contenedorAdicional.scrollIntoView({ behavior: "smooth", block: "end", inline: "nearest" });

            // Mostrar botón y slider
            $('#playButton, #yearSlider').show();

            $(document).ready(function () {
                // Obtener datos para el gráfico de Highcharts
                $.ajax({
                    url: '/Sankey/nodosgrafica',
                    type: 'GET',
                    contentType: 'application/json',
                    success: function (response) {

                        //const { usoFinalID, usoFinal_Nombre, consumoID, consumo_Nombre, año, consumoUF_Valor} = response;
                        let nuevonom;
                        let nuevonom2;
                        if(nombre === "Hogares"){
                            nuevonom = "Residencial";
                        } else if(nombre === "Transporte"){
                            nuevonom = "Transporte";
                        } else if(nombre === "Serv. Púb. y Com."){
                            nuevonom = "Comercial";
                            nuevonom2 = "Público";
                        } else if(nombre === "Agricultura"){
                            nuevonom = "Agropecuario";
                        } else if(nombre === "Industrial"){
                            nuevonom = "Industrial";
                        } else{
                            nuevonom = "Sector Energía";
                        }

                        console.log("Nuevo nombre:", nuevonom);

                        // Manejo de la respuesta
                        console.log("Estructura Graficas", response);

                        // Crear un conjunto único de años
                        var uniqueYears = [...new Set(response.map(item => item.año))];

                        // Mapear los valores correspondientes para cada año
                        var seriesData = uniqueYears.map(year => {
                            var yearData = response.filter(item => item.año === year);
                            var consumoSum = yearData.reduce((sum, item) => sum + item.consumo_Nombre_SE, 0);
                            return {
                                name: year.toString(),
                                y: consumoSum
                            };
                        });


                        // Declarar chart fuera de Highcharts.chart
                        var chart;
                        var chart2;

                        // Temporizador para la animación del tiempo
                        var animationInterval;

                        // Variable para el índice del año actual
                        var currentYearIndex = 0;

                        var playButton = $('#playButton');

                        // Función para manejar el clic en el botón de reproducción
                        function toggleAnimation() {
                            console.log('Toggle Animation Function Called');
                            if (animationInterval) {
                                clearInterval(animationInterval);
                                animationInterval = null;
                                playButton.html('▶️'); // Cambiar a símbolo de Play
                            } else {
                                playButton.html('⏸️'); // Cambiar a símbolo de Pause
                                animationInterval = setInterval(updateYear, 300);
                            }
                        }

                        // Desvincular cualquier manejador de eventos click existente
                        playButton.off('click');

                        // Asigna el evento de clic al botón de reproducción
                        playButton.click(toggleAnimation);

                        // Dentro de la función updateYear, verifica si se debe detener la animación
                        function updateYear() {
                            // Actualizar el año en el eje X
                            chart.xAxis[0].setExtremes(0, currentYearIndex);

                            // Incrementar el índice del año
                            currentYearIndex++;

                            // Detener la animación cuando se alcance el último año
                            if (currentYearIndex >= uniqueYears.length) {
                                clearInterval(animationInterval);
                                animationInterval = null;
                                playButton.html('▶️');
                                // Reiniciar el índice al principio para el siguiente clic en play
                                currentYearIndex = 0;
                                $('#yearSlider').val(0);
                            }

                            // Actualizar la posición del slider
                            $('#yearSlider').val(currentYearIndex);

                            // Verificar si la animación debe detenerse
                            if (!animationInterval) {
                                playButton.html('▶️');
                            }
                        }

                        // Filtra los datos basándote en el criterio necesario
                        var filteredData = response
                            .filter(item => (item.usoFinal_Nombre_SE === nuevonom || item.usoFinal_Nombre_SE === nuevonom2));

                        // Obtén los valores únicos de consumo_Nombre_SE después de aplicar el filtro
                        var uniqueConsumos = [...new Set(filteredData.map(item => item.consumo_Nombre_SE))];

                        // Crear las series utilizando solo los valores filtrados
                        var series = uniqueConsumos.map(consumo => {
                            return {
                                name: consumo,
                                data: uniqueYears.map(year => {
                                    var yearData = filteredData
                                        .filter(item => item.consumo_Nombre_SE === consumo && item.año === year);
                                    return yearData.length > 0 ? yearData[0].consumoUF_Valor : null;
                                })
                            };
                        });

                        // Crear el gráfico con Highcharts
                        chart = Highcharts.chart('highchartsContainer', {
                            chart: {
                                type: 'line'
                            },
                            title: {
                                text: 'Consumo de ' + nombre + ' en (PJ) por Año'
                            },
                            xAxis: {
                                categories: uniqueYears
                            },
                            yAxis: {
                                title: {
                                    text: 'Valores de Consumo (PJ)'
                                },
                                labels: {
                                    formatter: function () {
                                        // Utiliza el nombre de las categorías como etiquetas en el eje Y
                                        return this.value;
                                    }
                                }
                            },
                            series: series,
                            plotOptions: {
                                series: {
                                    animation: {
                                        duration: 300,
                                        easing: 'linear'
                                    }
                                }
                            },
                            navigation: {
                                buttonOptions: {
                                    enabled: true
                                }
                            }
                        });


                        // Barra de control deslizante (slider)
                        var slider = document.getElementById('yearSlider');
                        slider.min = 0;
                        slider.max = uniqueYears.length - 1;
                        slider.step = 1;
                        slider.value = 0;

                        slider.addEventListener('input', function () {
                            currentYearIndex = parseInt(slider.value);
                            chart.xAxis[0].setExtremes(0, currentYearIndex);
                        });

                        

                        // Cuando se modifica el contenido del botón, verifica si debe detenerse la animación
                        playButton.off('click').click(function () {
                            toggleAnimation();
                        });

                        // Aplicar estilo para aumentar el tamaño del emoji
                        playButton.css('font-size', '24px'); // Puedes ajustar el tamaño según tus preferencias

                        // Gráfica 2
                        console.log("Año de grafica 2:", año);

                        // Filtrar los datos según los criterios necesarios
                        var datosFiltrados = response.filter(item =>
                            (item.usoFinal_Nombre_SE === nuevonom || item.usoFinal_Nombre_SE === nuevonom2) && item.año === año
                        );

                        // Crear un conjunto único de consumos
                        var consumosUnicos = [...new Set(datosFiltrados.map(item => item.consumo_Nombre_SE))];

                        // Crear las series con los valores de consumoUF_Valor
                        var series2 = [];
                        var acumulado = 0;
                        var categoriasX = [];

                        for (var i = 0; i < consumosUnicos.length; i++) {
                            var consumo = consumosUnicos[i];
                            var consumoData = datosFiltrados.filter(item => item.consumo_Nombre_SE === consumo);

                            // Acumular los valores de consumoUF_Valor para cada serie
                            var data = consumoData.map(item => {
                                var rangoAnterior = acumulado;
                                acumulado += item.consumoUF_Valor;
                                return {
                                    name: consumo + ' (' + item.consumoUF_Valor + ' PJ)',
                                    low: rangoAnterior,
                                    high: acumulado,
                                    color: getColorForConsumo(consumo, nombre)  // Agrega una función para obtener el color
                                };
                            });

                            // Agregar las categorías para cada etapa del acumulado
                            categoriasX = categoriasX.concat(data);
                            console.log("Categorias x: ", consumo);
                        }

                        // Crear la gráfica con Highcharts
                        Highcharts.chart('newChartContainer', {
                            chart: {
                                type: 'columnrange'
                            },
                            title: {
                                text: 'Consumo Acumulado por ' + nombre + ' en ' + año + ''
                            },
                            xAxis: {
                                categories: categoriasX,
                                labels: {
                                    formatter: function () {
                                        return this.value.name;  // Mostrar solo el nombre del consumo en el eje x
                                    }
                                }
                            },
                            yAxis: {
                                title: {
                                    text: 'Total de Consumo'
                                }
                            },
                            tooltip: {
                                valueSuffix: ' PJ', // Ajusta según tus necesidades
                                formatter: function () {
                                    return '<b>' + this.point.name + '</b>: ' + this.point.low + ' - ' + this.point.high + ' PJ';
                                }
                            },
                            series: [{
                                data: categoriasX,
                                showInLegend: false  // Esto evita que aparezca en la leyenda
                            }]
                        });

                        // Mostrar el botón de regresar
                        $('#regresarSankeyButton').show();

                        // Añadir un manejador de eventos para el botón de regresar
                        $('#regresarSankeyButton').click(function () {
                            var contenedorAdicional = document.getElementById("highchartsContainer");
                            var contenedorAdicional2 = document.getElementById("playButton");
                            var contenedorAdicional3 = document.getElementById("yearSlider");
                            var contenedorAdicional4 = document.getElementById("newChartContainer");

                            // Ocultar la sección actual de gráficos y controles
                            contenedorAdicional.style.display = "none";
                            contenedorAdicional2.style.display = "none";
                            contenedorAdicional3.style.display = "none";
                            contenedorAdicional4.style.display = "none";

                            // Ocultar el botón de regresar
                            $('#regresarSankeyButton').hide();

                            // Desplazarse de nuevo a la sección de Sankey
                            var sankeySection = document.getElementById("sankeySvg");
                            sankeySection.scrollIntoView({ behavior: "smooth", block: "start", inline: "nearest" });
                        });
                    }
                });
            });
        }
        //let nodes = [];
        //let enlaces = [];
        //Nodos Excluidos del evento lcik
        const excludedNodes = [
            800,
            801,
            802,
            803,
            804,
            805,
        ];


        class NodoUsoFinal{
            constructor(
                id,
                nombre,
                y,
                hogares,
                transporte,
                serPubCom,
                agricultura,
                industrial,
                sectorEnergia,
                año,
                color,
                imgSrc,
                nodes,
                enlaces,
                x = 1517,  
                width = 70,
                height = 20,
                imgco2 = "/img/co2.png",
                tooltipPosition = "bottom"
            ){
                this.id = id;
                this.nombre = nombre;
                this.y = y;
                this.hogares = hogares;
                this.transporte = transporte;
                this.serPubCom = serPubCom;
                this.agricultura = agricultura;
                this.industrial = industrial;
                this.sectorEnergia = sectorEnergia;
                this.año = año;
                this.x = x;
                this.color = color;
                this.imgSrc = imgSrc;
                this.imgco2 = imgco2;
                this.nodes = nodes;
                this.enlaces = enlaces;
                this.width = width;
                this.height = height;
                this.tooltipPosition = tooltipPosition;
                this.draw(document.getElementById("sankeySvg"));
            }
            draw(svgElement) {
                //const svgContainer = document.getElementById("sankeySvg").innerHTML='';
                //svgElement.innerHTML='';
                this.group = document.createElementNS(
                    "http://www.w3.org/2000/svg",
                    "g"
                );

                this.group.setAttribute("id", this.id);
                const rect = document.createElementNS(
                    "http://www.w3.org/2000/svg",
                    "rect"
                );


                rect.setAttribute("x", this.x);
                rect.setAttribute("y", this.y);
                rect.setAttribute("width", this.width);
                rect.setAttribute("height", this.height);
                rect.setAttribute("fill", this.color);
                rect.setAttribute("rx", "5"); // Redondear las esquinas horizontalmente
                rect.setAttribute("ry", "5"); // Redondear las esquinas verticalmente
                rect.setAttribute("id", this.id + "_rect");
                rect.setAttribute("class", "nodeRect"); // Añadir la clase

                
                this.group.appendChild(rect);


                const textValue = document.createElementNS(
                    "http://www.w3.org/2000/svg",
                    "text"
                );
                
                textValue.setAttribute("x", this.x + this.width / 2);
                textValue.setAttribute("y", this.y - 10);
                textValue.setAttribute("text-anchor", "middle");
                textValue.setAttribute("class", "nodeValue"); // Añadir la clase
                if(this.nombre === "Hogares"){
                    textValue.textContent = this.hogares + " PJ";
                } else if(this.nombre === "Transporte"){
                    textValue.textContent = this.transporte + " PJ";
                } else if(this.nombre === "Serv. Púb. y Com."){
                    textValue.textContent = this.serPubCom + " PJ";
                } else if(this.nombre === "Agricultura"){
                    textValue.textContent = this.agricultura + " PJ";
                } else if(this.nombre === "Industrial"){
                    textValue.textContent = this.industrial + " PJ";
                } else{
                    textValue.textContent = this.sectorEnergia + " PJ";
                }
                
                
                this.group.appendChild(textValue);


                const textName = document.createElementNS(
                    "http://www.w3.org/2000/svg",
                    "text"
                );

           
                
                
                textName.setAttribute("x", this.x + this.width / 2);
                textName.setAttribute("y", this.y - 25);
                textName.setAttribute("text-anchor", "middle");
                textName.textContent = this.nombre;
                textName.setAttribute("class", "nodeName"); // Añadir la clase
                this.group.appendChild(textName);



                if (this.imgSrc) {
                    const image = document.createElementNS(
                        "http://www.w3.org/2000/svg",
                        "image"
                    );
                    image.setAttribute("x", this.x);
                    image.setAttribute("y", this.y);
                    image.setAttribute("width", this.width); // Ajustar al ancho del nodo
                    image.setAttribute("height", this.height); // Ajustar al alto del nodo
                    image.setAttributeNS(
                        "http://www.w3.org/1999/xlink",
                        "xlink:href",
                        this.imgSrc
                    );
                    this.group.appendChild(image);
                }


                svgElement.appendChild(this.group);
  
    
                this.addEventListeners();
            }

            showTooltip(group, tooltipInfo) {
                console.log("showTooltip called for node with id:", tooltipInfo.id);

                let tooltip = document.getElementById(tooltipInfo.id + "_tooltip");

                if (!tooltip) {
                    tooltip = document.createElementNS("http://www.w3.org/2000/svg", "g");
                    tooltip.setAttribute("id", tooltipInfo.id + "_tooltip");
                    tooltip.setAttribute("class", "infoBox");

                    const rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");

                    // Posicionamiento basado en tooltipPosition
                    rect.setAttribute("x", tooltipInfo.x);
                    rect.setAttribute("y", tooltipInfo.y);
                    rect.setAttribute("width", tooltipInfo.width);
                    rect.setAttribute("height", tooltipInfo.height);
                    rect.setAttribute("fill", "#FFF");
                    rect.setAttribute("rx", "5");
                    rect.setAttribute("ry", "5");
                    tooltip.appendChild(rect);

                    let offsetY = 20;
                    for (let i = 0; i < 1; i++) {
                        const square = document.createElementNS("http://www.w3.org/2000/svg", "rect");
                        square.setAttribute("x", parseFloat(rect.getAttribute("x")) + 5);
                        square.setAttribute("y", parseFloat(rect.getAttribute("y")) + offsetY - 7);
                        square.setAttribute("width", 6);
                        square.setAttribute("height", 6);
                        square.setAttribute("class", "tooltipBullet");
                        tooltip.appendChild(square);      

                        const text = document.createElementNS("http://www.w3.org/2000/svg", "text");
                        text.setAttribute("x", parseFloat(rect.getAttribute("x")) + 20);
                        text.setAttribute("y", parseFloat(rect.getAttribute("y")) + offsetY - 1.5);
                        text.textContent = tooltipInfo.label + ": " + tooltipInfo.value;
                        text.setAttribute("class", "tooltipText");
                        tooltip.appendChild(text);

                        const square2 = document.createElementNS("http://www.w3.org/2000/svg", "rect");
                        square2.setAttribute("x", parseFloat(rect.getAttribute("x")) + 5);
                        square2.setAttribute("y", parseFloat(rect.getAttribute("y")) + offsetY - 7 + 20);
                        square2.setAttribute("width", 6);
                        square2.setAttribute("height", 6);
                        square2.setAttribute("class", "tooltipBullet");
                        tooltip.appendChild(square2);      

                        const text2 = document.createElementNS("http://www.w3.org/2000/svg", "text");
                        text2.setAttribute("x", parseFloat(rect.getAttribute("x")) + 20);
                        text2.setAttribute("y", parseFloat(rect.getAttribute("y")) + offsetY - 1.5 + 20);
                        text2.textContent = tooltipInfo.label2 + ": " + tooltipInfo.value2;
                        text2.setAttribute("class", "tooltipText");
                        tooltip.appendChild(text2);
                        offsetY += 40;
                    }
                    group.appendChild(tooltip);
                }

                tooltip.style.visibility = "visible";
            }

            hideTooltip(tooltipId) {

                const tooltip = document.getElementById(tooltipId);
                if (tooltip) {
                    tooltip.style.visibility = "hidden";
                }
            }

            addEventListeners(nodes, enlaces) {
                // Mantén tus eventos de mouseover y mouseout intactos
                this.group.addEventListener("mouseover", (evt) => {
                    this.showTooltip(this.group, {
                        id: this.id,
                        x: this.x + this.width + 5,
                        y: this.y - 18,
                        width: this.width,
                        height: 50,
                        label: "IMP",
                        value: 0,
                        label2: "EXP",
                        value2: 0,  
                    });
                });

                this.group.addEventListener("mouseout", (evt) => {
                    this.hideTooltip(this.id + "_tooltip");
                });


                //Para Resaltar u Opacar los nodos
                // Al hacer clic en un nodo

                // Verificar si el nodo no está en la lista de nodos excluidos antes de asignar el manejador de eventos
                if (!excludedNodes.includes(this.id)) {
                    this.group.addEventListener("click", (evt) => {
                        nodes.forEach((n) => (n.group.style.opacity = 0.1));
                        enlaces.forEach((link) => {
                            if (!link.pathElement) {
                                console.error("Enlace sin pathElement:", link);
                            } else {
                                link.pathElement.style.opacity = 0.1; // Opacar link
                                if (link.particles) {
                                    link.particles.forEach((particle) => {
                                        particle.style.opacity = 0.1;
                                    });
                                }
                            }
                        });

                        // Resaltar el nodo seleccionado
                        this.group.style.opacity = 1;

                        // Llamar a la función de iluminación descendente
                        highlightDescendantsByParticleColors(this, enlaces);
                        evt.stopPropagation(); 

                    }); 
                } else{
                    this.group.addEventListener("click", () => {
                            ajustarAlturaContenedorAdicional(this.nombre, this.año);
                            console.log("Se ha dado click al nodo: ", this.nombre);
                    });
                }
            }
        }


        class NodoDistribucion{
            constructor(
                id,
                nombre,
                y,
                x,
                dist,
                rnt,
                color,
                imgSrc,
                nodes,
                enlaces, 
                width = 70,
                height = 70,
                tooltipPosition = "bottom"
            ){
                this.id = id;
                this.nombre = nombre;
                this.y = y;
                this.x = x;
                this.dist = dist;
                this.rnt = rnt;
                this.color = color;
                this.imgSrc = imgSrc;
                this.nodes = nodes;
                this.enlaces = enlaces;
                this.width = width;
                this.height = height;
                this.tooltipPosition = tooltipPosition;
                this.draw(document.getElementById("sankeySvg"));
            }
            draw(svgElement) {
                //const svgContainer = document.getElementById("sankeySvg").innerHTML='';
                //svgElement.innerHTML='';
                let f = 0;
                this.group = document.createElementNS(
                    "http://www.w3.org/2000/svg",
                    "g"
                );

                this.group.setAttribute("id", this.id);
                const rect = document.createElementNS(
                    "http://www.w3.org/2000/svg",
                    "rect"
                );


                rect.setAttribute("x", this.x);
                rect.setAttribute("y", this.y);
                rect.setAttribute("width", this.width);
                rect.setAttribute("height", this.height);
                rect.setAttribute("fill", this.color);
                rect.setAttribute("rx", "5"); // Redondear las esquinas horizontalmente
                rect.setAttribute("ry", "5"); // Redondear las esquinas verticalmente
                rect.setAttribute("id", this.id + "_rect");
                rect.setAttribute("class", "nodeRect"); // Añadir la clase

                
                
                
                this.group.appendChild(rect);


                const textValue = document.createElementNS(
                    "http://www.w3.org/2000/svg",
                    "text"
                );
                    textValue.setAttribute("x", this.x + this.width / 2);
                    textValue.setAttribute("y", this.y - 10);
                    textValue.setAttribute("text-anchor", "middle");
                    textValue.setAttribute("class", "nodeValue"); // Añadir la clase
                    if(this.nombre === "Distribución"){
                        textValue.textContent = this.dist + " PJ";
                    } else{
                        textValue.textContent = this.rnt + " PJ";
                    }
                
                this.group.appendChild(textValue);


                const textName = document.createElementNS(
                    "http://www.w3.org/2000/svg",
                    "text"
                );
                
                    textName.setAttribute("x", this.x + this.width / 2);
                    textName.setAttribute("y", this.y - 25);
                    textName.setAttribute("text-anchor", "middle");
                    textName.textContent = this.nombre;
                    textName.setAttribute("class", "nodeName"); // Añadir la clase
                    this.group.appendChild(textName);


                if (this.imgSrc) {
                    const image = document.createElementNS(
                        "http://www.w3.org/2000/svg",
                        "image"
                    );
                    image.setAttribute("x", this.x);
                    image.setAttribute("y", this.y);
                    image.setAttribute("width", this.width); // Ajustar al ancho del nodo
                    image.setAttribute("height", this.height); // Ajustar al alto del nodo
                    image.setAttributeNS(
                        "http://www.w3.org/1999/xlink",
                        "xlink:href",
                        this.imgSrc
                    );
                    this.group.appendChild(image);
                }


                svgElement.appendChild(this.group);
  
    
                this.addEventListeners();
            }

            showTooltip(group, tooltipInfo) {
                console.log("showTooltip called for node with id:", tooltipInfo.id);

                let tooltip = document.getElementById(tooltipInfo.id + "_tooltip");

                if (!tooltip) {
                    tooltip = document.createElementNS("http://www.w3.org/2000/svg", "g");
                    tooltip.setAttribute("id", tooltipInfo.id + "_tooltip");
                    tooltip.setAttribute("class", "infoBox");

                    const rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");

                    // Posicionamiento basado en tooltipPosition
                    rect.setAttribute("x", tooltipInfo.x);
                    rect.setAttribute("y", tooltipInfo.y);
                    rect.setAttribute("width", tooltipInfo.width);
                    rect.setAttribute("height", tooltipInfo.height);
                    rect.setAttribute("fill", "#FFF");
                    rect.setAttribute("rx", "5");
                    rect.setAttribute("ry", "5");
                    tooltip.appendChild(rect);

                    let offsetY = 20;
                    for (let i = 0; i < 1; i++) {
                        const square = document.createElementNS("http://www.w3.org/2000/svg", "rect");
                        square.setAttribute("x", parseFloat(rect.getAttribute("x")) + 5);
                        square.setAttribute("y", parseFloat(rect.getAttribute("y")) + offsetY - 7);
                        square.setAttribute("width", 6);
                        square.setAttribute("height", 6);
                        square.setAttribute("class", "tooltipBullet");
                        tooltip.appendChild(square);      

                        const text = document.createElementNS("http://www.w3.org/2000/svg", "text");
                        text.setAttribute("x", parseFloat(rect.getAttribute("x")) + 20);
                        text.setAttribute("y", parseFloat(rect.getAttribute("y")) + offsetY - 1.5);
                        text.textContent = tooltipInfo.label + ": " + tooltipInfo.value;
                        text.setAttribute("class", "tooltipText");
                        tooltip.appendChild(text);

                        const square2 = document.createElementNS("http://www.w3.org/2000/svg", "rect");
                        square2.setAttribute("x", parseFloat(rect.getAttribute("x")) + 5);
                        square2.setAttribute("y", parseFloat(rect.getAttribute("y")) + offsetY - 7 + 20);
                        square2.setAttribute("width", 6);
                        square2.setAttribute("height", 6);
                        square2.setAttribute("class", "tooltipBullet");
                        tooltip.appendChild(square2);      

                        const text2 = document.createElementNS("http://www.w3.org/2000/svg", "text");
                        text2.setAttribute("x", parseFloat(rect.getAttribute("x")) + 20);
                        text2.setAttribute("y", parseFloat(rect.getAttribute("y")) + offsetY - 1.5 + 20);
                        text2.textContent = tooltipInfo.label2 + ": " + tooltipInfo.value2;
                        text2.setAttribute("class", "tooltipText");
                        tooltip.appendChild(text2);
                        offsetY += 40;
                    }
                    group.appendChild(tooltip);
                }

                tooltip.style.visibility = "visible";
            }

            hideTooltip(tooltipId) {

                const tooltip = document.getElementById(tooltipId);
                if (tooltip) {
                    tooltip.style.visibility = "hidden";
                }
            }

            addEventListeners(nodes, enlaces) {
                // Mantén tus eventos de mouseover y mouseout intactos
                this.group.addEventListener("mouseover", (evt) => {
                    this.showTooltip(this.group, {
                        id: this.id,
                        x: this.x,
                        y: this.y + this.height + 5,
                        width: this.width,
                        height: 50,
                        label: "IMP",
                        value: 0,
                        label2: "EXP",
                        value2: 0,  
                    });
                });

                this.group.addEventListener("mouseout", (evt) => {
                    this.hideTooltip(this.id + "_tooltip");
                });


                //Para Resaltar u Opacar los nodos
                // Al hacer clic en un nodo

                // Verificar si el nodo no está en la lista de nodos excluidos antes de asignar el manejador de eventos
                if (!excludedNodes.includes(this.id)) {
                    this.group.addEventListener("click", (evt) => {
                        nodes.forEach((n) => (n.group.style.opacity = 0.1));
                        enlaces.forEach((link) => {
                            if (!link.pathElement) {
                                console.error("Enlace sin pathElement:", link);
                            } else {
                                link.pathElement.style.opacity = 0.1; // Opacar link
                                if (link.particles) {
                                    link.particles.forEach((particle) => {
                                        particle.style.opacity = 0.1;
                                    });
                                }
                            }
                        });

                        // Resaltar el nodo seleccionado
                        this.group.style.opacity = 1;

                        // Llamar a la función de iluminación descendente
                        highlightDescendantsByParticleColors(this, enlaces);
                        evt.stopPropagation(); 

                    }); 
                }
            }
        }

        class NodoTiposEnergia{
            constructor(
                id,
                nombre,
                y,
                cargaPico, 
                intermitente, 
                cargaBase, 
                gasSeco,
                gasLP,
                petroliferos,
                color,
                imgSrc,
                nodes,
                enlaces,
                x = 1160,  
                width = 70,
                height = 30,
                tooltipPosition = "bottom"
            ){
                this.id = id;
                this.nombre = nombre;
                this.y = y;
                this.cargaPico = cargaPico; 
                this.intermitente = intermitente; 
                this.cargaBase = cargaBase; 
                this.gasSeco = gasSeco;
                this.gasLP = gasLP;
                this.petroliferos = petroliferos;
                this.x = x;
                this.color = color;
                this.imgSrc = imgSrc;
                this.nodes = nodes;
                this.enlaces = enlaces;
                this.width = width;
                this.height = height;
                this.tooltipPosition = tooltipPosition;
                this.draw(document.getElementById("sankeySvg"));
            }
            draw(svgElement) {
                //const svgContainer = document.getElementById("sankeySvg").innerHTML='';
                //svgElement.innerHTML='';
                let f = 0;
                this.group = document.createElementNS(
                    "http://www.w3.org/2000/svg",
                    "g"
                );

                this.group.setAttribute("id", this.id);
                const rect = document.createElementNS(
                    "http://www.w3.org/2000/svg",
                    "rect"
                );


                rect.setAttribute("x", this.x);
                rect.setAttribute("y", this.y);
                rect.setAttribute("width", this.width);
                rect.setAttribute("height", this.height);
                rect.setAttribute("fill", this.color);
                rect.setAttribute("rx", "5"); // Redondear las esquinas horizontalmente
                rect.setAttribute("ry", "5"); // Redondear las esquinas verticalmente
                rect.setAttribute("id", this.id + "_rect");
                rect.setAttribute("class", "nodeRect"); // Añadir la clase

                
                
                
                this.group.appendChild(rect);


                const textValue = document.createElementNS(
                    "http://www.w3.org/2000/svg",
                    "text"
                );
                
                textValue.setAttribute("x", this.x + this.width / 2);
                textValue.setAttribute("y", this.y - 10);
                textValue.setAttribute("text-anchor", "middle");
                textValue.setAttribute("class", "nodeValue"); // Añadir la clase

                if(this.nombre === "Carga Pico"){
                    textValue.textContent = this.cargaPico + " PJ";
                } else if(this.nombre === "Intermitente"){
                    textValue.textContent = this.intermitente + " PJ";
                } else if(this.nombre === "Carga Base"){
                    textValue.textContent = this.cargaBase + " PJ";
                } else if(this.nombre === "Gas Seco"){
                    textValue.textContent = this.gasSeco + " PJ";
                } else if(this.nombre === "Gas LP"){
                    textValue.textContent = this.gasLP + " PJ";
                } else{
                    textValue.textContent = this.petroliferos + " PJ";
                }
                
                
                this.group.appendChild(textValue);


                const textName = document.createElementNS(
                    "http://www.w3.org/2000/svg",
                    "text"
                );

           
                
                
                textName.setAttribute("x", this.x + this.width / 2);
                textName.setAttribute("y", this.y - 25);
                textName.setAttribute("text-anchor", "middle");
                textName.textContent = this.nombre;
                textName.setAttribute("class", "nodeName"); // Añadir la clase
                this.group.appendChild(textName);



                if (this.imgSrc) {
                    const image = document.createElementNS(
                        "http://www.w3.org/2000/svg",
                        "image"
                    );
                    image.setAttribute("x", this.x);
                    image.setAttribute("y", this.y);
                    image.setAttribute("width", this.width); // Ajustar al ancho del nodo
                    image.setAttribute("height", this.height); // Ajustar al alto del nodo
                    image.setAttributeNS(
                        "http://www.w3.org/1999/xlink",
                        "xlink:href",
                        this.imgSrc
                    );
                    this.group.appendChild(image);
                }


                svgElement.appendChild(this.group);
  
    
                this.addEventListeners();
            }

            showTooltip(group, tooltipInfo) {
                console.log("showTooltip called for node with id:", tooltipInfo.id);

                let tooltip = document.getElementById(tooltipInfo.id + "_tooltip");

                if (!tooltip) {
                    tooltip = document.createElementNS("http://www.w3.org/2000/svg", "g");
                    tooltip.setAttribute("id", tooltipInfo.id + "_tooltip");
                    tooltip.setAttribute("class", "infoBox");

                    const rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");

                    // Posicionamiento basado en tooltipPosition
                    rect.setAttribute("x", tooltipInfo.x);
                    rect.setAttribute("y", tooltipInfo.y);
                    rect.setAttribute("width", tooltipInfo.width);
                    rect.setAttribute("height", tooltipInfo.height);
                    rect.setAttribute("fill", "#FFF");
                    rect.setAttribute("rx", "5");
                    rect.setAttribute("ry", "5");
                    tooltip.appendChild(rect);

                    let offsetY = 20;
                    for (let i = 0; i < 1; i++) {
                        const square = document.createElementNS("http://www.w3.org/2000/svg", "rect");
                        square.setAttribute("x", parseFloat(rect.getAttribute("x")) + 5);
                        square.setAttribute("y", parseFloat(rect.getAttribute("y")) + offsetY - 7);
                        square.setAttribute("width", 6);
                        square.setAttribute("height", 6);
                        square.setAttribute("class", "tooltipBullet");
                        tooltip.appendChild(square);      

                        const text = document.createElementNS("http://www.w3.org/2000/svg", "text");
                        text.setAttribute("x", parseFloat(rect.getAttribute("x")) + 20);
                        text.setAttribute("y", parseFloat(rect.getAttribute("y")) + offsetY - 1.5);
                        text.textContent = tooltipInfo.label + ": " + tooltipInfo.value;
                        text.setAttribute("class", "tooltipText");
                        tooltip.appendChild(text);
                        offsetY += 40;
                    }
                    group.appendChild(tooltip);
                }

                tooltip.style.visibility = "visible";
            }

            hideTooltip(tooltipId) {

                const tooltip = document.getElementById(tooltipId);
                if (tooltip) {
                    tooltip.style.visibility = "hidden";
                }
            }

            addEventListeners(nodes, enlaces) {
                // Mantén tus eventos de mouseover y mouseout intactos
                if(this.id <= 602){
                    this.group.addEventListener("mouseover", (evt) => {
                        this.showTooltip(this.group, {
                            id: this.id,
                            x: this.x,
                            y: 275,
                            width: this.width + 100,
                            height: 30,
                            label: "SUMA TOTAL",
                            value: this.petroliferos + this.gasSeco + this.gasLP, 
                        });
                    });
                } else {
                    this.group.addEventListener("mouseover", (evt) => {
                        this.showTooltip(this.group, {
                            id: this.id,
                            x: this.x,
                            y: 810,
                            width: this.width + 50,
                            height: 30,
                            label: "SUMA TOTAL",
                            value: this.cargaPico + this.cargaBase + this.intermitente, 
                        });
                    });
                }

                this.group.addEventListener("mouseout", (evt) => {
                    this.hideTooltip(this.id + "_tooltip");
                });


                //Para Resaltar u Opacar los nodos
                // Al hacer clic en un nodo

                // Verificar si el nodo no está en la lista de nodos excluidos antes de asignar el manejador de eventos
                if (!excludedNodes.includes(this.id)) {
                    this.group.addEventListener("click", (evt) => {
                        nodes.forEach((n) => (n.group.style.opacity = 0.1));
                        enlaces.forEach((link) => {
                            if (!link.pathElement) {
                                console.error("Enlace sin pathElement:", link);
                            } else {
                                link.pathElement.style.opacity = 0.1; // Opacar link
                                if (link.particles) {
                                    link.particles.forEach((particle) => {
                                        particle.style.opacity = 0.1;
                                    });
                                }
                            }
                        });

                        // Resaltar el nodo seleccionado
                        this.group.style.opacity = 1;

                        // Llamar a la función de iluminación descendente
                        highlightDescendantsByParticleColors(this, enlaces);
                        evt.stopPropagation(); 

                    }); 
                }
            }
        }

        class NodoTransformacionTotal{
            constructor(
                id,
                y,
                contPetro,
                contCent,
                petro,
                cent,
                nodes,
                enlaces,
                x = 980,  
                color = getColorFromNombre(petro),
                imgSrc = getImageFromNombre(petro),
                imgSrc2 = getImageFromNombre(cent),
                width = 70,
                height = 30,
                tooltipPosition = "bottom"
            ){
                this.contPetro = contPetro;
                this.contCent = contCent;
                this.petro = petro,
                this.cent = cent,
                this.nodes = nodes;
                this.enlaces = enlaces;
                this.id = id;
                this.x = x;
                this.y = y;
                this.color = color;
                if(id === 500){
                    this.imgSrc = imgSrc;
                } else{
                    this.imgSrc = imgSrc2;
                }
                this.width = width;
                this.height = height;
                this.tooltipPosition = tooltipPosition;
                this.draw(document.getElementById("sankeySvg"));
            }
            draw(svgElement) {
                //const svgContainer = document.getElementById("sankeySvg").innerHTML='';
                //svgElement.innerHTML='';
                this.group = document.createElementNS(
                    "http://www.w3.org/2000/svg",
                    "g"
                );

                this.group.setAttribute("id", this.id);
                const rect = document.createElementNS(
                    "http://www.w3.org/2000/svg",
                    "rect"
                );
                rect.setAttribute("x", this.x);
                rect.setAttribute("y", this.y);
                rect.setAttribute("width", this.width);
                rect.setAttribute("height", this.height);
                rect.setAttribute("fill", this.color);
                rect.setAttribute("rx", "5"); // Redondear las esquinas horizontalmente
                rect.setAttribute("ry", "5"); // Redondear las esquinas verticalmente
                rect.setAttribute("id", this.id + "_rect");
                rect.setAttribute("class", "nodeRect"); // Añadir la clase

     
                
                this.group.appendChild(rect);


                const textValue = document.createElementNS(
                    "http://www.w3.org/2000/svg",
                    "text"
                );
                
                textValue.setAttribute("x", this.x + this.width / 2);
                textValue.setAttribute("y", this.y - 10);
                textValue.setAttribute("text-anchor", "middle");
                textValue.setAttribute("class", "nodeValue"); // Añadir la clase
                if(this.id === 500){
                    textValue.textContent = this.contPetro + " PJ";
                } else{
                    textValue.textContent = this.contCent + " PJ";
                }
                
                
                this.group.appendChild(textValue);


                const textName = document.createElementNS(
                    "http://www.w3.org/2000/svg",
                    "text"
                );

           
                
                
                textName.setAttribute("x", this.x + this.width / 2);
                textName.setAttribute("y", this.y - 25);
                textName.setAttribute("text-anchor", "middle");
                if (this.id === 500){
                    textName.textContent = this.petro;
                } else{
                    textName.textContent = this.cent;
                }
                textName.setAttribute("class", "nodeName"); // Añadir la clase
                this.group.appendChild(textName);




                if (this.imgSrc) {
                    const image = document.createElementNS(
                        "http://www.w3.org/2000/svg",
                        "image"
                    );
                    image.setAttribute("x", this.x);
                    image.setAttribute("y", this.y);
                    image.setAttribute("width", this.width); // Ajustar al ancho del nodo
                    image.setAttribute("height", this.height); // Ajustar al alto del nodo
                    image.setAttributeNS(
                        "http://www.w3.org/1999/xlink",
                        "xlink:href",
                        this.imgSrc
                    );
                    this.group.appendChild(image);
                }


                svgElement.appendChild(this.group);
    
                this.addEventListeners();
            }

            showTooltip(group, tooltipInfo) {
                console.log("showTooltip called for node with id:", tooltipInfo.id);

                let tooltip = document.getElementById(tooltipInfo.id + "_tooltip");

                if (!tooltip) {
                    tooltip = document.createElementNS("http://www.w3.org/2000/svg", "g");
                    tooltip.setAttribute("id", tooltipInfo.id + "_tooltip");
                    tooltip.setAttribute("class", "infoBox");

                    const rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");

                    // Posicionamiento basado en tooltipPosition
                    rect.setAttribute("x", tooltipInfo.x);
                    rect.setAttribute("y", tooltipInfo.y);
                    rect.setAttribute("width", tooltipInfo.width);
                    rect.setAttribute("height", tooltipInfo.height);
                    rect.setAttribute("fill", "#FFF");
                    rect.setAttribute("rx", "5");
                    rect.setAttribute("ry", "5");
                    tooltip.appendChild(rect);

                    let offsetY = 20;
                    for (let i = 0; i < 1; i++) {
                        const square = document.createElementNS("http://www.w3.org/2000/svg", "rect");
                        square.setAttribute("x", parseFloat(rect.getAttribute("x")) + 5);
                        square.setAttribute("y", parseFloat(rect.getAttribute("y")) + offsetY - 7);
                        square.setAttribute("width", 6);
                        square.setAttribute("height", 6);
                        square.setAttribute("class", "tooltipBullet");
                        tooltip.appendChild(square);      

                        const text = document.createElementNS("http://www.w3.org/2000/svg", "text");
                        text.setAttribute("x", parseFloat(rect.getAttribute("x")) + 20);
                        text.setAttribute("y", parseFloat(rect.getAttribute("y")) + offsetY - 1.5);
                        text.textContent = tooltipInfo.label + ": " + tooltipInfo.value;
                        text.setAttribute("class", "tooltipText");
                        tooltip.appendChild(text);

                            const square2 = document.createElementNS("http://www.w3.org/2000/svg", "rect");
                            square2.setAttribute("x", parseFloat(rect.getAttribute("x")) + 5);
                            square2.setAttribute("y", parseFloat(rect.getAttribute("y")) + offsetY - 7 + 20);
                            square2.setAttribute("width", 6);
                            square2.setAttribute("height", 6);
                            square2.setAttribute("class", "tooltipBullet");
                            tooltip.appendChild(square2);      

                            const text2 = document.createElementNS("http://www.w3.org/2000/svg", "text");
                            text2.setAttribute("x", parseFloat(rect.getAttribute("x")) + 20);
                            text2.setAttribute("y", parseFloat(rect.getAttribute("y")) + offsetY - 1.5 + 20);
                            text2.textContent = tooltipInfo.label2 + ": " + tooltipInfo.value2;
                            text2.setAttribute("class", "tooltipText");
                            tooltip.appendChild(text2);

                        offsetY += 40;
                    }
                    group.appendChild(tooltip);
                }

                tooltip.style.visibility = "visible";
            }

            hideTooltip(tooltipId) {

                const tooltip = document.getElementById(tooltipId);
                if (tooltip) {
                    tooltip.style.visibility = "hidden";
                }
            }

            addEventListeners(nodes, enlaces) {
                // Mantén tus eventos de mouseover y mouseout intactos
                this.group.addEventListener("mouseover", (evt) => {
                    this.showTooltip(this.group, {
                        id: this.id,
                        x: this.x,
                        y: this.y + this.height + 5,
                        width: this.width,
                        height: 50,
                        label: "IMP",
                        value: 0, //Ejemplo
                        label2: "EXP",
                        value2: 0, //Ejemplo
                    });
                });

                this.group.addEventListener("mouseout", (evt) => {
                    this.hideTooltip(this.id + "_tooltip");
                });


                //Para Resaltar u Opacar los nodos
                // Al hacer clic en un nodo

                // Verificar si el nodo no está en la lista de nodos excluidos antes de asignar el manejador de eventos
                if (!excludedNodes.includes(this.id)) {
                    this.group.addEventListener("click", (evt) => {
                        nodes.forEach((n) => (n.group.style.opacity = 0.1));
                        enlaces.forEach((link) => {
                            if (!link.pathElement) {
                                console.error("Enlace sin pathElement:", link);
                            } else {
                                link.pathElement.style.opacity = 0.1; // Opacar link
                                if (link.particles) {
                                    link.particles.forEach((particle) => {
                                        particle.style.opacity = 0.1;
                                    });
                                }
                            }
                        });

                        // Resaltar el nodo seleccionado
                        this.group.style.opacity = 1;

                        // Llamar a la función de iluminación descendente
                        highlightDescendantsByParticleColors(this, enlaces);
                        evt.stopPropagation(); 

                    }); 
                }
            }
        }


        class NodoTransformacion {
            constructor(
                id,
                nombre,
                tipo,
                valor,
                color,
                y,
                nodes,
                enlaces,
                x = 810,
                imgSrc = getImageFromNombre(nombre),
                width = 70,
                height = 20,
                imgflecha = "/img/rr4.png",
                imgco2 = "/img/co2.png",
                tooltipPosition = "bottom", // Valor por defecto es 'bottom'
            ) {
                this.id = id;
                this.x = x;
                this.y = y;
                this.nodes = nodes;
                this.enlaces = enlaces;
                this.nombre = nombre;
                this.valor = valor;
                this.color = color;
                this.imgSrc = imgSrc;
                this.imgflecha = imgflecha;
                this.imgco2 = imgco2;
                this.width = width;
                this.height = height;
                this.tooltipPosition = tooltipPosition;
                this.draw(document.getElementById("sankeySvg"));
            }
            draw(svgElement) {
                //const svgContainer = document.getElementById("sankeySvg").innerHTML='';
                //svgElement.innerHTML='';
                this.group = document.createElementNS(
                    "http://www.w3.org/2000/svg",
                    "g"
                );

                this.group.setAttribute("id", this.id);
                const rect = document.createElementNS(
                    "http://www.w3.org/2000/svg",
                    "rect"
                );

                rect.setAttribute("x", this.x);
                rect.setAttribute("y", this.y);
                rect.setAttribute("width", this.width);
                rect.setAttribute("height", this.height);
                rect.setAttribute("fill", this.color);
                rect.setAttribute("rx", "5"); // Redondear las esquinas horizontalmente
                rect.setAttribute("ry", "5"); // Redondear las esquinas verticalmente
                rect.setAttribute("id", this.id + "_rect");
                rect.setAttribute("class", "nodeRect"); // Añadir la clase
                
                
                
                this.group.appendChild(rect);


                const textValue = document.createElementNS(
                    "http://www.w3.org/2000/svg",
                    "text"
                );
                
                textValue.setAttribute("x", this.x + this.width / 2);
                textValue.setAttribute("y", this.y - 10);
                textValue.setAttribute("text-anchor", "middle");
                textValue.setAttribute("class", "nodeValue"); // Añadir la clase
                textValue.textContent = this.valor + " PJ";
     
                this.group.appendChild(textValue);

                const textName = document.createElementNS(
                    "http://www.w3.org/2000/svg",
                    "text"
                );

                
                textName.setAttribute("x", this.x + this.width / 2);
                textName.setAttribute("y", this.y - 25);
                textName.setAttribute("text-anchor", "middle");
                textName.textContent = this.nombre;
                textName.setAttribute("class", "nodeName"); // Añadir la clase
                this.group.appendChild(textName);

                if (this.imgSrc) {
                    const image = document.createElementNS(
                        "http://www.w3.org/2000/svg",
                        "image"
                    );
                    image.setAttribute("x", this.x);
                    image.setAttribute("y", this.y);
                    image.setAttribute("width", this.width); // Ajustar al ancho del nodo
                    image.setAttribute("height", this.height); // Ajustar al alto del nodo
                    image.setAttributeNS(
                        "http://www.w3.org/1999/xlink",
                        "xlink:href",
                        this.imgSrc
                    );
                    this.group.appendChild(image);
                }

                svgElement.appendChild(this.group);
    
                this.addEventListeners();
            }

            showTooltip(group, tooltipInfo) {
                console.log("showTooltip called for node with id:", tooltipInfo.id);

                let tooltip = document.getElementById(tooltipInfo.id + "_tooltip");
                if (!tooltip) {
                    tooltip = document.createElementNS("http://www.w3.org/2000/svg", "g");
                    tooltip.setAttribute("id", tooltipInfo.id + "_tooltip");
                    tooltip.setAttribute("class", "infoBox");

                    const rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");

                    // Posicionamiento basado en tooltipPosition
                    rect.setAttribute("x", tooltipInfo.x);
                    rect.setAttribute("y", tooltipInfo.y);
                    rect.setAttribute("width", tooltipInfo.width);
                    rect.setAttribute("height", tooltipInfo.height);
                    rect.setAttribute("fill", "#FFF");
                    rect.setAttribute("rx", "5");
                    rect.setAttribute("ry", "5");
                    tooltip.appendChild(rect);

                    let offsetY = 20;
                    for (let i = 0; i < 1; i++) {
                        const square = document.createElementNS(
                            "http://www.w3.org/2000/svg",
                            "rect"
                        );
                        square.setAttribute(
                            "x",
                            parseFloat(rect.getAttribute("x")) + 5
                        );
                        square.setAttribute(
                            "y",
                            parseFloat(rect.getAttribute("y")) + offsetY - 7
                        );
                        square.setAttribute("width", 6);
                        square.setAttribute("height", 6);
                        square.setAttribute("class", "tooltipBullet");
                        tooltip.appendChild(square);

                    
                        const text = document.createElementNS(
                            "http://www.w3.org/2000/svg",
                            "text"
                        );
                        text.setAttribute("x", parseFloat(rect.getAttribute("x")) + 20);
                        text.setAttribute(
                                "y",
                                parseFloat(rect.getAttribute("y")) + offsetY - 1.5
                        );
                        text.textContent = tooltipInfo.label + ": " + tooltipInfo.value;
                        text.setAttribute("class", "tooltipText");
                        tooltip.appendChild(text);                

                        const square2 = document.createElementNS(
                            "http://www.w3.org/2000/svg",
                            "rect"
                        );
                        square2.setAttribute(
                            "x",
                            parseFloat(rect.getAttribute("x")) + 5
                        );
                        square2.setAttribute(
                            "y",
                            parseFloat(rect.getAttribute("y")) + offsetY + 20 - 7
                        );
                        square2.setAttribute("width", 6);
                        square2.setAttribute("height", 6);
                        square2.setAttribute("class", "tooltipBullet");
                        tooltip.appendChild(square2);

                    
                        const text2 = document.createElementNS(
                            "http://www.w3.org/2000/svg",
                            "text"
                        );
                        text2.setAttribute("x", parseFloat(rect.getAttribute("x")) + 20);
                        text2.setAttribute(
                                "y",
                                parseFloat(rect.getAttribute("y")) + offsetY + 20 - 1.5
                        );
                        text2.textContent = tooltipInfo.label2 + ": " + tooltipInfo.value2;
                        text2.setAttribute("class", "tooltipText");
                        tooltip.appendChild(text2);                
                        offsetY += 40;
                    }
                    group.appendChild(tooltip);
                }
                tooltip.style.visibility = "visible";
            }

            hideTooltip(tooltipId) {

                const tooltip = document.getElementById(tooltipId);
                if (tooltip) {
                    tooltip.style.visibility = "hidden";
                }
            }

            addEventListeners(nodes, enlaces) {
                // Mantén tus eventos de mouseover y mouseout intactos
                if(this.id <= 408){
                    this.group.addEventListener("mouseover", (evt) => {
                        this.showTooltip(this.group, {
                            id: this.id,
                            x: this.x - this.width - 5,
                            y: this.y - 40,
                            width: this.width,
                            height: 50,
                            label: "IMP",
                            value: 0, //Ejemplo
                            label2: "EXP",
                            value2: 0, //Ejemplo
                        });
                    });
                } else{
                    this.group.addEventListener("mouseover", (evt) => {
                        this.showTooltip(this.group, {
                            id: this.id,
                            x: this.x - this.width - 5 + 50,
                            y: this.y - 50,
                            width: this.width,
                            height: 50,
                            label: "IMP",
                            value: 0, //Ejemplo
                            label2: "EXP",
                            value2: 0, //Ejemplo
                        });
                    });
                }

                this.group.addEventListener("mouseout", (evt) => {
                    this.hideTooltip(this.id + "_tooltip");
                });
              

                //Para Resaltar u Opacar los nodos
                // Al hacer clic en un nodo

                // Verificar si el nodo no está en la lista de nodos excluidos antes de asignar el manejador de eventos
                if (!excludedNodes.includes(this.id)) {
                    this.group.addEventListener("click", (evt) => {
                        nodes.forEach((n) => (n.group.style.opacity = 0.1));
                        enlaces.forEach((link) => {
                            if (!link.pathElement) {
                                console.error("Enlace sin pathElement:", link);
                            } else {
                                link.pathElement.style.opacity = 0.1; // Opacar link
                                if (link.particles) {
                                    link.particles.forEach((particle) => {
                                        particle.style.opacity = 0.1;
                                    });
                                }
                            }
                        });

                        // Resaltar el nodo seleccionado
                        this.group.style.opacity = 1;

                        // Llamar a la función de iluminación descendente
                        highlightDescendantsByParticleColors(this, enlaces);
                        evt.stopPropagation(); 

                    }); 
                }
            }
        }

        class NodoProvisionyProduccion{
            constructor(
                id,
                y,
                nombre,
                contadorCombus,
                contadorCoq,
                contadorRef,
                contadorCoqnom,
                contadorRefnom,
                contadorPlant,
                contadorPlantnom,
                contadorEl,
                nodes,
                enlaces,
                x = 590,   //630
                color = getColorFromNombre(nombre),
                imgSrc = "",
                width = 70,
                height = 30,
                tooltipPosition = "bottom"
            ){
                this.contadorCombus = contadorCombus;
                this.contadorCoq = contadorCoq;
                this.contadorRef = contadorRef;
                this.contadorCoqnom = contadorCoqnom;
                this.contadorRefnom = contadorRefnom;
                this.contadorPlant = contadorPlant;
                this.contadorPlantnom = contadorPlantnom;
                this.contadorEl = contadorEl;
                this.nodes = nodes;
                this.enlaces = enlaces;
                this.id = id;
                this.x = x;
                this.y = y;
                this.nombre = nombre;
                this.color = color;
                this.imgSrc = imgSrc;
                this.width = width;
                this.height = height;
                this.tooltipPosition = tooltipPosition;
                this.draw(document.getElementById("sankeySvg"));
            }
            draw(svgElement) {
                //const svgContainer = document.getElementById("sankeySvg").innerHTML='';
                //svgElement.innerHTML='';
                this.group = document.createElementNS(
                    "http://www.w3.org/2000/svg",
                    "g"
                );

                this.group.setAttribute("id", this.id);
                const rect = document.createElementNS(
                    "http://www.w3.org/2000/svg",
                    "rect"
                );
                rect.setAttribute("x", this.x);
                rect.setAttribute("y", this.y);
                rect.setAttribute("width", this.width);
                rect.setAttribute("height", this.height);
                rect.setAttribute("fill", this.color);
                rect.setAttribute("rx", "5"); // Redondear las esquinas horizontalmente
                rect.setAttribute("ry", "5"); // Redondear las esquinas verticalmente
                rect.setAttribute("id", this.id + "_rect");
                rect.setAttribute("class", "nodeRect"); // Añadir la clase
                
                
                
                this.group.appendChild(rect);


                const textValue = document.createElementNS(
                    "http://www.w3.org/2000/svg",
                    "text"
                );
                
                textValue.setAttribute("x", this.x + this.width / 2);
                textValue.setAttribute("y", this.y - 10);
                textValue.setAttribute("text-anchor", "middle");
                textValue.setAttribute("class", "nodeValue"); // Añadir la clase
                if(this.nombre === "Combustible"){
                    textValue.textContent = this.contadorCombus + " PJ";
                } else if (this.nombre === "Calor"){
                    textValue.textContent = this.contadorPlant + " PJ";
                } else{
                    textValue.textContent = this.contadorEl + " PJ";
                }
                
                
                
                
                
                this.group.appendChild(textValue);


                const textName = document.createElementNS(
                    "http://www.w3.org/2000/svg",
                    "text"
                );

                
                textName.setAttribute("x", this.x + this.width / 2);
                textName.setAttribute("y", this.y - 25);
                textName.setAttribute("text-anchor", "middle");
                textName.textContent = this.nombre;
                textName.setAttribute("class", "nodeName"); // Añadir la clase
                this.group.appendChild(textName);


                if (this.imgSrc) {
                    const image = document.createElementNS(
                        "http://www.w3.org/2000/svg",
                        "image"
                    );
                    image.setAttribute("x", this.x);
                    image.setAttribute("y", this.y);
                    image.setAttribute("width", this.width); // Ajustar al ancho del nodo
                    image.setAttribute("height", this.height); // Ajustar al alto del nodo
                    image.setAttributeNS(
                        "http://www.w3.org/1999/xlink",
                        "xlink:href",
                        this.imgSrc
                    );
                    this.group.appendChild(image);
                }


                svgElement.appendChild(this.group);
  
    
                this.addEventListeners();
            }

            showTooltip(group, tooltipInfo) {
                console.log("showTooltip called for node with id:", tooltipInfo.id);

                let tooltip = document.getElementById(tooltipInfo.id + "_tooltip");

                if (!tooltip) {
                    tooltip = document.createElementNS("http://www.w3.org/2000/svg", "g");
                    tooltip.setAttribute("id", tooltipInfo.id + "_tooltip");
                    tooltip.setAttribute("class", "infoBox");

                    const rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");

                    // Posicionamiento basado en tooltipPosition
                    rect.setAttribute("x", tooltipInfo.x);
                    rect.setAttribute("y", tooltipInfo.y);
                    rect.setAttribute("width", tooltipInfo.width);
                    rect.setAttribute("height", tooltipInfo.height);
                    rect.setAttribute("fill", "#FFF");
                    rect.setAttribute("rx", "5");
                    rect.setAttribute("ry", "5");
                    tooltip.appendChild(rect);

                    let offsetY = 20;
                    for (let i = 0; i < 1; i++) {
                        const square = document.createElementNS("http://www.w3.org/2000/svg", "rect");
                        square.setAttribute("x", parseFloat(rect.getAttribute("x")) + 5);
                        square.setAttribute("y", parseFloat(rect.getAttribute("y")) + offsetY - 7);
                        square.setAttribute("width", 6);
                        square.setAttribute("height", 6);
                        square.setAttribute("class", "tooltipBullet");
                        tooltip.appendChild(square);      

                        const text = document.createElementNS("http://www.w3.org/2000/svg", "text");
                        text.setAttribute("x", parseFloat(rect.getAttribute("x")) + 20);
                        text.setAttribute("y", parseFloat(rect.getAttribute("y")) + offsetY - 1.5);
                        text.textContent = tooltipInfo.label + ": " + tooltipInfo.value;
                        text.setAttribute("class", "tooltipText");
                        tooltip.appendChild(text);

                        if (tooltipInfo.id === 300){
                            const square2 = document.createElementNS("http://www.w3.org/2000/svg", "rect");
                            square2.setAttribute("x", parseFloat(rect.getAttribute("x")) + 5);
                            square2.setAttribute("y", parseFloat(rect.getAttribute("y")) + offsetY - 7 + 20);
                            square2.setAttribute("width", 6);
                            square2.setAttribute("height", 6);
                            square2.setAttribute("class", "tooltipBullet");
                            tooltip.appendChild(square2);      

                            const text2 = document.createElementNS("http://www.w3.org/2000/svg", "text");
                            text2.setAttribute("x", parseFloat(rect.getAttribute("x")) + 20);
                            text2.setAttribute("y", parseFloat(rect.getAttribute("y")) + offsetY - 1.5 + 20);
                            text2.textContent = tooltipInfo.label2 + ": " + tooltipInfo.value2;
                            text2.setAttribute("class", "tooltipText");
                            tooltip.appendChild(text2);
                        }

                        offsetY += 40;
                    }
                    group.appendChild(tooltip);
                }

                tooltip.style.visibility = "visible";
            }

            hideTooltip(tooltipId) {

                const tooltip = document.getElementById(tooltipId);
                if (tooltip) {
                    tooltip.style.visibility = "hidden";
                }
            }

            addEventListeners(nodes, enlaces) {
                // Mantén tus eventos de mouseover y mouseout intactos
                if(this.id === 300){
                    this.group.addEventListener("mouseover", (evt) => {
                        this.showTooltip(this.group, {
                            id: this.id,
                            x: this.x - 50,
                            y: this.y + this.height + 5,
                            width: this.width + 95,
                            height: 50,
                            label: this.contadorCoqnom,
                            value: this.contadorCoq,
                            label2: this.contadorRefnom,
                            value2: this.contadorRef,
                        });
                    });

                    this.group.addEventListener("mouseout", (evt) => {
                        this.hideTooltip(this.id + "_tooltip");
                    });
                } else if (this.id === 301){
                    this.group.addEventListener("mouseover", (evt) => {
                        this.showTooltip(this.group, {
                            id: this.id,
                            x: this.x - 30,
                            y: this.y + this.height + 5,
                            width: this.width + 100,
                            height: 30,
                            label: this.contadorPlantnom,
                            value: this.contadorPlant,
                        });
                    });

                    this.group.addEventListener("mouseout", (evt) => {
                        this.hideTooltip(this.id + "_tooltip");
                    });
                } else {
                    this.group.addEventListener("mouseover", (evt) => {
                        this.showTooltip(this.group, {
                            id: this.id,
                            x: this.x - 25,
                            y: this.y + this.height + 5,
                            width: this.width + 45,
                            height: 30,
                            label: "Sector eléctrico",
                            value: this.contadorEl,
                        });
                    });

                    this.group.addEventListener("mouseout", (evt) => {
                        this.hideTooltip(this.id + "_tooltip");
                    });
                }
                //Para Resaltar u Opacar los nodos
                // Al hacer clic en un nodo

                // Verificar si el nodo no está en la lista de nodos excluidos antes de asignar el manejador de eventos
                if (!excludedNodes.includes(this.id)) {
                    this.group.addEventListener("click", (evt) => {
                        nodes.forEach((n) => (n.group.style.opacity = 0.1));
                        enlaces.forEach((link) => {
                            if (!link.pathElement) {
                                console.error("Enlace sin pathElement:", link);
                            } else {
                                link.pathElement.style.opacity = 0.1; // Opacar link
                                if (link.particles) {
                                    link.particles.forEach((particle) => {
                                        particle.style.opacity = 0.1;
                                    });
                                }
                            }
                        });

                        // Resaltar el nodo seleccionado
                        this.group.style.opacity = 1;

                        // Llamar a la función de iluminación descendente
                        highlightDescendantsByParticleColors(this, enlaces);
                        evt.stopPropagation(); 

                    }); 
                }
            }
        }

        class SectorTooltip{
            constructor(
                id,
                nombre,
                y,
                imgSrc,
                pet,
                el,
                contnom,
                contval,
                nodes,
                enlaces,
                x = 450,
                width = 70,
                height = 70,
                color = "#E0E0E0",
                tooltipPosition = "bottom"
            ){
                this.nombre = nombre;
                this.pet = pet;
                this.el = el;
                this.contnom = contnom;
                this.contval = contval;
                this.nodes = nodes;
                this.enlaces = enlaces;
                this.x = x;
                this.y = y;
                this.imgSrc = imgSrc;
                this.width = width;
                this.height = height;
                this.tooltipPosition = tooltipPosition;
                this.id = id;
                this.color = color;
                this.draw(document.getElementById("sankeySvg"));
            }
            draw(svgElement){
                this.group = document.createElementNS(
                    "http://www.w3.org/2000/svg",
                    "g"
                );
                this.group.setAttribute("id", this.id);
                const rect = document.createElementNS(
                    "http://www.w3.org/2000/svg",
                    "rect"
                );
                rect.setAttribute("x", this.x);
                rect.setAttribute("y", this.y);
                rect.setAttribute("width", this.width);
                rect.setAttribute("height", this.height);
                rect.setAttribute("fill", this.color);
                rect.setAttribute("rx", "5"); // Redondear las esquinas horizontalmente
                rect.setAttribute("ry", "5"); // Redondear las esquinas verticalmente
                rect.setAttribute("id", this.id + "_rect");
                rect.setAttribute("class", "nodeRect"); // Añadir la clase
                this.group.appendChild(rect);

                const textValue = document.createElementNS(
                    "http://www.w3.org/2000/svg",
                    "text"
                );
                
                if(this.id === 200){
                    textValue.setAttribute("x", this.x + this.width / 2);
                    textValue.setAttribute("y", this.y - 10);
                    textValue.setAttribute("text-anchor", "middle");
                    textValue.setAttribute("class", "nodeValue"); // Añadir la clase
                    textValue.textContent = this.pet + " PJ";
                }else{
                    textValue.setAttribute("x", this.x + this.width / 2);
                    textValue.setAttribute("y", this.y - 10);
                    textValue.setAttribute("text-anchor", "middle");
                    textValue.setAttribute("class", "nodeValue"); // Añadir la clase
                    textValue.textContent = this.el + " PJ";
                } 
     
                this.group.appendChild(textValue);


                const textName = document.createElementNS(
                    "http://www.w3.org/2000/svg",
                    "text"
                );

                textName.setAttribute("x", this.x + this.width / 2);
                textName.setAttribute("y", this.y - 25);
                textName.setAttribute("text-anchor", "middle");
                textName.textContent = this.nombre;
                textName.setAttribute("class", "nodeName"); // Añadir la clase

                this.group.appendChild(textName);

                if (this.imgSrc) {
                    const image = document.createElementNS(
                        "http://www.w3.org/2000/svg",
                        "image"
                    );
                    image.setAttribute("x", this.x);
                    image.setAttribute("y", this.y);
                    image.setAttribute("width", this.width); // Ajustar al ancho del nodo
                    image.setAttribute("height", this.height); // Ajustar al alto del nodo
                    image.setAttributeNS(
                        "http://www.w3.org/1999/xlink",
                        "xlink:href",
                        this.imgSrc
                    );
                    this.group.appendChild(image);
                }

                svgElement.appendChild(this.group);

                
                //this.group.style.visibility = "hidden";
                //this.group2.style.visibility = "hidden";
                this.addEventListeners();
            }
           
            showTooltip(group, tooltipInfo) {
                console.log("showTooltip called for node with id:", tooltipInfo.id);

                let tooltip = document.getElementById(tooltipInfo.id + "_tooltip");

                if (!tooltip) {
                    tooltip = document.createElementNS("http://www.w3.org/2000/svg", "g");
                    tooltip.setAttribute("id", tooltipInfo.id + "_tooltip");
                    tooltip.setAttribute("class", "infoBox");

                    const rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");

                    // Posicionamiento basado en tooltipPosition
                    
                    if(tooltipInfo.id === 200){
                        rect.setAttribute("width", tooltipInfo.width);
                        rect.setAttribute("height", tooltipInfo.height);
                        rect.setAttribute("x", tooltipInfo.x - 30);
                        rect.setAttribute("y", tooltipInfo.y);
                    } else{
                        rect.setAttribute("width", tooltipInfo.width + 60);
                        rect.setAttribute("height", tooltipInfo.height + 40);
                        rect.setAttribute("x", tooltipInfo.x);
                        rect.setAttribute("y", tooltipInfo.y);
                    }
                    rect.setAttribute("fill", "#FFF");
                    rect.setAttribute("rx", "5");
                    rect.setAttribute("ry", "5");
                    tooltip.appendChild(rect);

                    let offsetY = 20;
                    for (let i = 0; i < 1; i++) {
                        if (tooltipInfo.id === 200){
                            let b = 0;
                            for (let z=0; z<6; z++){
                                const square = document.createElementNS(
                                    "http://www.w3.org/2000/svg",
                                    "rect"
                                );
                                square.setAttribute(
                                    "x",
                                    parseFloat(rect.getAttribute("x")) + 5
                                );
                                square.setAttribute(
                                    "y",
                                    parseFloat(rect.getAttribute("y")) + offsetY + b - 7
                                );
                                square.setAttribute("width", 6);
                                square.setAttribute("height", 6);
                                square.setAttribute("class", "tooltipBullet");
                                tooltip.appendChild(square);

                            
                                const text = document.createElementNS(
                                    "http://www.w3.org/2000/svg",
                                    "text"
                                );
                                text.setAttribute("x", parseFloat(rect.getAttribute("x")) + 20);
                                text.setAttribute(
                                        "y",
                                        parseFloat(rect.getAttribute("y")) + offsetY + b - 1.5
                                );
                                b = b + 20;
                                text.textContent = tooltipInfo.label[z] + ": " + tooltipInfo.value[z];
                                text.setAttribute("class", "tooltipText");
                                tooltip.appendChild(text);                
                            }
                        } else {
                            let b = 0;
                            for (let z=6; z<14; z++){
                                const square = document.createElementNS(
                                    "http://www.w3.org/2000/svg",
                                    "rect"
                                );
                                square.setAttribute(
                                    "x",
                                    parseFloat(rect.getAttribute("x")) + 5
                                );
                                square.setAttribute(
                                    "y",
                                    parseFloat(rect.getAttribute("y")) + offsetY + b - 7
                                );
                                square.setAttribute("width", 6);
                                square.setAttribute("height", 6);
                                square.setAttribute("class", "tooltipBullet");
                                tooltip.appendChild(square);

                            
                                const text = document.createElementNS(
                                    "http://www.w3.org/2000/svg",
                                    "text"
                                );
                                text.setAttribute("x", parseFloat(rect.getAttribute("x")) + 20);
                                text.setAttribute(
                                        "y",
                                        parseFloat(rect.getAttribute("y")) + offsetY + b - 1.5
                                );
                                b = b + 20;
                                text.textContent = tooltipInfo.label[z] + ": " + tooltipInfo.value[z];
                                text.setAttribute("class", "tooltipText");
                                tooltip.appendChild(text);                
                            }
                        }

                        offsetY += 40;
                    }
                    group.appendChild(tooltip);
                }

                tooltip.style.visibility = "visible";

                // Mueve el tooltip al final del contenedor SVG
                group.appendChild(tooltip);
            }

            hideTooltip(tooltipId) {

                const tooltip = document.getElementById(tooltipId);
                if (tooltip) {
                    tooltip.style.visibility = "hidden";
                }
            }

            addEventListeners(nodes, enlaces) {
                // Mantén tus eventos de mouseover y mouseout intactos
                this.group.addEventListener("mouseover", (evt) => {
                    this.showTooltip(this.group, {
                        id: this.id,
                        x: this.x,
                        y: this.y + this.height + 5,
                        width: this.width + 100,
                        height: 130,
                        label: this.contnom,
                        value: this.contval,
                    });
                });

                this.group.addEventListener("mouseout", (evt) => {
                    this.hideTooltip(this.id + "_tooltip");
                });
              

                //Para Resaltar u Opacar los nodos
                // Al hacer clic en un nodo

                // Verificar si el nodo no está en la lista de nodos excluidos antes de asignar el manejador de eventos
                if (!excludedNodes.includes(this.id)) {
                    this.group.addEventListener("click", (evt) => {
                        nodes.forEach((n) => (n.group.style.opacity = 0.1));
                        enlaces.forEach((link) => {
                            if (!link.pathElement) {
                                console.error("Enlace sin pathElement:", link);
                            } else {
                                link.pathElement.style.opacity = 0.1; // Opacar link
                                if (link.particles) {
                                    link.particles.forEach((particle) => {
                                        particle.style.opacity = 0.1;
                                    });
                                }
                            }
                        });

                        // Resaltar el nodo seleccionado
                        this.group.style.opacity = 1;

                        // Llamar a la función de iluminación descendente
                        highlightDescendantsByParticleColors(this, enlaces);
                        evt.stopPropagation(); 

                    }); 
                }
            }
        }



        class NodoTotal {
            constructor(
                id,
                valor,
                imp,
                exp,
                cont,
                nodes,
                enlaces,
                contNodo = cont + 1,
                x = 280,
                y = 450,
                nombre = "Oferta Total",      
                color = getColorFromNombre(nombre),
                imgSrc = "/img/s_recurso.png",
                width = 100,
                height = 100,
                infoDataImp = "IMP TOTAL",
                infoDataExp = "EXP TOTAL",
                tooltipPosition = "bottom"
            ) {
                this.id = id;
                this.x = x;
                this.y = y;
                this.nombre = nombre;
                this.valor = valor;
                this.color = color;
                this.imgSrc = imgSrc;
                this.width = width;
                this.height = height;
                this.infoDataImp = infoDataImp; // Datos adicionales a mostrar
                this.infoDataExp = infoDataExp;
                this.imp = imp;
                this.exp = exp;
                this.tooltipPosition = tooltipPosition;
                this.cont = cont;
                this.contNodo = contNodo;
                this.nodes = nodes;
                this.enlaces = enlaces;
                this.draw(document.getElementById("sankeySvg"));
            }
            draw(svgElement) {
                //const svgContainer = document.getElementById("sankeySvg").innerHTML='';
                //svgElement.innerHTML='';
                this.group = document.createElementNS(
                    "http://www.w3.org/2000/svg",
                    "g"
                );

                this.group.setAttribute("id", this.id);
                const rect = document.createElementNS(
                    "http://www.w3.org/2000/svg",
                    "rect"
                );

                rect.setAttribute("x", this.x);
                rect.setAttribute("y", this.y);
                rect.setAttribute("width", this.width);
                rect.setAttribute("height", this.height);
                rect.setAttribute("fill", this.color);
                rect.setAttribute("rx", "5"); // Redondear las esquinas horizontalmente
                rect.setAttribute("ry", "5"); // Redondear las esquinas verticalmente
                rect.setAttribute("id", this.id + "_rect");
                rect.setAttribute("class", "nodeRect"); // Añadir la clase
                this.group.appendChild(rect);


                const textValue = document.createElementNS(
                    "http://www.w3.org/2000/svg",
                    "text"
                );
                
                textValue.setAttribute("x", this.x + this.width / 2);
                textValue.setAttribute("y", this.y - 10);
                textValue.setAttribute("text-anchor", "middle");
                textValue.setAttribute("class", "nodeValue"); // Añadir la clase
                textValue.textContent = this.valor + " PJ";
                
     
                this.group.appendChild(textValue);
 
                const textName = document.createElementNS(
                    "http://www.w3.org/2000/svg",
                    "text"
                );

                textName.setAttribute("x", this.x + this.width / 2);
                textName.setAttribute("y", this.y - 25);
                textName.setAttribute("text-anchor", "middle");
                textName.textContent = this.nombre;
                textName.setAttribute("class", "nodeName"); // Añadir la clase
                
                this.group.appendChild(textName);

                if (this.imgSrc) {
                    const image = document.createElementNS(
                        "http://www.w3.org/2000/svg",
                        "image"
                    );
                    image.setAttribute("x", this.x);
                    image.setAttribute("y", this.y);
                    image.setAttribute("width", this.width); // Ajustar al ancho del nodo
                    image.setAttribute("height", this.height); // Ajustar al alto del nodo
                    image.setAttributeNS(
                        "http://www.w3.org/1999/xlink",
                        "xlink:href",
                        this.imgSrc
                    );
                    this.group.appendChild(image);
                }

                svgElement.appendChild(this.group);

                this.addEventListeners();
            }

            showTooltip(group, tooltipInfo) {
                console.log("showTooltip called for node with id:", tooltipInfo.id);

                let tooltip = document.getElementById(tooltipInfo.id + "_tooltip");
                console.log("showTooltip called for node with id 2:", tooltipInfo.id);
                if (!tooltip) {
                    tooltip = document.createElementNS("http://www.w3.org/2000/svg", "g");
                    tooltip.setAttribute("id", tooltipInfo.id + "_tooltip");
                    tooltip.setAttribute("class", "infoBox");

                    const rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");

                    // Posicionamiento basado en tooltipPosition
                    rect.setAttribute("x", tooltipInfo.x);
                    rect.setAttribute("y", tooltipInfo.y);
                    rect.setAttribute("width", tooltipInfo.width);
                    rect.setAttribute("height", tooltipInfo.height);
                    rect.setAttribute("fill", "#FFF");
                    rect.setAttribute("rx", "5");
                    rect.setAttribute("ry", "5");
                    tooltip.appendChild(rect);

                    let offsetY = 20;
                    for (let i = 0; i < 1; i++) {
                        const square = document.createElementNS(
                            "http://www.w3.org/2000/svg",
                            "rect"
                        );
                        square.setAttribute(
                            "x",
                            parseFloat(rect.getAttribute("x")) + 5
                        );
                        square.setAttribute(
                            "y",
                            parseFloat(rect.getAttribute("y")) + offsetY - 7
                        );
                        square.setAttribute("width", 6);
                        square.setAttribute("height", 6);
                        square.setAttribute("class", "tooltipBullet");
                        tooltip.appendChild(square);

                    
                        const text = document.createElementNS(
                            "http://www.w3.org/2000/svg",
                            "text"
                        );
                        text.setAttribute("x", parseFloat(rect.getAttribute("x")) + 20);
                        text.setAttribute(
                                "y",
                                parseFloat(rect.getAttribute("y")) + offsetY  - 1.5
                        );
                        text.textContent = tooltipInfo.label + ": " + tooltipInfo.value;
                        text.setAttribute("class", "tooltipText");
                        tooltip.appendChild(text);                
                        
                        const square2 = document.createElementNS(
                            "http://www.w3.org/2000/svg",
                            "rect"
                        );
                        square2.setAttribute(
                            "x",
                            parseFloat(rect.getAttribute("x")) + 5
                        );
                        square2.setAttribute(
                            "y",
                            parseFloat(rect.getAttribute("y")) + offsetY + 20 - 7
                        );
                        square2.setAttribute("width", 6);
                        square2.setAttribute("height", 6);
                        square2.setAttribute("class", "tooltipBullet");
                        tooltip.appendChild(square2);

                    
                        const text2 = document.createElementNS(
                            "http://www.w3.org/2000/svg",
                            "text"
                        );
                        text2.setAttribute("x", parseFloat(rect.getAttribute("x")) + 20);
                        text2.setAttribute(
                                "y",
                                parseFloat(rect.getAttribute("y")) + offsetY + 20 - 1.5
                        );
                        text2.textContent = tooltipInfo.label2 + ": " + tooltipInfo.value2;
                        text2.setAttribute("class", "tooltipText");
                        tooltip.appendChild(text2);                
                        offsetY += 40;
                    }
                    group.appendChild(tooltip);
                }
                tooltip.style.visibility = "visible";
            }

            hideTooltip(tooltipId) {

                const tooltip = document.getElementById(tooltipId);
                if (tooltip) {
                    tooltip.style.visibility = "hidden";
                }
            }

            addEventListeners(nodes, enlaces) {
                // Mantén tus eventos de mouseover y mouseout intactos
                this.group.addEventListener("mouseover", (evt) => {
                    this.showTooltip(this.group, {
                        id: this.id,
                        x: this.x,
                        y: this.y + this.height + 5,
                        width: this.width,
                        height: 50,
                        label: this.infoDataImp,
                        value: this.imp,
                        label2: this.infoDataExp,
                        value2: this.exp,
                    });
                });

                this.group.addEventListener("mouseout", (evt) => {
                    this.hideTooltip(this.id + "_tooltip");
                });        

                //Para Resaltar u Opacar los nodos
                // Al hacer clic en un nodo

                // Verificar si el nodo no está en la lista de nodos excluidos antes de asignar el manejador de eventos
                if (!excludedNodes.includes(this.id)) {
                    this.group.addEventListener("click", (evt) => {
                        nodes.forEach((n) => (n.group.style.opacity = 0.1));
                        enlaces.forEach((link) => {
                            if (!link.pathElement) {
                                console.error("Enlace sin pathElement:", link);
                            } else {
                                link.pathElement.style.opacity = 0.1; // Opacar link
                                if (link.particles) {
                                    link.particles.forEach((particle) => {
                                        particle.style.opacity = 0.1;
                                    });
                                }
                            }
                        });

                        // Resaltar el nodo seleccionado
                        this.group.style.opacity = 1;

                        // Llamar a la función de iluminación descendente
                        highlightDescendantsByParticleColors(this, enlaces);
                        evt.stopPropagation(); 

                    }); 
                }
            }
        }   


        //Clases
        class Nodo {
            constructor(
                id,
                x,
                y,
                nombre,
                valor,
                color,
                imgSrc,
                width,
                height,
                infoDataImp,
                infoDataExp,
                imp,
                exp,
                tooltipPosition = "bottom", // Valor por defecto es 'bottom'
                cont,
                año,
                nodes,
                enlaces,
            ) {
                this.id = id;
                this.x = x;
                this.y = y;
                this.nombre = nombre;
                this.valor = valor;
                this.color = color;
                this.imgSrc = imgSrc;
                this.width = width;
                this.height = height;
                this.infoDataImp = infoDataImp; // Datos adicionales a mostrar
                this.infoDataExp = infoDataExp;
                this.imp = imp;
                this.exp = exp;
                this.tooltipPosition = tooltipPosition;
                this.cont = cont;
                this.año = año;
                this.nodes = nodes;
                this.enlaces = enlaces;
                this.draw(document.getElementById("sankeySvg"));
            }
            draw(svgElement) {
                //const svgContainer = document.getElementById("sankeySvg").innerHTML='';
                //svgElement.innerHTML='';
                this.group = document.createElementNS(
                    "http://www.w3.org/2000/svg",
                    "g"
                );

                this.group.setAttribute("id", this.id);
                const rect = document.createElementNS(
                    "http://www.w3.org/2000/svg",
                    "rect"
                );
                rect.setAttribute("x", this.x);
                rect.setAttribute("y", this.y);
                rect.setAttribute("width", this.width);
                rect.setAttribute("height", this.height);
                rect.setAttribute("fill", this.color);
                rect.setAttribute("rx", "5"); // Redondear las esquinas horizontalmente
                rect.setAttribute("ry", "5"); // Redondear las esquinas verticalmente
                rect.setAttribute("id", this.id + "_rect");
                rect.setAttribute("class", "nodeRect"); // Añadir la clase
                
                
                
                this.group.appendChild(rect);


                const textValue = document.createElementNS(
                    "http://www.w3.org/2000/svg",
                    "text"
                );
                
                textValue.setAttribute("x", this.x + this.width / 2);
                textValue.setAttribute("y", this.y - 10);
                textValue.setAttribute("text-anchor", "middle");
                textValue.setAttribute("class", "nodeValue"); // Añadir la clase
                textValue.textContent = this.valor + " PJ";
     
                this.group.appendChild(textValue);

                const textName = document.createElementNS(
                    "http://www.w3.org/2000/svg",
                    "text"
                );
                textName.setAttribute("x", this.x + this.width / 2);
                textName.setAttribute("y", this.y - 25);
                textName.setAttribute("text-anchor", "middle");
                textName.textContent = this.nombre;
                textName.setAttribute("class", "nodeName"); // Añadir la clase
                this.group.appendChild(textName);

                if(this.cont === 1){
                    const textName2 = document.createElementNS(
                    "http://www.w3.org/2000/svg",
                    "text"
                    );
                    textName2.setAttribute("x", this.x + this.width + 175 / 2); 
                    textName2.setAttribute("y", 40);
                    textName2.setAttribute("text-anchor", "middle");
                    textName2.textContent = this.año;
                    textName2.setAttribute("class", "nodeName"); // Añadir la clase
                    this.group.appendChild(textName2);
                }

                if (this.imgSrc) {
                    const image = document.createElementNS(
                        "http://www.w3.org/2000/svg",
                        "image"
                    );
                    image.setAttribute("x", this.x);
                    image.setAttribute("y", this.y);
                    image.setAttribute("width", this.width); // Ajustar al ancho del nodo
                    image.setAttribute("height", this.height); // Ajustar al alto del nodo
                    image.setAttributeNS(
                        "http://www.w3.org/1999/xlink",
                        "xlink:href",
                        this.imgSrc
                    );
                    this.group.appendChild(image);
                }

                svgElement.appendChild(this.group);

                // Almacenar una referencia a sí mismo
                this.selfReference = this;

                // Llamar a la función para agregar el manejador de eventos
                this.addEventListeners();
  
            }

            showTooltip(group, tooltipInfo) {
                console.log("showTooltip called for node with id:", tooltipInfo.id);

                let tooltip = document.getElementById(tooltipInfo.id + "_tooltip");
                if (!tooltip) {
                    tooltip = document.createElementNS("http://www.w3.org/2000/svg", "g");
                    tooltip.setAttribute("id", tooltipInfo.id + "_tooltip");
                    tooltip.setAttribute("class", "infoBox");

                    const rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");

                    // Posicionamiento basado en tooltipPosition
                    rect.setAttribute("x", tooltipInfo.x);
                    rect.setAttribute("y", tooltipInfo.y);
                    rect.setAttribute("width", tooltipInfo.width);
                    rect.setAttribute("height", tooltipInfo.height);
                    rect.setAttribute("fill", "#FFF");
                    rect.setAttribute("rx", "5");
                    rect.setAttribute("ry", "5");
                    tooltip.appendChild(rect);

                    let offsetY = 20;
                    for (let i = 0; i < 1; i++) {
                        const square = document.createElementNS(
                            "http://www.w3.org/2000/svg",
                            "rect"
                        );
                        square.setAttribute(
                            "x",
                            parseFloat(rect.getAttribute("x")) + 5
                        );
                        square.setAttribute(
                            "y",
                            parseFloat(rect.getAttribute("y")) + offsetY - 7
                        );
                        square.setAttribute("width", 6);
                        square.setAttribute("height", 6);
                        square.setAttribute("class", "tooltipBullet");
                        tooltip.appendChild(square);

                    
                        const text = document.createElementNS(
                            "http://www.w3.org/2000/svg",
                            "text"
                        );
                        text.setAttribute("x", parseFloat(rect.getAttribute("x")) + 20);
                        text.setAttribute(
                                "y",
                                parseFloat(rect.getAttribute("y")) + offsetY - 1.5
                        );
                        text.textContent = tooltipInfo.label + ": " + tooltipInfo.value;
                        text.setAttribute("class", "tooltipText");
                        tooltip.appendChild(text);                

                        const square2 = document.createElementNS(
                            "http://www.w3.org/2000/svg",
                            "rect"
                        );
                        square2.setAttribute(
                            "x",
                            parseFloat(rect.getAttribute("x")) + 5
                        );
                        square2.setAttribute(
                            "y",
                            parseFloat(rect.getAttribute("y")) + offsetY + 20 - 7
                        );
                        square2.setAttribute("width", 6);
                        square2.setAttribute("height", 6);
                        square2.setAttribute("class", "tooltipBullet");
                        tooltip.appendChild(square2);

                    
                        const text2 = document.createElementNS(
                            "http://www.w3.org/2000/svg",
                            "text"
                        );
                        text2.setAttribute("x", parseFloat(rect.getAttribute("x")) + 20);
                        text2.setAttribute(
                                "y",
                                parseFloat(rect.getAttribute("y")) + offsetY + 20 - 1.5
                        );
                        text2.textContent = tooltipInfo.label2 + ": " + tooltipInfo.value2;
                        text2.setAttribute("class", "tooltipText");
                        tooltip.appendChild(text2);                
                        offsetY += 40;
                    }
                    group.appendChild(tooltip);
                }
                tooltip.style.visibility = "visible";
            }

            hideTooltip(tooltipId) {

                const tooltip = document.getElementById(tooltipId);
                if (tooltip) {
                    tooltip.style.visibility = "hidden";
                }
            }

            addEventListeners(nodes, enlaces) {
                // Mantén tus eventos de mouseover y mouseout intactos
                this.group.addEventListener("mouseover", (evt) => {
                    this.showTooltip(this.group, {
                        id: this.id,
                        x: this.x - this.width - 5,
                        y: this.y - 18,
                        width: this.width,
                        height: 50,
                        label: this.infoDataImp,
                        value: this.imp,
                        label2: this.infoDataExp,
                        value2: this.exp,
                    });
                });

                this.group.addEventListener("mouseout", (evt) => {
                    this.hideTooltip(this.id + "_tooltip");
                });         

                //Para Resaltar u Opacar los nodos
                // Al hacer clic en un nodo

                // Verificar si el nodo no está en la lista de nodos excluidos antes de asignar el manejador de eventos
                if (!excludedNodes.includes(this.id)) {
                    this.group.addEventListener("click", (evt) => {
                        nodes.forEach((n) => (n.group.style.opacity = 0.1));
                        enlaces.forEach((link) => {
                            if (!link.pathElement) {
                                console.error("Enlace sin pathElement:", link);
                            } else {
                                link.pathElement.style.opacity = 0.1; // Opacar link
                                if (link.particles) {
                                    link.particles.forEach((particle) => {
                                        particle.style.opacity = 0.1;
                                    });
                                }
                            }
                        });

                        // Resaltar el nodo seleccionado
                        this.group.style.opacity = 1;

                        // Llamar a la función de iluminación descendente
                        highlightDescendantsByParticleColors(this, enlaces);
                        evt.stopPropagation(); 

                    }); 
                }
            }
        }
         

        function highlightDescendantsByParticleColors(node, links) {
            // Obtener los colores de las partículas del enlace que sale del nodo seleccionado
            const particleColorsToHighlight = [];
            links.forEach((link) => {
                if (link.source === node) {
                    particleColorsToHighlight.push(...link.particleColors);
                }
            });

            // Función recursiva para resaltar nodos y enlaces descendentes
            function highlightDescendants(currentNode) {
                links.forEach((link) => {
                    if (
                        link.source === currentNode &&
                        particleColorsToHighlight.some((color) =>
                            link.particleColors.includes(color)
                        )
                    ) {
                        link.pathElement.style.opacity = 1; // Resalta el enlace
                        link.target.group.style.opacity = 1;     
                        
                        // Resalta las partículas
                        if (link.particles) {
                            link.particles.forEach((particle) => {
                                if (
                                    particleColorsToHighlight.includes(
                                        particle.getAttribute("fill")
                                    )
                                ) {
                                    particle.style.opacity = 1;
                                } else {
                                    particle.style.opacity = 0.1; // Atenua las partículas no relacionadas
                                }
                            });
                        }

                        // Excepción para el nodo de retroalimentación
                        if (nodeShouldTriggerFeedback(node)) {
                            const feedbackLink = links.find(
                                (link) => link.type === "retroalimentacion"
                            );
                            if (feedbackLink) {
                                feedbackLink.pathElement.style.opacity = 1; // Resaltar link
                                feedbackLink.particles.forEach((particle) => {
                                    if (
                                        particleColorsToHighlight.includes(
                                            particle.getAttribute("fill")
                                        )
                                    ) {
                                        particle.style.opacity = 1; // Resaltar partículas que coinciden con el color
                                    } else {
                                        particle.style.opacity = 0.1; // Atenuar otras partículas
                                    }
                                });
                            }
                        }
                        // Llamar recursivamente para el nodo destino
                        highlightDescendants(link.target);
                    }
                });
            }

            // Iniciar la iluminación descendente desde el nodo seleccionado
            highlightDescendants(node);
        }

        function nodeShouldTriggerFeedback(node) {
            // Aquí puedes definir qué nodos específicos deberían activar la retroalimentación.
            // En este ejemplo, todos los nodos activan la retroalimentación. Modifícalo según tus necesidades.
            return true;
        }

        
        class Link {
          static linkCounter = 0;
          constructor(
            source,
            target,
            width,
            color,
            value,
            offset = 0,
            particleColors = ["#888"],
            type = "normal"
          ) {
            this.source = source;
            this.target = target;
            this.width = width;
            this.color = color;
            this.value = value.toString();
            this.unitText = "PJ";
            this.offset = offset;
            this.particleColors = particleColors;
            this.type = type;
            this.draw(document.getElementById("sankeySvg"));
            this.addEventListeners();
          }

          getControlPoints(start, end) {
            const diffX = end[0] - start[0];
            const diffY = end[1] - start[1];
            const halfX = start[0] + diffX / 2;
            return [
              [halfX, start[1]],
              [halfX, start[1] + diffY],
            ];
          }

          createParticleForLink(particleColor, linkPath) {
            console.log(
              "Intentando crear partícula para el enlace",
              linkPath.id
            );
            if (!linkPath) {
              console.warn("linkPath no proporcionado.");
              return;
            }
            const svgNS = "http://www.w3.org/2000/svg";
            const particle = document.createElementNS(svgNS, "circle");
            particle.setAttribute("r", "3");
            particle.setAttribute("fill", particleColor);

            const particlesGroup = document.getElementById("sankeySvg");
            console.log("particlesGroup: ",particlesGroup);
            if (!particlesGroup) {
              console.error("particlesGroup no encontrado en el DOM.");
              return;
            }
            console.log("particlesGroup encontrado en el DOM.");

            particlesGroup.appendChild(particle);
            console.log("Partícula añadida al particlesGroup.");

            const animateMotion = document.createElementNS(
              svgNS,
              "animateMotion"
            );
            const animationDuration = 3 + 5 / (this.value + 1);
            animateMotion.setAttribute("dur", `${animationDuration}s`);
            animateMotion.setAttribute("repeatCount", "indefinite");
            const delay = Math.random() * 5;
            animateMotion.setAttribute("begin", `${delay}s`);

            const mpath = document.createElementNS(svgNS, "mpath");
            mpath.setAttributeNS(
              "http://www.w3.org/1999/xlink",
              "xlink:href",
              "#" + linkPath.id
            );
            animateMotion.appendChild(mpath);
            particle.appendChild(animateMotion);
            console.log("Partícula creada:", particle);
            return particle;
          }

          generateParticles(linkPath) {
            console.log("Dentro de generateParticles. linkPath:", linkPath);

            if (!linkPath) {
              console.error("linkPath es indefinido.");
              return;
            }

            console.log("Antes de crear las partículas");
            console.log("Valor de this.value:", this.value);
            this.value = parseFloat(this.value.match(/\d+/)[0]);

            const particleCount = Math.ceil(Math.log(this.value + 1) * 5);
            this.particles = [];
            for (let i = 0; i < particleCount; i++) {
              console.log("Intentando crear la partícula número", i);
              let particleColor =
                this.particleColors[i % this.particleColors.length];
                console.log("Valor de particleColor", particleColor);
              const particle = this.createParticleForLink(
                particleColor,
                linkPath
              );
              this.particles.push(particle);
            }
            console.log("Valor de particleCount:", particleCount);

            console.log("Después de crear las partículas");
          }

          drawParticles(svgElement) {
            this.particleElements = this.particles.map((particle) => {
              console.log("Añadiendo partícula al SVG", particle);
              svgElement.appendChild(particle);
              return particle;
            });
          }

          draw(svgElement) {
            let startX, startY, endX, endY;
            let controlPoints; // Declaramos la variable controlPoints aquí para que esté disponible en todo el ámbito de la función

            const margin = 0; // Espacio entre el nodo y el inicio de la 'U'
            const uDepth = 680; // Profundidad de la 'U' más pronunciada

            if (!this.source || !this.target) {
              console.error("Link con source o target no definidos:", this);
              return;
            }
            if (
              this.source.x === undefined ||
              this.source.y === undefined ||
              this.target.x === undefined ||
              this.target.y === undefined
            ) {
              console.error("Link con coordenadas no definidas:", this);
              return;
            }
            if (this.type === "retroalimentacion") {
              startX = this.source.x + this.source.width / 2; // Centro del nodo origen
              startY = this.source.y + this.source.height + margin;

              endX = this.target.x + this.target.width / 2; // Centro del nodo destino
              endY = this.target.y + this.target.height + margin;

              // Puntos de control para la 'U'
              controlPoints = [
                [startX, startY + uDepth],
                [endX, endY + uDepth],
              ];
            } else {
              startX = this.source.x + this.source.width;
              startY = this.source.y + this.source.height / 2 + this.offset;

              endX = this.target.x;
              endY = this.target.y + this.target.height / 2 + this.offset;

              // Calcula los puntos de control como lo hacías anteriormente
              controlPoints = this.getControlPoints(
                [startX, startY],
                [endX, endY]
              );
            }
            const pathD = `M${startX} ${startY} C${controlPoints[0][0]} ${controlPoints[0][1]} ${controlPoints[1][0]} ${controlPoints[1][1]} ${endX} ${endY}`;

            const path = document.createElementNS(
              "http://www.w3.org/2000/svg",
              "path"
            );
            this.originalColor = this.color;
            const uniqueId = `link_${this.source.id}_to_${
              this.target.id
            }_${Link.linkCounter++}`;
            path.setAttribute("id", uniqueId);

            path.setAttribute("d", pathD);
            path.setAttribute("stroke", this.color);
            path.setAttribute("stroke-width", this.width);
            path.setAttribute("fill", "none");

            this.group = document.createElementNS(
              "http://www.w3.org/2000/svg",
              "g"
            );

            this.pathElement = path;

            svgElement.appendChild(this.group);
            this.group.appendChild(path);

            // Generar partículas después de dibujar el enlace
            this.generateParticles(path);
            this.drawParticles(svgElement);
            //this.animateParticles();
          }

          addEventListeners() {
            this.group.addEventListener("mouseover", (evt) => {
              this.showTooltip(evt);
            });

            this.group.addEventListener("mouseout", (evt) => {
              this.hideTooltip(evt);
            });
          }

          showTooltip(evt) {
            // Crear un rectángulo para el fondo del tooltip
            const rect = document.createElementNS(
              "http://www.w3.org/2000/svg",
              "rect"
            );
            rect.setAttribute("x", evt.clientX);
            rect.setAttribute("y", evt.clientY);
            rect.setAttribute("width", 60); // Puedes ajustar esto según el tamaño del texto
            rect.setAttribute("height", 25); // Puedes ajustar esto según el tamaño del texto
            rect.style.fill = this.color;
            rect.setAttribute("class", "linkTooltipRect"); // Añadido: Clase del rectángulo

            rect.setAttribute("id", "link_tooltip_rect");

            // Crear un triángulo pequeño que apunte al link
            const triangle = document.createElementNS(
              "http://www.w3.org/2000/svg",
              "polygon"
            );
            triangle.setAttribute(
              "points",
              `${evt.clientX},${evt.clientY + 10} ${evt.clientX - 5},${
                evt.clientY + 5
              } ${evt.clientX - 5},${evt.clientY + 15}`
            );
            triangle.style.fill = this.color;

            triangle.setAttribute("class", "linkTooltipTriangle"); // Añadido: Clase del triángulo
            triangle.setAttribute("id", "link_tooltip_triangle");

            // Crear texto para el tooltip
            const text = document.createElementNS(
              "http://www.w3.org/2000/svg",
              "text"
            );
            text.setAttribute("x", evt.clientX + 30);
            text.setAttribute("y", evt.clientY + 15);
            text.setAttribute("fill", "#fafafa"); // Cambio aquí: Color del texto
            text.setAttribute("class", "linkTooltipText"); // Añadido: Clase del texto
            text.setAttribute("text-anchor", "middle");

            text.setAttribute("id", "link_tooltip_text");
            text.textContent = this.value + " " + this.unitText;

            // Añadir tooltip al SVG
            const svg = document.getElementById("sankeySvg");
            svg.appendChild(rect);
            svg.appendChild(triangle);
            svg.appendChild(text);
          }

          hideTooltip(evt) {
            const svg = document.getElementById("sankeySvg");
            svg.removeChild(document.getElementById("link_tooltip_rect"));
            svg.removeChild(document.getElementById("link_tooltip_triangle"));
            svg.removeChild(document.getElementById("link_tooltip_text"));
          }
          highlight() {
            // Cambia el color o el estilo del enlace para resaltarlo
            this.pathElement.setAttribute("stroke", "red"); // Cambia el color a rojo, por ejemplo
            this.pathElement.setAttribute("stroke-width", "4");
          }

          resetHighlight() {
            // Restablece el color o el estilo del enlace
            this.pathElement.setAttribute("stroke", this.originalColor);
            this.pathElement.setAttribute("stroke-width", this.originalWidth);
          }

          //Generación de particulas
        }

        class WrapperNode extends Nodo {
            constructor(id, x, y, nombre, color, width, height, imgSrc) {
                super(id, x, y, nombre, null, color, imgSrc, width, height, null, null, null, null, null);
            }

            draw(svgElement) {
                this.group = document.createElementNS(
                    "http://www.w3.org/2000/svg",
                    "g"
                );
                this.group.setAttribute("id", this.id);

                if(this.id === "Importacion1" || this.id === "Importacion2" || this.id === "Exportacion1" || this.id === "Exportacion2"){
                    console.log("Contenido de imagen");
                } else{
                    const rect = document.createElementNS(
                        "http://www.w3.org/2000/svg",
                        "rect"
                    );
                    rect.setAttribute("x", this.x);
                    rect.setAttribute("y", this.y);
                    rect.setAttribute("width", this.width);
                    rect.setAttribute("height", this.height);
                    if(this.id === "Transformacion1"){
                        rect.setAttribute("fill", "#FEE879"); 
                    } else if (this.id === "Transformacion2"){
                        rect.setAttribute("fill", "#A8DFE4"); 
                    } else if (this.id === "Transformacion3"){
                        rect.setAttribute("fill", "#FF94A8"); 
                    } else{
                        rect.setAttribute("fill", "none"); // No relleno
                    }
                    rect.setAttribute("stroke", this.color); // Color del borde
                    rect.setAttribute("stroke-dasharray", "4,2"); // Borde punteado
                    rect.setAttribute("rx", "5"); // Redondear las esquinas horizontalmente
                    rect.setAttribute("ry", "5"); // Redondear las esquinas verticalmente
                    rect.setAttribute("id", this.id + "_rect");
                    rect.setAttribute("class", "nodeRect"); // Añadir la clase
                    this.group.appendChild(rect);
                }

                if(this.id === "Transformacion1" || this.id === "Transformacion2" || this.id === "Transformacion3" || this.id === "Importacion1" || this.id === "Importacion2" || this.id === "Exportacion1" || this.id === "Exportacion2"){
                    console.log("Este ID no contiene nombre");
                } else if(this.id === "nodoUsosFinales"){
                    const textName = document.createElementNS(
                        "http://www.w3.org/2000/svg",
                        "text"
                    );
                    textName.setAttribute("x", this.x + this.width / 2 - 10);
                    textName.setAttribute("y", this.y - 10);
                    textName.setAttribute("text-anchor", "middle");
                    textName.textContent = this.nombre;
                    textName.setAttribute("class", "nodeName"); // Añadir la clase
                    this.group.appendChild(textName);
                } else{
                    const textName = document.createElementNS(
                        "http://www.w3.org/2000/svg",
                        "text"
                    );
                    textName.setAttribute("x", this.x + this.width / 2);
                    textName.setAttribute("y", this.y - 10);
                    textName.setAttribute("text-anchor", "middle");
                    textName.textContent = this.nombre;
                    textName.setAttribute("class", "nodeName"); // Añadir la clase
                    this.group.appendChild(textName);
                }


                if (this.imgSrc) {
                    const image = document.createElementNS(
                        "http://www.w3.org/2000/svg",
                        "image"
                    );
                    if(this.id === "Transformacion1"){
                        image.setAttribute("x", this.x + 85);
                        image.setAttribute("y", this.y - 154);
                        image.setAttribute("width", this.width - 85); // Ajustar al ancho del nodo
                        image.setAttribute("height", this.height - 85); // Ajustar al alto del nodo
                        image.setAttributeNS(
                            "http://www.w3.org/1999/xlink",
                            "xlink:href",
                            this.imgSrc
                        );
                        this.group.appendChild(image);
                    } else if(this.id === "Transformacion2"){
                        image.setAttribute("x", this.x + 46);
                        image.setAttribute("y", 268);
                        image.setAttribute("width", this.width - 90); // Ajustar al ancho del nodo
                        image.setAttribute("height", this.height - 370); // Ajustar al alto del nodo
                        image.setAttributeNS(
                            "http://www.w3.org/1999/xlink",
                            "xlink:href",
                            this.imgSrc
                        );
                        this.group.appendChild(image);
                    } else if(this.id === "Transformacion3"){
                        image.setAttribute("x", this.x + 85);
                        image.setAttribute("y", this.y - 79);
                        image.setAttribute("width", this.width - 85); // Ajustar al ancho del nodo
                        image.setAttribute("height", this.height - 85); // Ajustar al alto del nodo
                        image.setAttributeNS(
                            "http://www.w3.org/1999/xlink",
                            "xlink:href",
                            this.imgSrc
                        );
                        this.group.appendChild(image);
                    } else if(this.id === "nodoUsosFinales"){
                        image.setAttribute("x", this.x + 80);
                        image.setAttribute("y", this.y - 208);
                        image.setAttribute("width", this.width - 60); // Ajustar al ancho del nodo
                        image.setAttribute("height", this.height - 60); // Ajustar al alto del nodo
                        image.setAttributeNS(
                            "http://www.w3.org/1999/xlink",
                            "xlink:href",
                            this.imgSrc
                        );
                        this.group.appendChild(image);
                    } else if(this.id === "Importacion1"){
                        image.setAttribute("x", this.x + 350);
                        image.setAttribute("y", this.y - 330);
                        image.setAttribute("width", this.width - 100); // Ajustar al ancho del nodo
                        image.setAttribute("height", this.height - 100); // Ajustar al alto del nodo
                        image.setAttributeNS(
                            "http://www.w3.org/1999/xlink",
                            "xlink:href",
                            this.imgSrc
                        );
                        this.group.appendChild(image);
                    } else if(this.id === "Importacion2"){
                        image.setAttribute("x", this.x + 350);
                        image.setAttribute("y", this.y - 158);
                        image.setAttribute("width", this.width - 100); // Ajustar al ancho del nodo
                        image.setAttribute("height", this.height - 100); // Ajustar al alto del nodo
                        image.setAttributeNS(
                            "http://www.w3.org/1999/xlink",
                            "xlink:href",
                            this.imgSrc
                        );
                        this.group.appendChild(image);
                    } else if(this.id === "Exportacion1"){
                        image.setAttribute("x", this.x + 370);
                        image.setAttribute("y", this.y - 330);
                        image.setAttribute("width", this.width - 100); // Ajustar al ancho del nodo
                        image.setAttribute("height", this.height - 100); // Ajustar al alto del nodo
                        image.setAttributeNS(
                            "http://www.w3.org/1999/xlink",
                            "xlink:href",
                            this.imgSrc
                        );
                        this.group.appendChild(image);
                    } else if(this.id === "Exportacion2"){
                        image.setAttribute("x", this.x + 370);
                        image.setAttribute("y", this.y - 158);
                        image.setAttribute("width", this.width - 100); // Ajustar al ancho del nodo
                        image.setAttribute("height", this.height - 100); // Ajustar al alto del nodo
                        image.setAttributeNS(
                            "http://www.w3.org/1999/xlink",
                            "xlink:href",
                            this.imgSrc
                        );
                        this.group.appendChild(image);
                    } 
                }

                svgElement.appendChild(this.group);
            }

            // Sobrescribimos el método addEventListeners para que no haga nada
            addEventListeners() { }
        }
        //Catalogos
        // const coloresEnergia = {
        //  Petroleo: '#24469c',
        //  Biomasa: '#61ae40',
        //  Carbon: '#3c3d48',
        //  GasNatural: '#a8b3ba',
        //  EnergiaHidrica: '#4894d1',
        //  EnergiaSolar: '#efc50c',
        //  EnergiaEolica: '#fe2120',
        //  Geotermia: '#4e1f02',
        //  Biogas: '#770fad',
        //  Uranio: '#1a8092',
        //  Envoltura: '#ceced1',
        //  FondoNodo: '#efefee'
        //};
        //Limites Cajas (nodos que envuelven mas Nodos)
        const coloresEnergia = {
          Petroleo: "#1B263B",
          Condensados: "#4CAF50",
          Carbon: "#424242",
          GasNatural: "#64B5F6",
          EnergiaHidrica: "#1976D2",
          EnergiaSolar: "#FFEB3B",
          EnergiaEolica: "#90CAF9",
          Geotermia: "#8D6E63",
          Biogas: "#2E7D32",
          Lena: "#CDDC39",
          Envoltura: "#a9b3ba",
          FondoNodo: "#E0E0E0",
          Nucleoenergia: "#7FFF00",
          BagazoCana: "#FF7F50",
        };

        const datosWrapperNodes = [
          {
            id: "nodo23",
            x: 70,
            y: 50,
            name: "FEP - Fuentes de Energía Primaria",
            colorKey: "Envoltura",
            width: 120,
            height: 950,
          },
          {
            id: "nodoUsosFinales",
            x: 1080,
            y: 280,
            name: "Usos Finales",
            colorKey: "Envoltura",
            width: 120,
            height: 440,
          },
          {
            id: "Transformación",
            x: 270,
            y: 280,
            name: "Transformación",
            colorKey: "Envoltura",
            width: 280,
            height: 440,
          },
          {
            id: "Retroalimentación",
            x: 380,
            y: 730,
            name: "Retroalimentación",
            colorKey: "Envoltura",
            width: 680,
            height: 150,
          },
        ];


        const catalogoNodos = [
          {
            id: "nodoCarbon",
            x: 100,
            y: 100,
            nombre: "Carbón",
            energia: 1220 + " PJ" ,
            colorKey: "Carbon",
            imagen: "/wwwroot/img/carboni.png",
            width: 70,
            height: 20,
            infoData: {
              IMP: "1000",
              EXP: "2000",
              "VSP/E": "85",
            },
            tooltipPos: "left",
          },
          {
            id: "nodoCondensados",
            x: 100,
            y: 170,
            nombre: "Condensados",
            energia: 1220 + " PJ",
            colorKey: "Condensados",
            imagen: "/wwwroot/img/biomasai.png",
            width: 70,
            height: 20,
            infoData: {
              IMP: "1000",
              EXP: "2000",
              "VSP/E": "85",
            },
            tooltipPos: "left",
          },
          {
            id: "nodoGasN",
            x: 100,
            y: 240,
            nombre: "Gas Natural",
            energia: 1220 + " PJ",
            colorKey: "GasNatural",
            imagen: "/wwwroot/img/gasnaturali.png",
            width: 70,
            height: 20,
            infoData: {
              IMP: "1000",
              EXP: "2000",
              "VSP/E": "85",
            },
            tooltipPos: "left",
          },
          {
            id: "nodoCrudo",
            x: 100,
            y: 310,
            nombre: "Petróleo Crudo",
            energia: 1220 + " PJ",
            colorKey: "Petroleo",
            imagen: "/wwwroot/img/s_crudo.png",
            width: 70,
            height: 20,
            infoData: {
              EDO: "150 Barriles",
              EXP: "2000",
              "VSP/E": "85",
              Otro: 12,
            },
            tooltipPos: "left",
          },
          {
            id: "nodoNucleo",
            x: 100,
            y: 430,
            nombre: "Nucleoenergía",
            energia: 1220 + " PJ",
            colorKey: "Nucleoenergia",
            imagen: "/wwwroot/img/tierra.png",
            width: 70,
            height: 20,
            infoData: {
              IMP: "1000",
              EXP: "2000",
              "VSP/E": "85",
            },
            tooltipPos: "left",
          },
          {
            id: "nodoBagazo",
            x: 100,
            y: 550,
            nombre: "Bagazo de caña",
            energia: 1220 + " PJ",
            colorKey: "BagazoCana",
            imagen: "/wwwroot/img/viable.png",
            width: 70,
            height: 20,
            infoData: {
              IMP: "1000",
              EXP: "2000",
              "VSP/E": "85",
            },
            tooltipPos: "left",
          },
          {
            id: "nodoBiogas",
            x: 100,
            y: 620,
            nombre: "Biogas",
            energia: 1220 + " PJ",
            colorKey: "Biogas",
            imagen: "/wwwroot/img/biogasi.png",
            width: 70,
            height: 20,
            infoData: {
              IMP: "1000",
              EXP: "2000",
              "VSP/E": "85",
            },
            tooltipPos: "left",
          },
          {
            id: "nodoEolica",
            x: 100,
            y: 690,
            nombre: "Energía Eólica",
            energia: 1220 + " PJ",
            colorKey: "EnergiaEolica",
            imagen: "/wwwroot/img/vientoi.png",
            width: 70,
            height: 20,
            infoData: {
              IMP: "1000",
              EXP: "2000",
              "VSP/E": "85",
            },
            tooltipPos: "left",
          },
          {
            id: "nodoSolar",
            x: 100,
            y: 760,
            nombre: "Energía Solar",
            energia: 1220 + " PJ",
            colorKey: "EnergiaSolar",
            imagen: "/wwwroot/img/soli.png",
            width: 70,
            height: 20,
            infoData: {
              IMP: "1000",
              EXP: "2000",
              "VSP/E": "85",
            },
            tooltipPos: "left",
          },
          {
            id: "nodoGeo",
            x: 100,
            y: 830,
            nombre: "Geoenergía",
            energia: 1220 + " PJ",
            colorKey: "Geotermia",
            imagen: "/wwwroot/img/geotermiai.png",
            width: 70,
            height: 20,
            infoData: {
              IMP: "1000",
              EXP: "2000",
              "VSP/E": "85",
            },
            tooltipPos: "left",
          },
          {
            id: "nodoAgua",
            x: 100,
            y: 900,
            nombre: "Hidroenergía",
            energia: 1220 + " PJ",
            colorKey: "EnergiaHidrica",
            imagen: "/wwwroot/img/aguai.png",
            width: 70,
            height: 20,
            infoData: {
              IMP: "1000",
              EXP: "2000",
              "VSP/E": "85",
            },
            tooltipPos: "left",
          },
          {
            id: "nodoLena",
            x: 100,
            y: 970,
            nombre: "Leña",
            energia: 1220 + " PJ",
            colorKey: "Lena",
            imagen: "/wwwroot/img/uranioi.png",
            width: 70,
            height: 20,
            infoData: {
              IMP: "1000",
              EXP: "2000",
              "VSP/E": "85",
            },
            tooltipPos: "left",
          },
          {
            id: "nodoOfertaTotal",
            x: 280,
            y: 450,
            nombre: "Oferta Total",
            energia: 1220 + " PJ",
            colorKey: "FondoNodo",
            imagen: "/wwwroot/img/s_recurso.png",
            width: 100,
            height: 100,
            infoData: {
              algo: "a",
              Producción: "b",
              "VSP/E": "q/E",
            },
            tooltipPos: "bottom",
          },
          {
            id: "nodoHidrocarburos",
            x: 450,
            y: 330,
            nombre: "Sector Petróleo",
            energia: 1220 + " PJ",
            colorKey: "Petroleo",
            imagen: "/wwwroot/img/s_petroliferos.png",
            width: 70,
            height: 70,
            infoData: {
              IMP: "1000",
              EXP: "2000",
              "VSP/E": "85",
            },
            tooltipPos: "bottom",
          },

          {
            id: "nodoGLP",
            x: 630,
            y: 390,
            nombre: "Gas L.P.",
            energia: 1220 + " PJ",
            colorKey: "Petroleo",
            imagen: "/wwwroot/img/s_glp.png",
            width: 70,
            height: 20,
            infoData: {
              IMP: "1000",
              EXP: "2000",
              "VSP/E": "85",
            },
            tooltipPos: "bottom",
          },
          {
            id: "nodoGasNatural",
            x: 630,
            y: 320,
            nombre: "Gas Natural",
            energia: 1220 + " PJ",
            colorKey: "Petroleo",
            imagen: "/wwwroot/img/s_gasnatural.png",
            width: 70,
            height: 20,
            infoData: {
              IMP: "1000",
              EXP: "2000",
              "VSP/E": "85",
            },
            tooltipPos: "bottom",
          },
          {
            id: "nodoPetrolíferos",
            x: 630,
            y: 250,
            nombre: "Petrolíferos",
            energia: 1220 + " PJ",
            colorKey: "Petroleo",
            imagen: "/wwwroot/img/s_gasolina.png",
            width: 70,
            height: 20,
            infoData: {
              IMP: "1000",
              EXP: "2000",
              "VSP/E": "85",
            },
            tooltipPos: "bottom",
          },

          {
            id: "nodoElectricidad",
            x: 450,
            y: 620,
            nombre: "Sector Electricidad",
            energia: 1220 + " PJ",
            colorKey: "FondoNodo",
            imagen: "/wwwroot/img/electricidadi.png",
            width: 70,
            height: 70,
            infoData: {
              IMP: "1000",
              EXP: "2000",
              "VSP/E": "85",
            },
            tooltipPos: "bottom",
          },
          {
            id: "nodoOfertaDisponible",
            x: 880,
            y: 450,
            nombre: "Disponible Total",
            energia: 1220 + " PJ",
            colorKey: "FondoNodo",
            imagen: "/wwwroot/img/s_disponible.png",
            width: 100,
            height: 100,
            infoData: {
              algo: "a",
              Producción: "b",
              "VSP/E": "q/E",
            },
            tooltipPos: "bottom",
          },

          {
            id: "nodoNoRenovable",
            x: 630,
            y: 650,
            nombre: "E. Convencional",
            energia: 1220 + " PJ",
            colorKey: "FondoNodo",
            imagen: "/wwwroot/img/s_fosil.png",
            width: 70,
            height: 30,
            infoData: {
              IMP: "1000",
              EXP: "2000",
              "VSP/E": "85",
            },
            tooltipPos: "bottom",
          },
          {
            id: "nodoRenovable",
            x: 630,
            y: 550,
            nombre: "E. Renovable",
            energia: 1220 + " PJ",
            colorKey: "FondoNodo",
            imagen: "/wwwroot/img/s_renovable.png",
            width: 70,
            height: 30,
            infoData: {
              IMP: "1000",
              EXP: "2000",
              "VSP/E": "85",
            },
            tooltipPos: "bottom",
          },

          ///Distribución
          {
            id: "nodoDistribucion",
            x: 750,
            y: 300,
            nombre: "Distribución",
            energia: 1220 + " PJ",
            colorKey: "FondoNodo",
            imagen: "/wwwroot/img/s_distribucion.png",
            width: 70,
            height: 70,
            infoData: {
              IMP: "1000",
              EXP: "2000",
              "VSP/E": "85",
            },
            tooltipPos: "bottom",
          },
          {
            id: "nodoRNTyRGD",
            x: 750,
            y: 580,
            nombre: "RNT y RGD",
            energia: 1220 + " PJ",
            colorKey: "FondoNodo",
            imagen: "/wwwroot/img/s_rntyrgd.png",
            width: 70,
            height: 70,
            infoData: {
              IMP: "1000",
              EXP: "2000",
              "VSP/E": "85",
            },
            tooltipPos: "bottom",
          },

          {
            id: "nodoHogar",
            x: 1100,
            y: 340,
            nombre: "Hogar",
            energia: 1220 + " PJ",
            colorKey: "FondoNodo",
            imagen: "/wwwroot/img/hogar.png",
            width: 70,
            height: 20,
            infoData: {
              IMP: "1000",
              EXP: "2000",
              "VSP/E": "85",
            },
            tooltipPos: "right",
          },
          {
            id: "nodoTransporte",
            x: 1100,
            y: 410,
            nombre: "Transporte",
            energia: 1220 + " PJ",
            colorKey: "FondoNodo",
            imagen: "/wwwroot/img/camioni.png",
            width: 70,
            height: 20,
            infoData: {
              IMP: "1000",
              EXP: "2000",
              "VSP/E": "85",
            },
            tooltipPos: "right",
          },
          {
            id: "nodoSPyC",
            x: 1100,
            y: 480,
            nombre: "Serv. Púb. y Com.",
            energia: 1220 + " PJ",
            colorKey: "FondoNodo",
            imagen: "/wwwroot/img/servicio.png",
            width: 70,
            height: 20,
            infoData: {
              IMP: "1000",
              EXP: "2000",
              "VSP/E": "85",
            },
            tooltipPos: "right",
          },
          {
            id: "nodoAgricultura",
            x: 1100,
            y: 550,
            nombre: "Agricultura",
            energia: 1220 + " PJ",
            colorKey: "FondoNodo",
            imagen: "/wwwroot/img/agricultura.png",
            width: 70,
            height: 20,
            infoData: {
              IMP: "1000",
              EXP: "2000",
              "VSP/E": "85",
            },
            tooltipPos: "right",
          },
          {
            id: "nodoIndustria",
            x: 1100,
            y: 620,
            nombre: "Industria",
            energia: 1220 + " PJ",
            colorKey: "FondoNodo",
            imagen: "/wwwroot/img/industria.png",
            width: 70,
            height: 20,
            infoData: {
              IMP: "1000",
              EXP: "2000",
              "VSP/E": "85",
            },
            tooltipPos: "right",
          },
          {
            id: "nodoEnergía",
            x: 1100,
            y: 690,
            nombre: "S. Energía",
            energia: 1220 + " PJ",
            colorKey: "FondoNodo",
            imagen: "/wwwroot/img/sectore.png",
            width: 70,
            height: 20,
            infoData: {
              IMP: "1000",
              EXP: "2000",
              "VSP/E": "85",
            },
            tooltipPos: "right",
          },
        ];

        const datosLinks = [
          //Nodos Normales
          {
            source: "nodoCrudo",
            target: "nodoOfertaTotal",
            width: 5,
            backgroundColorKey: "FondoNodo",
            length: "500",
            curve: 0,
            particleColorsKeys: ["Petroleo"],
            // type: 'retroalimentacion'
          },
          {
            source: "nodoCondensados",
            target: "nodoOfertaTotal",
            width: 5,
            backgroundColorKey: "FondoNodo",
            length: "900",
            curve: 0,
            particleColorsKeys: ["Condensados"],
          },
          {
            source: "nodoCarbon",
            target: "nodoOfertaTotal",
            width: 5,
            backgroundColorKey: "FondoNodo",
            length: "900",
            curve: 0,
            particleColorsKeys: ["Carbon"],
          },
          {
            source: "nodoGasN",
            target: "nodoOfertaTotal",
            width: 5,
            backgroundColorKey: "FondoNodo",
            length: "900",
            curve: 0,
            particleColorsKeys: ["GasNatural"],
          },
          {
            source: "nodoAgua",
            target: "nodoOfertaTotal",
            width: 5,
            backgroundColorKey: "FondoNodo",
            length: "900",
            curve: 0,
            particleColorsKeys: ["EnergiaHidrica"],
          },
          {
            source: "nodoSolar",
            target: "nodoOfertaTotal",
            width: 5,
            backgroundColorKey: "FondoNodo",
            length: "900",
            curve: 0,
            particleColorsKeys: ["EnergiaSolar"],
          },
          {
            source: "nodoEolica",
            target: "nodoOfertaTotal",
            width: 5,
            backgroundColorKey: "FondoNodo",
            length: "900",
            curve: 0,
            particleColorsKeys: ["EnergiaEolica"],
          },
          {
            source: "nodoGeo",
            target: "nodoOfertaTotal",
            width: 5,
            backgroundColorKey: "FondoNodo",
            length: "900",
            curve: 0,
            particleColorsKeys: ["Geotermia"],
          },
          {
            source: "nodoBiogas",
            target: "nodoOfertaTotal",
            width: 5,
            backgroundColorKey: "FondoNodo",
            length: "900",
            curve: 0,
            particleColorsKeys: ["Biogas"],
          },
          {
            source: "nodoLena",
            target: "nodoOfertaTotal",
            width: 5,
            backgroundColorKey: "FondoNodo",
            length: "900",
            curve: 0,
            particleColorsKeys: ["Lena"],
          },
          {
            source: "nodoLena",
            target: "nodoOfertaTotal",
            width: 5,
            backgroundColorKey: "FondoNodo",
            length: "900",
            curve: 0,
            particleColorsKeys: ["Lena"],
          },
          {
            source: "nodoNucleo",
            target: "nodoOfertaTotal",
            width: 5,
            backgroundColorKey: "FondoNodo",
            length: "900",
            curve: 0,
            particleColorsKeys: ["Nucleoenergia"],
          },
          {
            source: "nodoBagazo",
            target: "nodoOfertaTotal",
            width: 5,
            backgroundColorKey: "FondoNodo",
            length: "900",
            curve: 0,
            particleColorsKeys: ["BagazoCana"],
          },
          {
            source: "nodoOfertaTotal",
            target: "nodoOfertaDisponible",
            width: 5,
            backgroundColorKey: "FondoNodo",
            length: "190",
            curve: 0,
            particleColorsKeys: ["Condensados", "Carbon", "GasNatural"],
          },
          {
            source: "nodoOfertaTotal",
            target: "nodoHidrocarburos",
            width: 5,
            backgroundColorKey: "FondoNodo",
            length: "190",
            curve: 0,
            particleColorsKeys: ["Petroleo"],
          },
          {
            source: "nodoHidrocarburos",
            target: "nodoPetrolíferos",
            width: 5,
            backgroundColorKey: "FondoNodo",
            length: "190",
            curve: 0,
            particleColorsKeys: ["Petroleo"],
          },
          {
            source: "nodoHidrocarburos",
            target: "nodoGasNatural",
            width: 5,
            backgroundColorKey: "FondoNodo",
            length: "190",
            curve: 0,
            particleColorsKeys: ["Petroleo"],
          },
          {
            source: "nodoHidrocarburos",
            target: "nodoGLP",
            width: 5,
            backgroundColorKey: "FondoNodo",
            length: "190",
            curve: 0,
            particleColorsKeys: ["Petroleo"],
          },
          {
            source: "nodoPetrolíferos",
            target: "nodoDistribucion",
            width: 5,
            backgroundColorKey: "FondoNodo",
            length: "190",
            curve: 0,
            particleColorsKeys: ["Petroleo"],
          },
          {
            source: "nodoGasNatural",
            target: "nodoDistribucion",
            width: 5,
            backgroundColorKey: "FondoNodo",
            length: "190",
            curve: 0,
            particleColorsKeys: ["Petroleo"],
          },
          {
            source: "nodoGLP",
            target: "nodoDistribucion",
            width: 5,
            backgroundColorKey: "FondoNodo",
            length: "190",
            curve: 0,
            particleColorsKeys: ["Petroleo"],
          },
          {
            source: "nodoDistribucion",
            target: "nodoOfertaDisponible",
            width: 5,
            backgroundColorKey: "FondoNodo",
            length: "190",
            curve: 0,
            particleColorsKeys: ["Petroleo"],
          },
          {
            source: "nodoOfertaTotal",
            target: "nodoElectricidad",
            width: 5,
            backgroundColorKey: "FondoNodo",
            length: "190",
            curve: 0,
            particleColorsKeys: [
              "Biomasa",
              "Carbon",
              "GasNatural",
              "EnergiaHidrica",
              "EnergiaSolar",
              "EnergiaEolica",
              "Geotermia",
              "Biogas",
              "Uranio",
            ],
          },
          {
            source: "nodoElectricidad",
            target: "nodoRenovable",
            width: 5,
            backgroundColorKey: "FondoNodo",
            length: "190",
            curve: 0,
            particleColorsKeys: [
              "Biomasa",
              "Carbon",
              "GasNatural",
              "EnergiaHidrica",
              "EnergiaSolar",
              "EnergiaEolica",
              "Geotermia",
              "Biogas",
              "Uranio",
            ],
          },
          {
            source: "nodoElectricidad",
            target: "nodoNoRenovable",
            width: 5,
            backgroundColorKey: "FondoNodo",
            length: "190",
            curve: 0,
            particleColorsKeys: [
              "Biomasa",
              "Carbon",
              "GasNatural",
              "EnergiaHidrica",
              "EnergiaSolar",
              "EnergiaEolica",
              "Geotermia",
              "Biogas",
              "Uranio",
            ],
          },
          {
            source: "nodoNoRenovable",
            target: "nodoRNTyRGD",
            width: 5,
            backgroundColorKey: "FondoNodo",
            length: "190",
            curve: 0,
            particleColorsKeys: [
              "Biomasa",
              "Carbon",
              "GasNatural",
              "EnergiaHidrica",
              "EnergiaSolar",
              "EnergiaEolica",
              "Geotermia",
              "Biogas",
              "Uranio",
            ],
          },
          {
            source: "nodoRenovable",
            target: "nodoRNTyRGD",
            width: 5,
            backgroundColorKey: "FondoNodo",
            length: "190",
            curve: 0,
            particleColorsKeys: [
              "Biomasa",
              "Carbon",
              "GasNatural",
              "EnergiaHidrica",
              "EnergiaSolar",
              "EnergiaEolica",
              "Geotermia",
              "Biogas",
              "Uranio",
            ],
          },
          {
            source: "nodoRNTyRGD",
            target: "nodoOfertaDisponible",
            width: 5,
            backgroundColorKey: "FondoNodo",
            length: "190",
            curve: 0,
            particleColorsKeys: [
              "Biomasa",
              "Carbon",
              "GasNatural",
              "EnergiaHidrica",
              "EnergiaSolar",
              "EnergiaEolica",
              "Geotermia",
              "Biogas",
              "Uranio",
            ],
          },
          {
            source: "nodoOfertaDisponible",
            target: "nodoHogar",
            width: 5,
            backgroundColorKey: "FondoNodo",
            length: "190",
            curve: 0,
            particleColorsKeys: [
              "Biomasa",
              "Carbon",
              "GasNatural",
              "EnergiaHidrica",
              "EnergiaSolar",
              "EnergiaEolica",
              "Geotermia",
              "Biogas",
              "Uranio",
              "Petroleo",
            ],
          },
          {
            source: "nodoOfertaDisponible",
            target: "nodoTransporte",
            width: 5,
            backgroundColorKey: "FondoNodo",
            length: "190",
            curve: 0,
            particleColorsKeys: [
              "Biomasa",
              "Carbon",
              "GasNatural",
              "EnergiaHidrica",
              "EnergiaSolar",
              "EnergiaEolica",
              "Geotermia",
              "Biogas",
              "Uranio",
              "Petroleo",
            ],
          },
          {
            source: "nodoOfertaDisponible",
            target: "nodoSPyC",
            width: 5,
            backgroundColorKey: "FondoNodo",
            length: "190",
            curve: 0,
            particleColorsKeys: [
              "Biomasa",
              "Carbon",
              "GasNatural",
              "EnergiaHidrica",
              "EnergiaSolar",
              "EnergiaEolica",
              "Geotermia",
              "Biogas",
              "Uranio",
              "Petroleo",
            ],
          },
          {
            source: "nodoOfertaDisponible",
            target: "nodoAgricultura",
            width: 5,
            backgroundColorKey: "FondoNodo",
            length: "190",
            curve: 0,
            particleColorsKeys: [
              "Biomasa",
              "Carbon",
              "GasNatural",
              "EnergiaHidrica",
              "EnergiaSolar",
              "EnergiaEolica",
              "Geotermia",
              "Biogas",
              "Uranio",
              "Petroleo",
            ],
          },
          {
            source: "nodoOfertaDisponible",
            target: "nodoIndustria",
            width: 5,
            backgroundColorKey: "FondoNodo",
            length: "190",
            curve: 0,
            particleColorsKeys: [
              "Biomasa",
              "Carbon",
              "GasNatural",
              "EnergiaHidrica",
              "EnergiaSolar",
              "EnergiaEolica",
              "Geotermia",
              "Biogas",
              "Uranio",
              "Petroleo",
            ],
          },
          {
            source: "nodoOfertaDisponible",
            target: "nodoEnergía",
            width: 5,
            backgroundColorKey: "FondoNodo",
            length: "190",
            curve: 0,
            particleColorsKeys: [
              "Biomasa",
              "Carbon",
              "GasNatural",
              "EnergiaHidrica",
              "EnergiaSolar",
              "EnergiaEolica",
              "Geotermia",
              "Biogas",
              "Uranio",
              "Petroleo",
            ],
          },
          //Nodo Retroalimentación
          {
            source: "nodoUsosFinales",
            target: "Transformación",
            width: 5,
            backgroundColorKey: "FondoNodo",
            length: "5500",
            curve: 18,
            particleColorsKeys: [
              "Biomasa",
              "Carbon",
              "GasNatural",
              "EnergiaHidrica",
              "EnergiaSolar",
              "EnergiaEolica",
              "Geotermia",
              "Biogas",
              "Uranio",
              "Petroleo",
            ],
            type: "retroalimentacion",
          },

          //... otros links
        ];

        function getColorForConsumo(consumo, nombre){
            if(nombre === "Hogares"){
                switch (consumo){
                    case "Solar":
                        return "#2CAFFE";
                    case "Leña":
                        return "#544FC5";
                    case "Gas licuado":
                        return "#00E272";
                    case "Gas seco":
                        return "#FE6A35";
                    case "Energía eléctrica":
                        return "#6B8ABC";
                    default:
                        return "#FFD733";
                }
            } else if(nombre === "Transporte"){
                switch (consumo){
                    case "Gasolinas y naftas":
                        return "#2CAFFE";
                    case "Gas licuado":
                        return "#544FC5";
                    case "Diésel":
                        return "#00E272";
                    case "Gas seco":
                        return "#FE6A35";
                    case "Querosenos":
                        return "#6B8ABC";
                    case "Energía eléctrica":
                        return "#D568FB";
                    default:
                        return "#FFD733";
                }
            } else if(nombre === "Serv. Púb. y Com."){
                switch (consumo){
                    case "Solar":
                        return "#2CAFFE";
                    case "Gas licuado":
                        return "#544FC5";
                    case "Diésel":
                        return "#00E272";
                    case "Gas seco":
                        return "#FE6A35";
                    case "Energía eléctrica":
                        return "#6B8ABC";
                    default:
                        return "#FFD733";
                }
            } else if(nombre === "Agricultura"){
                switch (consumo){
                    case "Gas licuado":
                        return "#2CAFFE";
                    case "Diésel":
                        return "#544FC5";
                    case "Energía eléctrica":
                        return "#00E272";
                    default:
                        return "#FFD733";
                }
            } else if(nombre === "Industrial"){
                switch (consumo){
                    case "Coque de carbón":
                        return "#2CAFFE";
                    case "Coque de petróleo":
                        return "#544FC5";
                    case "Gas licuado":
                        return "#00E272";
                    case "Gasolinas y naftas":
                        return "#FE6A35";
                    case "Querosenos":
                        return "#6B8ABC";
                    case "Diésel":
                        return "#D568FB";
                    case "Combustóleo":
                        return "#2EE0CA";
                    case "Gas seco":
                        return "#FA4B42";
                    case "Energía eléctrica":
                        return "#FEB56A";
                    default:
                        return "#FFD733";
                }
            } else if(nombre === "Sector Energía"){
                switch (consumo){
                    case "Calor":
                        return "#2CAFFE";
                    case "Combustible":
                        return "#544FC5";
                    case "Electricidad":
                        return "#00E272";
                    default:
                        return "#FFD733";
                }
            }
        }

        function getImageFromNombre(nombre) {
            switch (nombre) {
                case "Carbón": //quitar el ejemplo cuando se tenga la imagen
                    return "/img/carboni.png";
                case "Condensados": //quitar el ejemplo cuando se tenga la imagen
                    return "/img/condensadosi.png";
                case "Gas Natural": //quitar el ejemplo cuando se tenga la imagen
                    return "/img/gasnaturali.png";
                case "Petróleo crudo": //quitar el ejemplo cuando se tenga la imagen
                    return "/img/petroleoi.png";
                case "Nucloenergía": //quitar el ejemplo cuando se tenga la imagen
                    return "/img/Iconos Electricidad_Nuclear.png";
                case "Bagazo de caña": //quitar el ejemplo cuando se tenga la imagen
                    return "/img/Iconos Petrolíferos_Barril de petroleo.png";
                case "Biogas": //quitar el ejemplo cuando se tenga la imagen
                    return "/img/biogasi.png";
                case "Energía Eólica": //quitar el ejemplo cuando se tenga la imagen
                    return "/img/vientoi.png";
                case "Energía Solar": //quitar el ejemplo cuando se tenga la imagen
                    return "/img/soli.png";
                case "Geoenergía": //quitar el ejemplo cuando se tenga la imagen
                    return "/img/geotermiai.png";
                case "Hidroenergía": //quitar el ejemplo cuando se tenga la imagen
                    return "/img/aguai.png";
                case "Leña": //quitar el ejemplo cuando se tenga la imagen
                    return "/img/glpmapa.png";
                case "Refinerías": //quitar el ejemplo cuando se tenga la imagen
                    return "/img/Iconos Petrolíferos_Refineria.png";
                case "Carboeléctrica": //quitar el ejemplo cuando se tenga la imagen
                    return "/img/Iconos Electricidad_Carbon.png";
                case "Combustión Interna": //quitar el ejemplo cuando se tenga la imagen
                    return "/img/combin.png";
                case "Ciclo Combinado":
                    return "/img/Iconos Electricidad_Combustoleo.png"
                case "Térmica convencional":
                    return "/img/combin.png"
                case "Hidroeléctrica":
                    return "/img/hidroelec.png"
                case "Fotovoltaica":
                    return "/img/foto.png"
                case "Turbo Gas": //quitar el ejemplo cuando se tenga la imagen
                    return "/img/gasyvapor.png";
                case "Vapor": //quitar el ejemplo cuando se tenga la imagen
                    return "/img/gasyvapor.png";
                case "Nucleoeléctrica": //quitar el ejemplo cuando se tenga la imagen
                    return "/img/Iconos Electricidad_Centrales Electricas.png";
                case "Eólica": //quitar el ejemplo cuando se tenga la imagen
                    return "/img/Iconos Electricidad_Eolica.png";
                case "Geotermoeléctrica": //quitar el ejemplo cuando se tenga la imagen
                    return "/img/Iconos Electricidad_Geotérmica.png";
                @* case "Centrales eléctricas":
                    return "/img/Iconos Electricidad_Centrales Electricas.png"
                case "Petrolíferos":
                    return "/img/Iconos Petrolíferos-29.png" *@
                case "Distribución":
                    return "/img/s_distribucion.png"
                case "RNT":
                    return "/img/s_rntyrgd.png"
                case "RGD":
                    return "/img/rnd.png"
                case "Hogares":
                    return "/img/hogar.png"
                case "Serv. Púb. y Com.":
                    return "/img/servicio.png"
                case "Público":
                    return "/img/servicio.png"
                case "Transporte":
                    return "/img/camioni.png"
                case "Agricultura":
                    return "/img/agricultura.png"
                case "Industrial":
                    return "/img/industria.png"
                case "Sector Energía":
                    return "/img/sectore.png"

            }
        }

        function getColorFromNombre(nombre) {
            switch (nombre) {
                case "Petróleo crudo":
                    return coloresEnergia.Petroleo;
                case "Biomasa":
                    return coloresEnergia.Biomasa;
                case "Carbón":
                    return coloresEnergia.Carbon;
                case "Gas Natural":
                    return coloresEnergia.GasNatural;
                case "Hidroenergía":
                    return coloresEnergia.EnergiaHidrica;
                case "Energía Solar":
                    return coloresEnergia.EnergiaSolar;
                case "Energía Eólica":
                    return coloresEnergia.EnergiaEolica;
                case "Geoenergía":
                    return coloresEnergia.Geotermia;
                case "Biogas":
                    return coloresEnergia.Biogas;
                case "Uranio":
                    return coloresEnergia.Uranio;
                case "Condensados":
                    return coloresEnergia.Condensados;
                case "Nucloenergía":
                    return coloresEnergia.Nucleoenergia;
                case "Bagazo de caña":
                    return coloresEnergia.BagazoCana;
                case "Leña":
                    return coloresEnergia.Lena;
                // ... Agrega cualquier otro nodo específico aquí
                case "FEP - Fuentes de Energía Primaria":
                    return coloresEnergia.Envoltura;
                case "Usos Finales":
                    return coloresEnergia.Envoltura;
                case "Transformación":
                    return coloresEnergia.Envoltura;
                case "Retroalimentación":
                    return coloresEnergia.Envoltura;
                case "Oferta Total":
                    return coloresEnergia.FondoNodo;
                default:
                    return coloresEnergia.FondoNodo; // Color por defecto
            }
        }
    });
</script>
