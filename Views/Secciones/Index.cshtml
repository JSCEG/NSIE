@model List<NSIE.Models.SeccionConModulos>
@{
    ViewData["Title"] = "Gestión de Secciones";
}

<!-- Título a ancho completo SIN contenedor -->
<div class="text-center mb-4">
    <h3 class="cp-section cp-grouping-section">
        <img src="@Cdn.Url/img_snier/vistas/iconos/secciones.png" class="iconomenu" alt="Secciones">
        @ViewData["Title"]
    </h3>
</div>

<!-- Contenedor principal con padding lateral DESDE breadcrumb en adelante -->
<div class="container-fluid ps-5 pe-5">

    <!-- Breadcrumb -->
    <nav aria-label="breadcrumb" class="mb-3">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a asp-controller="Home" asp-action="Index">Inicio</a></li>
            <li class="breadcrumb-item active" aria-current="page">Secciones</li>
        </ol>
    </nav>

    <!-- Header con estadísticas y controles -->
    <div class="row mb-4">
        <div class="col-md-6">
            <div class="alert alert-info">
                <h5 class="mb-1">
                    <i class="fas fa-layer-group text-primary"></i>
                    Sistema de Gestión de Secciones
                </h5>
                <p class="mb-0">
                    Total de Secciones: @Model.Count() |
                    Activas: @Model.Count(s => s.Activo) |
                    Inactivas: @Model.Count(s => !s.Activo)
                </p>
            </div>
        </div>
        <div class="col-md-6 text-end">
            <div class="btn-group" role="group">
                <!-- Filtros -->
                <button type="button" class="btn btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown">
                    <i class="fas fa-filter"></i> Filtros
                </button>
                <ul class="dropdown-menu">
                    <li><a class="dropdown-item" href="#" onclick="filtrarSecciones('todas')">Todas las secciones</a>
                    </li>
                    <li><a class="dropdown-item" href="#" onclick="filtrarSecciones('activas')">Solo activas</a></li>
                    <li><a class="dropdown-item" href="#" onclick="filtrarSecciones('inactivas')">Solo inactivas</a>
                    </li>
                </ul>

                <!-- Ordenar -->
                <button type="button" class="btn btn-outline-info" onclick="toggleModoOrden()">
                    <i class="fas fa-sort"></i> <span id="textoOrden">Ordenar</span>
                </button>

                <!-- Nueva Sección -->
                <button class="btn btn-success" onclick="abrirModalNuevaSeccion()">
                    <i class="bi bi-plus-circle"></i> Nueva Sección
                </button>
            </div>
        </div>
    </div>

    <!-- Tabla de Secciones -->
    @if (Model.Any())
    {
        <div class="table-responsive">
            <table id="tablaSecciones" class="table table-striped table-hover w-100">
                <thead class="table-dark">
                    <tr>
                        <th style="width:6%">
                            <span id="headerOrden">Orden</span>
                            <div id="botonesOrden" class="d-none">
                                <button class="btn btn-sm btn-success me-1" onclick="guardarNuevoOrden()">
                                    <i class="fas fa-save"></i>
                                </button>
                                <button class="btn btn-sm btn-secondary" onclick="cancelarOrden()">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                        </th>
                        <th style="width:18%">Acciones</th> <!-- ✅ MOVIDO COMO SEGUNDA COLUMNA -->
                        <th style="width:22%">Título</th>
                        <th style="width:22%">Descripción</th>
                        <th style="width:14%">Responsable</th>
                        <th style="width:10%">Módulos</th>
                        <th style="width:8%">Estado</th>
                    </tr>
                </thead>
                <tbody id="cuerpoTabla">
                    @foreach (var seccion in Model.OrderBy(s => s.Orden))
                    {
                        <tr data-seccion-id="@seccion.Id" data-activa="@seccion.Activo.ToString().ToLower()">
                            <td>
                                <!-- Modo normal -->
                                <span class="badge bg-primary orden-normal">@seccion.Orden</span>

                                <!-- Modo ordenar (oculto inicialmente) -->
                                <div class="orden-editable d-none">
                                    <div class="d-flex align-items-center">
                                        <button class="btn btn-sm btn-outline-primary me-1"
                                            onclick="moverSeccion(@seccion.Id, 'arriba')" title="Subir">
                                            <i class="fas fa-chevron-up"></i>
                                        </button>
                                        <span class="badge bg-warning mx-1 orden-numero">@seccion.Orden</span>
                                        <button class="btn btn-sm btn-outline-primary ms-1"
                                            onclick="moverSeccion(@seccion.Id, 'abajo')" title="Bajar">
                                            <i class="fas fa-chevron-down"></i>
                                        </button>
                                    </div>
                                </div>
                            </td>

                            <!-- ✅ COLUMNA DE ACCIONES COMO SEGUNDA -->
                            <td>
                                <div class="btn-group-vertical d-grid gap-1" role="group">
                                    <!-- Fila 1: Editar y Módulos -->
                                    <div class="btn-group" role="group">
                                        <button class="btn btn-sm btn-outline-warning"
                                            onclick="abrirModalEditarSeccion(@seccion.Id)" title="Editar sección">
                                            <i class="fas fa-edit"></i> Editar
                                        </button>
                                        <a asp-action="EditarModulos" asp-route-id="@seccion.Id"
                                            class="btn btn-sm btn-outline-primary" title="Gestionar módulos">
                                            <i class="fas fa-cubes"></i> Módulos
                                        </a>
                                    </div>

                                    <!-- Fila 2: Activar/Desactivar y Eliminar -->
                                    <div class="btn-group" role="group">
                                        <button type="button"
                                            class="btn btn-sm @(seccion.Activo ? "btn-outline-secondary" : "btn-outline-success")"
                                            onclick="toggleActivarSeccion(@seccion.Id, @seccion.Activo.ToString().ToLower())"
                                            title="@(seccion.Activo ? "Desactivar" : "Activar") sección">
                                            <i class="fas fa-@(seccion.Activo ? "eye-slash" : "eye")"></i>
                                            @(seccion.Activo ? "Desactivar" : "Activar")
                                        </button>
                                        <button type="button" class="btn btn-sm btn-outline-danger"
                                            onclick="eliminarSeccionAjax(@seccion.Id)" title="Eliminar sección">
                                            <i class="fas fa-trash-alt"></i> Eliminar
                                        </button>
                                    </div>
                                </div>
                            </td>

                            <td>
                                <div>
                                    <strong class="@(seccion.Activo ? "" : "text-muted")">@seccion.Titulo</strong>
                                    @if (!string.IsNullOrEmpty(seccion.Articulos))
                                    {
                                        <br>
                            
                                        <small class="text-muted">@seccion.Articulos</small>
                                    }
                                    @if (!string.IsNullOrEmpty(seccion.FundamentoLegal))
                                    {
                                        <br>
                            
                                        <small class="text-info">@seccion.FundamentoLegal</small>
                                    }
                            </div>
                        </td>
                        <td>
                            <small class="text-muted">
                                @(string.IsNullOrEmpty(seccion.Descripcion) ? "Sin descripción" :
                                                            (seccion.Descripcion.Length > 80 ? seccion.Descripcion.Substring(0, 80) + "..." :
                                                            seccion.Descripcion))
                                                                             </small>
                                                                         </td>
                                                                         <td>
                                                                             <small class="text-muted">
                                @(string.IsNullOrEmpty(seccion.ResponsableNormativo) ? "No asignado" :
                                                            seccion.ResponsableNormativo)
                        </small>
                    </td>
                    <td>
                        <div class="d-flex align-items-center">
                            <span class="badge bg-info me-2" id="contador-modulos-@seccion.Id">
                                <i class="fas fa-spinner fa-spin"></i>
                            </span>
                        </div>
                    </td>
                    <td>
                        <span class="badge @(seccion.Activo ? "bg-success" : "bg-danger")">
                            @(seccion.Activo ? "Activa" : "Inactiva")
                        </span>
                    </td>
                </tr>
                                }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <div class="alert alert-info">
            <i class="fas fa-info-circle"></i>
            <strong>Sin secciones registradas</strong><br>
            No hay secciones registradas en el sistema. Haz clic en "Nueva Sección" para agregar la primera.
        </div>
    }

</div> <!-- Fin del contenedor principal -->

<!-- Modal para crear/editar sección -->
<div class="modal fade" id="seccionModal" tabindex="-1">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div id="contenidoModalSeccion">
                <!-- Aquí se carga el contenido dinámico -->
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let seccionModal;
        let tablaSecciones;
        let modoOrden = false;
        let ordenOriginal = {};

        $(document).ready(function () {
            // Inicializar modal
            seccionModal = new bootstrap.Modal(document.getElementById('seccionModal'));

            // Inicializar DataTable si existe la tabla
            if ($('#tablaSecciones').length) {
                tablaSecciones = $('#tablaSecciones').DataTable({
                    "language": {
                        "url": "//cdn.datatables.net/plug-ins/1.13.6/i18n/es-ES.json"
                    },
                    "responsive": true,
                    "pageLength": 25,
                    "order": [[0, "asc"]], // Ordenar por columna Orden
                    "columnDefs": [
                        { "orderable": false, "targets": [1] }, // Deshabilitar ordenamiento en Acciones
                        { "searchable": false, "targets": [0, 1, 5, 6] } // Solo buscar en título, descripción, responsable
                    ]
                });
            }

            // Cargar contadores de módulos
            cargarContadoresModulos();

            // Guardar orden original
            guardarOrdenOriginal();
        });

        function cargarContadoresModulos() {
                @foreach (var seccion in Model)
                {
                    <text>
                        cargarContadorModulos(@seccion.Id);
                    </text>
            }
            }

        function cargarContadorModulos(seccionId) {
            $.ajax({
                url: '@Url.Action("ContarModulos", "Secciones")',
                data: { seccionId: seccionId },
                method: 'GET',
                timeout: 5000,
                success: function (count) {
                    console.log('✅ Contador para sección ' + seccionId + ': ' + count);

                    const $badge = $("#contador-modulos-" + seccionId);
                    if ($badge.length) {
                        $badge.html(count + ' módulo' + (count === 1 ? '' : 's'));

                        // Cambiar color según cantidad
                        $badge.removeClass('bg-info bg-success bg-secondary bg-warning');
                        if (count === 0) {
                            $badge.addClass('bg-secondary');
                        } else if (count <= 2) {
                            $badge.addClass('bg-info');
                        } else if (count <= 5) {
                            $badge.addClass('bg-success');
                        } else {
                            $badge.addClass('bg-warning');
                        }
                    }
                },
                error: function (xhr, status, error) {
                    console.error('❌ Error cargando contador para sección ' + seccionId + ':', error);

                    const $badge = $("#contador-modulos-" + seccionId);
                    if ($badge.length) {
                        $badge.html('Error');
                        $badge.removeClass('bg-info').addClass('bg-danger');
                    }
                }
            });
        }

        // ✅ FUNCIONES DE FILTRADO
        function filtrarSecciones(tipo) {
            const $filas = $('#tablaSecciones tbody tr');

            $filas.show(); // Mostrar todas primero

            if (tipo === 'activas') {
                $filas.filter('[data-activa="false"]').hide();
            } else if (tipo === 'inactivas') {
                $filas.filter('[data-activa="true"]').hide();
            }
            // 'todas' no necesita filtro adicional
        }

        // ✅ FUNCIONES DE ORDENAMIENTO MEJORADAS
        function guardarOrdenOriginal() {
            $('#tablaSecciones tbody tr').each(function (index) {
                const seccionId = $(this).data('seccion-id');
                const orden = parseInt($(this).find('.orden-normal').text());
                ordenOriginal[seccionId] = orden;
            });
            console.log('>>> Orden original guardado:', ordenOriginal);
        }

        function toggleModoOrden() {
            modoOrden = !modoOrden;

            if (modoOrden) {
                // Entrar en modo ordenar
                $('.orden-normal').addClass('d-none');
                $('.orden-editable').removeClass('d-none');
                $('#botonesOrden').removeClass('d-none');
                $('#headerOrden').addClass('d-none');
                $('#textoOrden').text('Cancelar');

                console.log('>>> Modo ordenar ACTIVADO');

                // Deshabilitar DataTable sorting
                if (tablaSecciones) {
                    tablaSecciones.order.neutral().draw();
                }

                Swal.fire({
                    title: 'Modo Ordenar Activado',
                    text: 'Use las flechas para cambiar el orden. Haga clic en Guardar cuando termine.',
                    icon: 'info',
                    timer: 3000,
                    showConfirmButton: false
                });
            } else {
                // Salir del modo ordenar
                cancelarOrden();
            }
        }

        function cancelarOrden() {
            console.log('>>> Cancelando orden');
            modoOrden = false;
            $('.orden-normal').removeClass('d-none');
            $('.orden-editable').addClass('d-none');
            $('#botonesOrden').addClass('d-none');
            $('#headerOrden').removeClass('d-none');
            $('#textoOrden').text('Ordenar');

            // Restaurar orden original
            restaurarOrdenOriginal();
        }

        function restaurarOrdenOriginal() {
            $('#tablaSecciones tbody tr').each(function () {
                const seccionId = $(this).data('seccion-id');
                const ordenOriginalNum = ordenOriginal[seccionId];
                $(this).find('.orden-numero').text(ordenOriginalNum);
            });
            console.log('>>> Orden original restaurado');
        }

        function moverSeccion(seccionId, direccion) {
            console.log(`>>> Moviendo sección ${seccionId} ${direccion}`);

            const $fila = $(`tr[data-seccion-id="${seccionId}"]`);
            const $ordenSpan = $fila.find('.orden-numero');
            let ordenActual = parseInt($ordenSpan.text());

            // Obtener todos los órdenes actuales
            const todosLosOrdenes = [];
            $('#tablaSecciones tbody tr').each(function () {
                todosLosOrdenes.push(parseInt($(this).find('.orden-numero').text()));
            });

            const minOrden = Math.min(...todosLosOrdenes);
            const maxOrden = Math.max(...todosLosOrdenes);

            console.log(`>>> Orden actual: ${ordenActual}, Min: ${minOrden}, Max: ${maxOrden}`);

            if (direccion === 'arriba' && ordenActual > minOrden) {
                const nuevoOrden = ordenActual - 1;

                // Buscar la fila que tiene el orden que queremos y intercambiar
                const $filaIntercambio = $(`tr`).filter(function () {
                    return parseInt($(this).find('.orden-numero').text()) === nuevoOrden;
                });

                if ($filaIntercambio.length) {
                    $filaIntercambio.find('.orden-numero').text(ordenActual);
                    console.log(`>>> Intercambió orden ${nuevoOrden} por ${ordenActual}`);
                }

                $ordenSpan.text(nuevoOrden);
                console.log(`>>> Sección ${seccionId} movida a orden ${nuevoOrden}`);

            } else if (direccion === 'abajo' && ordenActual < maxOrden) {
                const nuevoOrden = ordenActual + 1;

                // Buscar la fila que tiene el orden que queremos y intercambiar
                const $filaIntercambio = $(`tr`).filter(function () {
                    return parseInt($(this).find('.orden-numero').text()) === nuevoOrden;
                });

                if ($filaIntercambio.length) {
                    $filaIntercambio.find('.orden-numero').text(ordenActual);
                    console.log(`>>> Intercambió orden ${nuevoOrden} por ${ordenActual}`);
                }

                $ordenSpan.text(nuevoOrden);
                console.log(`>>> Sección ${seccionId} movida a orden ${nuevoOrden}`);
            } else {
                console.log(`>>> No se puede mover ${direccion}, límite alcanzado`);
            }
        }

        function guardarNuevoOrden() {
            console.log('>>> Guardando nuevo orden');

            const cambios = [];

            $('#tablaSecciones tbody tr').each(function () {
                const seccionId = $(this).data('seccion-id');
                const nuevoOrden = parseInt($(this).find('.orden-numero').text());
                const ordenOriginalNum = parseInt(ordenOriginal[seccionId]);

                if (nuevoOrden !== ordenOriginalNum) {
                    cambios.push({ seccionId, nuevoOrden });
                    console.log(`>>> Cambio detectado: Sección ${seccionId} de orden ${ordenOriginalNum} a ${nuevoOrden}`);
                }
            });

            console.log('>>> Cambios a enviar:', cambios);

            if (cambios.length === 0) {
                Swal.fire('Info', 'No hay cambios en el orden', 'info');
                cancelarOrden();
                return;
            }

            // Enviar cambios al servidor
            $.ajax({
                url: '@Url.Action("ActualizarOrdenSecciones", "Secciones")',
                method: 'POST',
                data: JSON.stringify(cambios),
                contentType: 'application/json',
                success: function (response) {
                    console.log('>>> Orden actualizado en servidor');
                    Swal.fire('Éxito', 'Orden actualizado correctamente', 'success');
                    cancelarOrden();
                    // Actualizar orden original con los nuevos valores
                    guardarOrdenOriginal();
                    location.reload();
                },
                error: function (xhr, status, error) {
                    console.error('>>> Error al actualizar orden:', error);
                    Swal.fire('Error', 'Error al actualizar el orden', 'error');
                    cancelarOrden();
                }
            });
        }

        // ✅ FUNCIONES DE MODALES
        function abrirModalNuevaSeccion() {
            console.log('>>> Abriendo modal nueva sección');
            const url = '@Url.Action("CrearSeccion", "Secciones")';
            cargarModalSeccion(url);
        }

        function abrirModalEditarSeccion(seccionId) {
            console.log('>>> Abriendo modal editar sección ID:', seccionId);
            const url = '@Url.Action("ModalEditarSeccion", "Secciones")?id=' + seccionId;
            cargarModalSeccion(url);
        }

        function cargarModalSeccion(url) {
            console.log('>>> Cargando modal desde URL:', url);

            // Mostrar indicador de carga
            $('#contenidoModalSeccion').html('<div class="text-center p-4"><i class="fas fa-spinner fa-spin fa-2x"></i><br>Cargando...</div>');
            seccionModal.show();

            $.get(url)
                .done(function (html) {
                    console.log('>>> Modal cargado exitosamente');
                    $('#contenidoModalSeccion').html(html);
                })
                .fail(function (xhr, status, error) {
                    console.error('>>> Error cargando modal:', error);
                    seccionModal.hide();

                    let mensaje = 'Error al cargar el modal';
                    if (xhr.status === 404) {
                        mensaje = 'Modal no encontrado';
                    } else if (xhr.status === 400) {
                        mensaje = xhr.responseText || 'Datos incorrectos';
                    } else if (xhr.status === 500) {
                        mensaje = 'Error interno del servidor';
                    }

                    Swal.fire('Error', mensaje, 'error');
                });
        }

        // ✅ FUNCIONES DE ACCIONES
        function toggleActivarSeccion(seccionId, estaActiva) {
            const accion = estaActiva ? 'desactivar' : 'activar';
            const titulo = estaActiva ? '¿Desactivar sección?' : '¿Activar sección?';

            Swal.fire({
                title: titulo,
                text: `¿Está seguro que desea ${accion} esta sección?`,
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: `Sí, ${accion}`,
                cancelButtonText: 'Cancelar'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.post('@Url.Action("ToggleActivarSeccion", "Secciones")', {
                        id: seccionId,
                        activar: !estaActiva
                    })
                        .done(function (response) {
                            Swal.fire('Éxito', response.mensaje, 'success');
                            location.reload();
                        })
                        .fail(function () {
                            Swal.fire('Error', 'Error al cambiar el estado de la sección', 'error');
                        });
                }
            });
        }

        function eliminarSeccionAjax(seccionId) {
            console.log('>>> Intentando eliminar sección ID:', seccionId);
            
            Swal.fire({
                title: '¿Eliminar sección?',
                text: "Esta acción eliminará la sección y todos sus módulos y vistas asociadas",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Sí, eliminar',
                cancelButtonText: 'Cancelar'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '@Url.Action("EliminarSeccionAjax", "Secciones")',
                        method: 'POST',
                        data: { id: seccionId },
                        success: function(response) {
                            console.log('>>> Respuesta eliminar:', response);
                            
                            if (response.success || response.mensaje) {
                                Swal.fire({
                                    title: '¡Eliminada!',
                                    text: response.mensaje || 'Sección eliminada correctamente',
                                    icon: 'success',
                                    timer: 2000,
                                    showConfirmButton: false
                                }).then(() => {
                                    location.reload();
                                });
                            } else if (response.error) {
                                Swal.fire('Error', response.error, 'error');
                            } else {
                                Swal.fire('Error', 'Respuesta inesperada del servidor', 'error');
                            }
                        },
                        error: function(xhr, status, error) {
                            console.error('>>> Error eliminando sección:', {
                                status: xhr.status,
                                statusText: xhr.statusText,
                                responseText: xhr.responseText,
                                error: error
                            });
                            
                            let mensaje = 'Error al eliminar la sección';
                            
                            if (xhr.status === 400) {
                                mensaje = xhr.responseText || 'Datos incorrectos - Verifique la consola del navegador';
                            } else if (xhr.status === 404) {
                                mensaje = 'Método no encontrado en el servidor';
                            } else if (xhr.status === 500) {
                                mensaje = 'Error interno del servidor';
                            }
                            
                            Swal.fire('Error', mensaje, 'error');
                        }
                    });
                }
            });
        }
    </script>
}
