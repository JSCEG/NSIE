@{
    ViewData["Title"] = "Infraestructuta Solar";
}

<div class="text-center ">
    <h1 class="display-4 titulo fw-bold "></i>@ViewData["Title"]</h1>
</div>




<div id="map" style="height: 500px;"></div>

<hr />
<div class="container">
    <div class="row d-flex justify-content-center">
        <div class="col ">
            <button class="btn btn-cre-rojo" data-bs-toggle="offcanvas" data-bs-target="#ejemploOffcanvas">
               <i class="bi bi-info-circle-fill"></i> - Ver Información Acerca de este Mapa
            </button>
          
        </div>
        <div class="col ">
            <select id="estado" class="form-select  " aria-label=".form-select-sm ">
                <option selected>
                    Selecciona un estado:
                </option>
                <option value="ags">Aguascalientes</option>
                <option value="bc">Baja California</option>
                <option value="bcs">Baja California Sur</option>
                <option value="camp">Campeche</option>
                <option value="coah">Coahuila</option>
                <option value="col">Colima</option>
                <option value="chis">Chiapas</option>
                <option value="chih">Chihuahua</option>
                <option value="cdmx">Ciudad de México</option>
                <option value="dgo">Durango</option>
                <option value="gto">Guanajuato</option>
                <option value="gro">Guerrero</option>
                <option value="hgo">Hidalgo</option>
                <option value="jal">Jalisco</option>
                <option value="mex">México</option>
                <option value="mich">Michoacán</option>
                <option value="mor">Morelos</option>
                <option value="nay">Nayarit</option>
                <option value="nl">Nuevo León</option>
                <option value="oax">Oaxaca</option>
                <option value="pue">Puebla</option>
                <option value="qro">Querétaro</option>
                <option value="qroo">Quintana Roo</option>
                <option value="slp">San Luis Potosí</option>
                <option value="sin">Sinaloa</option>
                <option value="son">Sonora</option>
                <option value="tab">Tabasco</option>
                <option value="tamps">Tamaulipas</option>
                <option value="tlax">Tlaxcala</option>
                <option value="ver">Veracruz</option>
                <option value="yuc">Yucatán</option>
                <option value="zac">Zacatecas</option>
            </select>
        </div>

        <partial name="_Infomapas_E"/>

    </div>
</div>









<script src="~/Mapas/Públicos/SEM/js/qgis2web_expressions.js"></script>
<script src="~/Mapas/Públicos/SEM/js/leaflet.js"></script>
<script src="~/Mapas/Públicos/SEM/js/leaflet-svg-shape-markers.min.js"></script>
<script src="~/Mapas/Públicos/SEM/js/leaflet.rotatedMarker.js"></script>
<script src="~/Mapas/Públicos/SEM/js/leaflet.pattern.js"></script>
<script src="~/Mapas/Públicos/SEM/js/leaflet-hash.js"></script>
<script src="~/Mapas/Públicos/SEM/js/Autolinker.min.js"></script>
<script src="~/Mapas/Públicos/SEM/js/rbush.min.js"></script>
<script src="~/Mapas/Públicos/SEM/js/labelgun.min.js"></script>
<script src="~/Mapas/Públicos/SEM/js/labels.js"></script>
<script src="~/Mapas/Públicos/SEM/js/leaflet-control-geocoder.Geocoder.js"></script>
<script src="~/Mapas/Públicos/SEM/js/leaflet-measure.js"></script>
<script src="~/Mapas/Públicos/SEM/js/leaflet-search.js"></script>

<script src="~/Mapas/Públicos/SEM/data/IrradianciasolarkWhm2Da_2.js"></script>
<script src="~/Mapas/Públicos/SEM/data/Fotovoltaicas_3.js"></script>
<script src="~/Mapas/Públicos/SEM/data/BusquedaFotovoltaicas_4.js"></script>

 <script>
    var map = L.map('map', {
        zoomControl: true, maxZoom: 28, minZoom: 1
    })
    var hash = new L.Hash(map);
    map.attributionControl.setPrefix('<a href="https://github.com/tomchadwin/qgis2web" target="_blank">qgis2web</a> &middot; <a href="https://leafletjs.com" title="A JS library for interactive maps">Leaflet</a> &middot; <a href="https://qgis.org">QGIS</a>');
    var autolinker = new Autolinker({ truncate: { length: 30, location: 'smart' } });
    var measureControl = new L.Control.Measure({
        position: 'topleft',
        primaryLengthUnit: 'meters',
        secondaryLengthUnit: 'kilometers',
        primaryAreaUnit: 'sqmeters',
        secondaryAreaUnit: 'hectares'
    });
    measureControl.addTo(map);
    document.getElementsByClassName('leaflet-control-measure-toggle')[0]
        .innerHTML = '';
    document.getElementsByClassName('leaflet-control-measure-toggle')[0]
        .className += ' fas fa-ruler';
    var bounds_group = new L.featureGroup([]);
    function setBounds() {
        if (bounds_group.getLayers().length) {
            map.fitBounds(bounds_group.getBounds());
        }
    }
    map.createPane('pane_satelitegoogle_0');
    map.getPane('pane_satelitegoogle_0').style.zIndex = 400;
    var layer_satelitegoogle_0 = L.tileLayer('http://www.google.cn/maps/vt?lyrs=s@189&gl=cn&x={x}&y={y}&z={z}', {
        pane: 'pane_satelitegoogle_0',
        opacity: 1.0,
        attribution: '',
        minZoom: 1,
        maxZoom: 28,
        minNativeZoom: 0,
        maxNativeZoom: 18
    });
    layer_satelitegoogle_0;
    map.createPane('pane_Mapagoogle_1');
    map.getPane('pane_Mapagoogle_1').style.zIndex = 401;
    var layer_Mapagoogle_1 = L.tileLayer('https://mt1.google.com/vt/lyrs=r&x={x}&y={y}&z={z}', {
        pane: 'pane_Mapagoogle_1',
        opacity: 1.0,
        attribution: '',
        minZoom: 1,
        maxZoom: 28,
        minNativeZoom: 0,
        maxNativeZoom: 18
    });
    layer_Mapagoogle_1;
    map.addLayer(layer_Mapagoogle_1);
    function pop_IrradianciasolarkWhm2Da_2(feature, layer) {
        var popupContent = '<table>\
                        <tr>\
                            <td colspan="2">' + (feature.properties['fid'] !== null ? autolinker.link(feature.properties['fid'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <td colspan="2">' + (feature.properties['cat'] !== null ? autolinker.link(feature.properties['cat'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <td colspan="2">' + (feature.properties['value'] !== null ? autolinker.link(feature.properties['value'].toLocaleString()) : '') + '</td>\
                        </tr>\
                    </table>';
        layer.bindPopup(popupContent, { maxHeight: 400 });
    }

    function style_IrradianciasolarkWhm2Da_2_0(feature) {
        if (feature.properties['value'] >= 3.912000 && feature.properties['value'] <= 4.500000) {
            return {
                pane: 'pane_IrradianciasolarkWhm2Da_2',
                opacity: 1,
                color: 'rgba(35,35,35,0.0)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 1.0,
                fill: true,
                fillOpacity: 1,
                fillColor: 'rgba(255,231,17,1.0)',
                interactive: false,
            }
        }
        if (feature.properties['value'] >= 4.500000 && feature.properties['value'] <= 5.000000) {
            return {
                pane: 'pane_IrradianciasolarkWhm2Da_2',
                opacity: 1,
                color: 'rgba(35,35,35,0.0)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 1.0,
                fill: true,
                fillOpacity: 1,
                fillColor: 'rgba(255,198,9,1.0)',
                interactive: false,
            }
        }
        if (feature.properties['value'] >= 5.000000 && feature.properties['value'] <= 5.500000) {
            return {
                pane: 'pane_IrradianciasolarkWhm2Da_2',
                opacity: 1,
                color: 'rgba(35,35,35,0.0)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 1.0,
                fill: true,
                fillOpacity: 1,
                fillColor: 'rgba(255,156,7,1.0)',
                interactive: false,
            }
        }
        if (feature.properties['value'] >= 5.500000 && feature.properties['value'] <= 6.000000) {
            return {
                pane: 'pane_IrradianciasolarkWhm2Da_2',
                opacity: 1,
                color: 'rgba(35,35,35,0.0)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 1.0,
                fill: true,
                fillOpacity: 1,
                fillColor: 'rgba(255,101,5,1.0)',
                interactive: false,
            }
        }
        if (feature.properties['value'] >= 6.000000 && feature.properties['value'] <= 6.500000) {
            return {
                pane: 'pane_IrradianciasolarkWhm2Da_2',
                opacity: 1,
                color: 'rgba(35,35,35,0.0)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 1.0,
                fill: true,
                fillOpacity: 1,
                fillColor: 'rgba(224,30,0,1.0)',
                interactive: false,
            }
        }
        if (feature.properties['value'] >= 6.500000 && feature.properties['value'] <= 6.552000) {
            return {
                pane: 'pane_IrradianciasolarkWhm2Da_2',
                opacity: 1,
                color: 'rgba(35,35,35,0.0)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 1.0,
                fill: true,
                fillOpacity: 1,
                fillColor: 'rgba(148,0,0,1.0)',
                interactive: false,
            }
        }
    }
    map.createPane('pane_IrradianciasolarkWhm2Da_2');
    map.getPane('pane_IrradianciasolarkWhm2Da_2').style.zIndex = 402;
    map.getPane('pane_IrradianciasolarkWhm2Da_2').style['mix-blend-mode'] = 'normal';
    var layer_IrradianciasolarkWhm2Da_2 = new L.geoJson(json_IrradianciasolarkWhm2Da_2, {
        attribution: '',
        interactive: false,
        dataVar: 'json_IrradianciasolarkWhm2Da_2',
        layerName: 'layer_IrradianciasolarkWhm2Da_2',
        pane: 'pane_IrradianciasolarkWhm2Da_2',
        onEachFeature: pop_IrradianciasolarkWhm2Da_2,
        style: style_IrradianciasolarkWhm2Da_2_0,
    });
    bounds_group.addLayer(layer_IrradianciasolarkWhm2Da_2);
    map.addLayer(layer_IrradianciasolarkWhm2Da_2);
    function pop_Fotovoltaicas_3(feature, layer) {
        var popupContent = '<table>\
                        <tr>\
                            <td colspan="2"><strong>Número de</strong><br />' + (feature.properties['Número de'] !== null ? autolinker.link(feature.properties['Número de'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">Num</th>\
                            <td>' + (feature.properties['Num'] !== null ? autolinker.link(feature.properties['Num'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">Permisiona</th>\
                            <td>' + (feature.properties['Permisiona'] !== null ? autolinker.link(feature.properties['Permisiona'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">Modalidad</th>\
                            <td>' + (feature.properties['Modalidad'] !== null ? autolinker.link(feature.properties['Modalidad'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">Fecha de O</th>\
                            <td>' + (feature.properties['Fecha de O'] !== null ? autolinker.link(feature.properties['Fecha de O'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">Capacidad</th>\
                            <td>' + (feature.properties['Capacidad'] !== null ? autolinker.link(feature.properties['Capacidad'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">Generació</th>\
                            <td>' + (feature.properties['Generació'] !== null ? autolinker.link(feature.properties['Generació'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">Inversion</th>\
                            <td>' + (feature.properties['Inversion'] !== null ? autolinker.link(feature.properties['Inversion'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">Fecha de E</th>\
                            <td>' + (feature.properties['Fecha de E'] !== null ? autolinker.link(feature.properties['Fecha de E'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">Energétic</th>\
                            <td>' + (feature.properties['Energétic'] !== null ? autolinker.link(feature.properties['Energétic'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">Actividad</th>\
                            <td>' + (feature.properties['Actividad'] !== null ? autolinker.link(feature.properties['Actividad'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">Tecnologí</th>\
                            <td>' + (feature.properties['Tecnologí'] !== null ? autolinker.link(feature.properties['Tecnologí'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">Estado Act</th>\
                            <td>' + (feature.properties['Estado Act'] !== null ? autolinker.link(feature.properties['Estado Act'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">Ubicación</th>\
                            <td>' + (feature.properties['Ubicación'] !== null ? autolinker.link(feature.properties['Ubicación'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">Dirección</th>\
                            <td>' + (feature.properties['Dirección'] !== null ? autolinker.link(feature.properties['Dirección'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">Latitud</th>\
                            <td>' + (feature.properties['Latitud'] !== null ? autolinker.link(feature.properties['Latitud'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">Longitud</th>\
                            <td>' + (feature.properties['Longitud'] !== null ? autolinker.link(feature.properties['Longitud'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">EmpresaLí</th>\
                            <td>' + (feature.properties['EmpresaLí'] !== null ? autolinker.link(feature.properties['EmpresaLí'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">PaísDeOri</th>\
                            <td>' + (feature.properties['PaísDeOri'] !== null ? autolinker.link(feature.properties['PaísDeOri'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">Subasta</th>\
                            <td>' + (feature.properties['Subasta'] !== null ? autolinker.link(feature.properties['Subasta'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">Tipo</th>\
                            <td>' + (feature.properties['Tipo'] !== null ? autolinker.link(feature.properties['Tipo'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">Uso</th>\
                            <td>' + (feature.properties['Uso'] !== null ? autolinker.link(feature.properties['Uso'].toLocaleString()) : '') + '</td>\
                        </tr>\
                    </table>';
        layer.bindPopup(popupContent, { maxHeight: 400 });
    }

    function style_Fotovoltaicas_3_0() {
        return {
            pane: 'pane_Fotovoltaicas_3',
            shape: 'triangle',
            radius: 4.8,
            opacity: 1,
            color: 'rgba(35,35,35,1.0)',
            dashArray: '',
            lineCap: 'butt',
            lineJoin: 'miter',
            weight: 1,
            fill: true,
            fillOpacity: 1,
            fillColor: 'rgba(255,248,45,1.0)',
            interactive: true,
        }
    }
    map.createPane('pane_Fotovoltaicas_3');
    map.getPane('pane_Fotovoltaicas_3').style.zIndex = 403;
    map.getPane('pane_Fotovoltaicas_3').style['mix-blend-mode'] = 'normal';
    var layer_Fotovoltaicas_3 = new L.geoJson(json_Fotovoltaicas_3, {
        attribution: '',
        interactive: true,
        dataVar: 'json_Fotovoltaicas_3',
        layerName: 'layer_Fotovoltaicas_3',
        pane: 'pane_Fotovoltaicas_3',
        onEachFeature: pop_Fotovoltaicas_3,
        pointToLayer: function (feature, latlng) {
            var context = {
                feature: feature,
                variables: {}
            };
            return L.shapeMarker(latlng, style_Fotovoltaicas_3_0(feature));
        },
    });
    bounds_group.addLayer(layer_Fotovoltaicas_3);
    map.addLayer(layer_Fotovoltaicas_3);
    function pop_BusquedaFotovoltaicas_4(feature, layer) {
        var popupContent = '<table>\
                        <tr>\
                            <td colspan="2">' + (feature.properties['Número de Permiso'] !== null ? autolinker.link(feature.properties['Número de Permiso'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <td colspan="2">' + (feature.properties['Latitud'] !== null ? autolinker.link(feature.properties['Latitud'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <td colspan="2">' + (feature.properties['Longitud'] !== null ? autolinker.link(feature.properties['Longitud'].toLocaleString()) : '') + '</td>\
                        </tr>\
                    </table>';
        layer.bindPopup(popupContent, { maxHeight: 400 });
    }

    function style_BusquedaFotovoltaicas_4_0() {
        return {
            pane: 'pane_BusquedaFotovoltaicas_4',
            radius: 4.0,
            stroke: false,
            fill: true,
            fillOpacity: 1,
            fillColor: 'rgba(133,182,111,0.0)',
            interactive: false,
        }
    }
    map.createPane('pane_BusquedaFotovoltaicas_4');
    map.getPane('pane_BusquedaFotovoltaicas_4').style.zIndex = 404;
    map.getPane('pane_BusquedaFotovoltaicas_4').style['mix-blend-mode'] = 'normal';
    var layer_BusquedaFotovoltaicas_4 = new L.geoJson(json_BusquedaFotovoltaicas_4, {
        attribution: '',
        interactive: false,
        dataVar: 'json_BusquedaFotovoltaicas_4',
        layerName: 'layer_BusquedaFotovoltaicas_4',
        pane: 'pane_BusquedaFotovoltaicas_4',
        onEachFeature: pop_BusquedaFotovoltaicas_4,
        pointToLayer: function (feature, latlng) {
            var context = {
                feature: feature,
                variables: {}
            };
            return L.circleMarker(latlng, style_BusquedaFotovoltaicas_4_0(feature));
        },
    });
    bounds_group.addLayer(layer_BusquedaFotovoltaicas_4);
    var osmGeocoder = new L.Control.Geocoder({
        collapsed: true,
        position: 'topleft',
        text: 'Search',
        title: 'Testing'
    }).addTo(map);
    document.getElementsByClassName('leaflet-control-geocoder-icon')[0]
        .className += ' fa fa-search';
    document.getElementsByClassName('leaflet-control-geocoder-icon')[0]
        .title += 'Search for a place';
    var baseMaps = { "Mapa google": layer_Mapagoogle_1, "satelite google ": layer_satelitegoogle_0, };
    L.control.layers(baseMaps, { '<img src="/Mapas/Públicos/SEM/legend/Fotovoltaicas_3.png" /> Fotovoltaicas': layer_Fotovoltaicas_3, 'Irradiancia solar kWh/m^2/Día<br /><table><tr><td style="text-align: center;"><img src="/Mapas/Públicos/SEM/legend/IrradianciasolarkWhm2Da_2_4450.png" /></td><td>4- 4.5</td></tr><tr><td style="text-align: center;"><img src="/Mapas/Públicos/SEM/legend/IrradianciasolarkWhm2Da_2_4551.png" /></td><td>4.5 - 5</td></tr><tr><td style="text-align: center;"><img src="/Mapas/Públicos/SEM/legend/IrradianciasolarkWhm2Da_2_5552.png" /></td><td>5 - 5.5</td></tr><tr><td style="text-align: center;"><img src="/Mapas/Públicos/SEM/legend/IrradianciasolarkWhm2Da_2_5563.png" /></td><td>5.5 - 6</td></tr><tr><td style="text-align: center;"><img src="/Mapas/Públicos/SEM/legend/IrradianciasolarkWhm2Da_2_6654.png" /></td><td>6 - 6.5</td></tr><tr><td style="text-align: center;"><img src="/Mapas/Públicos/SEM/legend/IrradianciasolarkWhm2Da_2_655.png" /></td><td>>6.5</td></tr></table>': layer_IrradianciasolarkWhm2Da_2, }).addTo(map);

    L.control.scale({ position: 'bottomleft', maxWidth: 100, metric: true, imperial: false, updateWhenIdle: false }).addTo(map);
    setBounds();
    map.addControl(new L.Control.Search({
        layer: layer_BusquedaFotovoltaicas_4,
        initial: false,
        hideMarkerOnCollapse: true,
        propertyName: 'Número de Permiso'
    }));
    document.getElementsByClassName('search-button')[0].className +=
        ' fa fa-binoculars';


    /*Add google Street view https://www.mkrgeo-blog.com/quick-access-to-street-view-from-various-applications-based-on-leaflet-map-example/ */
    map.on('click', function (e) {
        let lat = e.latlng.lat.toPrecision(8);
        let lon = e.latlng.lng.toPrecision(8);
        const point = L.marker([lat, lon]).addTo(map)
            .bindPopup('<a href="http://maps.google.com/maps?q=&layer=c&cbll=' + lat + ',' + lon + '&cbp=11,0,0,0,0" target="blank"><b> Google Street View </b></a>').openPopup();
    })

</script>

<script>
    // Crea un objeto de mapa de LeafletJS en el contenedor "map"
    var map = L.map("map").setView([23.6345, -102.5528], 5);

    // Agrega una capa de OpenStreetMap al mapa
    L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
        attribution: "Map data &copy; <a href='https://www.openstreetmap.org/'>OpenStreetMap</a> contributors",
        maxZoom: 18,
    }).addTo(map);


</script>

<script>
    // Detecta el cambio de selección en el menú de estados
    document.getElementById("estado").addEventListener("change", function () {
        // Obtiene el valor seleccionado del menú de estados
        var estado = document.getElementById("estado").value;

               // Muestra el estado seleccionado en el mapa
        switch (estado) {
            case "ags":
                map.setView([22.025278, -102.372778], 9);
                break;
            case "bc":
                map.setView([30.391389, -115.291389], 7);
                break;
            case "bcs":
                map.setView([26.044444, -112.399722], 7);
                break;
            case "camp":
                map.setView([18.938333, -90.764722], 7);
                break;
            case "coah":
                map.setView([27.158056, -101.719444], 7);
                break;
            case "col":
                map.setView([19.101944, -103.014722], 9);
                break;
            case "chis":
                map.setView([16.753056, -92.6375], 7);
                break;
            case "chih":
                map.setView([28.673611, -106.102222], 7);
                break;
            case "cdmx":
                map.setView([19.432778, -99.133333], 10);
                break;
            case "dgo":
                map.setView([24.865278, -104.902222], 7);
                break;
            case "gto":
                map.setView([20.875, -101.478611], 8);
                break;
            case "gro":
                map.setView([17.814722, -100.353056], 8);
                break;
            case "hgo":
                map.setView([20.5325, -98.870556], 8);
                break;
            case "jal":
                map.setView([20.673611, -103.343333], 8);
                break;
            case "mex":
                map.setView([19.483611, -99.689722], 8);
                break;
            case "mich":
                map.setView([19.699722, -101.191389], 8);
                break;
            case "mor":
                map.setView([18.858611, -99.223611], 9);
                break;
            case "nay":
                map.setView([21.799444, -105.220833], 8);
                break;
            case "nl":
                map.setView([25.649167, -100.443611], 9);
                break;
            case "oax":
                map.setView([16.895833, -96.806667], 8);
                break;
            case "pue":
                map.setView([19.051389, -98.193889], 8);
                break;
            case "qro":
                map.setView([20.854722, -99.847222], 9);
                break;
            case "qroo":
                map.setView([19.642778, -87.072222], 8);
                break;
            case "slp":
                map.setView([22.156944, -100.985556], 8);
                break;
            case "sin":
                map.setView([24.288611, -107.366944], 8);
                break;
            case "son":
                map.setView([29.089444, -110.961667], 7);
                break;
            case "tab":
                map.setView([17.980000, -92.930000], 8);
                break;
            case "tamps":

                map.setView([24.014167, -98.844444], 7);
                break;
            case "tlax":
                map.setView([19.312222, -98.239722], 10);
                break;
            case "ver":
                map.setView([19.546389, -96.914167], 8);
                break;
            case "yuc":
                map.setView([20.891944, -89.528611], 8);
                break;
            case "zac":
                map.setView([22.770833, -102.583611], 8);
                break;
            default:
                map.setView([23.634501, -102.552784], 5);
                break;
        }
    });

</script>

