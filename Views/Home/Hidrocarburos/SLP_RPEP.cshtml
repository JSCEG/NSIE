@{
    ViewData["Title"] = "Hidrocarburos | Petrolíferos";
}

<div class="text-center ">
    <h1 class="display-4 titulo fw-bold ">@ViewData["Title"]</h1>
     <h4 class="pt-3  fw-bold "><i class="bi bi-geo-alt-fill"></i>Propuesta de Permisos de Expendio al Público en San Luis Potosí</h4>
</div>




<div id="map" style="height: 500px;"></div>

<div class="container">
    <div class="row d-flex justify-content-center">
        <br />
   @*    <div class="col col-sm-2"><img src="/Mapas/Públicos/SEM/legend/">Distribución Gas LP</div>*@
        @*  <div class="col col-sm-2"><img src="~/Mapas/Públicos/SEM/legend/AlmacenamientoGasLP_4.png">Almacenamiento Gas LP</div>
        <div class="col col-sm-2"><img src="~/Mapas/Públicos/SEM/legend/ExpendiosGasLP_3.png">Almacenamiento de Gas LP</div>*@
      
    </div>
</div>

<div class="container">
    <div class="row d-flex justify-content-center">
        <div class="col ">
            <button class="btn btn-cre-rojo" data-bs-toggle="offcanvas" data-bs-target="#ejemploOffcanvas">
               <i class="bi bi-info-circle-fill"></i> - Ver Información Acerca de este Mapa
            </button>
          
        </div>
@*        <div class="col ">
            <select id="estado" class="form-select  " aria-label=".form-select-sm ">
                <option selected>
                    Selecciona un estado:
                </option>
                <option value="ags">Aguascalientes</option>
                <option value="bc">Baja California</option>
                <option value="bcs">Baja California Sur</option>
                <option value="camp">Campeche</option>
                <option value="coah">Coahuila</option>
                <option value="col">Colima</option>
                <option value="chis">Chiapas</option>
                <option value="chih">Chihuahua</option>
                <option value="cdmx">Ciudad de México</option>
                <option value="dgo">Durango</option>
                <option value="gto">Guanajuato</option>
                <option value="gro">Guerrero</option>
                <option value="hgo">Hidalgo</option>
                <option value="jal">Jalisco</option>
                <option value="mex">México</option>
                <option value="mich">Michoacán</option>
                <option value="mor">Morelos</option>
                <option value="nay">Nayarit</option>
                <option value="nl">Nuevo León</option>
                <option value="oax">Oaxaca</option>
                <option value="pue">Puebla</option>
                <option value="qro">Querétaro</option>
                <option value="qroo">Quintana Roo</option>
                <option value="slp">San Luis Potosí</option>
                <option value="sin">Sinaloa</option>
                <option value="son">Sonora</option>
                <option value="tab">Tabasco</option>
                <option value="tamps">Tamaulipas</option>
                <option value="tlax">Tlaxcala</option>
                <option value="ver">Veracruz</option>
                <option value="yuc">Yucatán</option>
                <option value="zac">Zacatecas</option>
            </select>
        </div>*@

        <partial name="_Infomapas_PRPEP_SLP" />

    </div>
</div>
<hr />


  <hr />








<script src="~/Mapas/Públicos/SEM/js/qgis2web_expressions.js"></script>
<script src="~/Mapas/Públicos/SEM/js/leaflet.js"></script>
<script src="~/Mapas/Públicos/SEM/js/leaflet-svg-shape-markers.min.js"></script>
<script src="~/Mapas/Públicos/SEM/js/leaflet.rotatedMarker.js"></script>
<script src="~/Mapas/Públicos/SEM/js/leaflet.pattern.js"></script>
<script src="~/Mapas/Públicos/SEM/js/leaflet-hash.js"></script>
<script src="~/Mapas/Públicos/SEM/js/Autolinker.min.js"></script>
<script src="~/Mapas/Públicos/SEM/js/rbush.min.js"></script>
<script src="~/Mapas/Públicos/SEM/js/labelgun.min.js"></script>
<script src="~/Mapas/Públicos/SEM/js/labels.js"></script>
<script src="~/Mapas/Públicos/SEM/js/leaflet-control-geocoder.Geocoder.js"></script>
<script src="~/Mapas/Públicos/SEM/js/leaflet-measure.js"></script>
<script src="~/Mapas/Públicos/SEM/js/leaflet-search.js"></script>

@*<script src="~/Mapas/Públicos/SEM/data/SanLuisPotosi_2.js"></script>
<script src="~/Mapas/Públicos/SEM/data/BusquedapetroliferosSanLuisPotosi_3.js"></script>
<script src="~/Mapas/Públicos/SEM/data/2015_4.js"></script>
<script src="~/Mapas/Públicos/SEM/data/2022_5.js"></script>
<script src="~/Mapas/Públicos/SEM/data/2023_6.js"></script>
<script src="~/Mapas/Públicos/SEM/data/2024_7.js"></script>
<script src="~/Mapas/Públicos/SEM/data/2025_8.js"></script>
<script src="~/Mapas/Públicos/SEM/data/Expendios_9.js"></script>
<script src="~/Mapas/Públicos/SEM/data/Propuestasexpendios_10.js"></script>
*@
        <script src="~/Mapas/Públicos/SEM/data/SanLuisPotosi_2.js"></script>
        <script src="~/Mapas/Públicos/SEM/data/BusquedapetroliferosSanLuisPotosi_3.js"></script>
        <script src="~/Mapas/Públicos/SEM/data/2015_4.js"></script>
        <script src="~/Mapas/Públicos/SEM/data/2022_5.js"></script>
        <script src="~/Mapas/Públicos/SEM/data/2023_6.js"></script>
        <script src="~/Mapas/Públicos/SEM/data/2024_7.js"></script>
        <script src="~/Mapas/Públicos/SEM/data/2025_8.js"></script>
        <script src="~/Mapas/Públicos/SEM/data/Expendios_9.js"></script>
        <script src="~/Mapas/Públicos/SEM/data/Propuestasexpendio_10.js"></script>

     <script>

    var map = L.map('map', {
        zoomControl: true, maxZoom: 28, minZoom: 4
    }).fitBounds([[20.57093089478041, -103.54981709206176], [25.23484609579554, -96.71377969725224]]);
    var hash = new L.Hash(map);
    map.attributionControl.setPrefix('<a href="https://github.com/tomchadwin/qgis2web" target="_blank">qgis2web</a> &middot; <a href="https://leafletjs.com" title="A JS library for interactive maps">Leaflet</a> &middot; <a href="https://qgis.org">QGIS</a>');
    var autolinker = new Autolinker({ truncate: { length: 30, location: 'smart' } });
    var measureControl = new L.Control.Measure({
        position: 'topleft',
        primaryLengthUnit: 'meters',
        secondaryLengthUnit: 'kilometers',
        primaryAreaUnit: 'sqmeters',
        secondaryAreaUnit: 'hectares'
    });
    measureControl.addTo(map);
    document.getElementsByClassName('leaflet-control-measure-toggle')[0]
        .innerHTML = '';
    document.getElementsByClassName('leaflet-control-measure-toggle')[0]
        .className += ' fas fa-ruler';
    var bounds_group = new L.featureGroup([]);
    function setBounds() {
    }
    map.createPane('pane_Satlitegoogle_0');
    map.getPane('pane_Satlitegoogle_0').style.zIndex = 400;
    var layer_Satlitegoogle_0 = L.tileLayer('http://www.google.cn/maps/vt?lyrs=s@189&gl=cn&x={x}&y={y}&z={z}', {
        pane: 'pane_Satlitegoogle_0',
        opacity: 1.0,
        attribution: '',
        minZoom: 4,
        maxZoom: 28,
        minNativeZoom: 0,
        maxNativeZoom: 18
    });
    layer_Satlitegoogle_0;
    map.createPane('pane_Mapagoogle_1');
    map.getPane('pane_Mapagoogle_1').style.zIndex = 401;
    var layer_Mapagoogle_1 = L.tileLayer('https://mt1.google.com/vt/lyrs=r&x={x}&y={y}&z={z}', {
        pane: 'pane_Mapagoogle_1',
        opacity: 1.0,
        attribution: '',
        minZoom: 4,
        maxZoom: 28,
        minNativeZoom: 0,
        maxNativeZoom: 18
    });
    layer_Mapagoogle_1;
    map.addLayer(layer_Mapagoogle_1);
    function pop_SanLuisPotosi_2(feature, layer) {
        var popupContent = '<table>\
                        <tr>\
                            <th scope="row">CVEGEO</th>\
                            <td>' + (feature.properties['CVEGEO'] !== null ? autolinker.link(feature.properties['CVEGEO'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">CVE_ENT</th>\
                            <td>' + (feature.properties['CVE_ENT'] !== null ? autolinker.link(feature.properties['CVE_ENT'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">CVE_MUN</th>\
                            <td>' + (feature.properties['CVE_MUN'] !== null ? autolinker.link(feature.properties['CVE_MUN'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">Estados</th>\
                            <td>' + (feature.properties['Estados'] !== null ? autolinker.link(feature.properties['Estados'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">Municipios</th>\
                            <td>' + (feature.properties['Municipios'] !== null ? autolinker.link(feature.properties['Municipios'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">Area</th>\
                            <td>' + (feature.properties['Area'] !== null ? autolinker.link(feature.properties['Area'].toLocaleString()) : '') + '</td>\
                        </tr>\
                    </table>';
        layer.bindPopup(popupContent, { maxHeight: 400 });
    }

    function style_SanLuisPotosi_2_0() {
        return {
            pane: 'pane_SanLuisPotosi_2',
            opacity: 1,
            color: 'rgba(35,35,35,1.0)',
            dashArray: '',
            lineCap: 'butt',
            lineJoin: 'miter',
            weight: 1.0,
            fill: true,
            fillOpacity: 1,
            fillColor: 'rgba(221,201,163,0.5019607843137255)',
            interactive: true,
        }
    }
    map.createPane('pane_SanLuisPotosi_2');
    map.getPane('pane_SanLuisPotosi_2').style.zIndex = 402;
    map.getPane('pane_SanLuisPotosi_2').style['mix-blend-mode'] = 'normal';
    var layer_SanLuisPotosi_2 = new L.geoJson(json_SanLuisPotosi_2, {
        attribution: '',
        interactive: true,
        dataVar: 'json_SanLuisPotosi_2',
        layerName: 'layer_SanLuisPotosi_2',
        pane: 'pane_SanLuisPotosi_2',
        onEachFeature: pop_SanLuisPotosi_2,
        style: style_SanLuisPotosi_2_0,
    });
    bounds_group.addLayer(layer_SanLuisPotosi_2);
    map.addLayer(layer_SanLuisPotosi_2);
    function pop_BusquedapetroliferosSanLuisPotosi_3(feature, layer) {
        var popupContent = '<table>\
                        <tr>\
                            <td colspan="2">' + (feature.properties['NumeroPermiso'] !== null ? autolinker.link(feature.properties['NumeroPermiso'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <td colspan="2">' + (feature.properties['Latitud_GEO'] !== null ? autolinker.link(feature.properties['Latitud_GEO'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <td colspan="2">' + (feature.properties['Longitud_GEO'] !== null ? autolinker.link(feature.properties['Longitud_GEO'].toLocaleString()) : '') + '</td>\
                        </tr>\
                    </table>';
        layer.bindPopup(popupContent, { maxHeight: 400 });
    }

    function style_BusquedapetroliferosSanLuisPotosi_3_0() {
        return {
            pane: 'pane_BusquedapetroliferosSanLuisPotosi_3',
            radius: 0.0,
            stroke: false,
            fill: true,
            fillOpacity: 1,
            fillColor: 'rgba(232,113,141,0.0)',
            interactive: true,
        }
    }
    map.createPane('pane_BusquedapetroliferosSanLuisPotosi_3');
    map.getPane('pane_BusquedapetroliferosSanLuisPotosi_3').style.zIndex = 403;
    map.getPane('pane_BusquedapetroliferosSanLuisPotosi_3').style['mix-blend-mode'] = 'normal';
    var layer_BusquedapetroliferosSanLuisPotosi_3 = new L.geoJson(json_BusquedapetroliferosSanLuisPotosi_3, {
        attribution: '',
        interactive: true,
        dataVar: 'json_BusquedapetroliferosSanLuisPotosi_3',
        layerName: 'layer_BusquedapetroliferosSanLuisPotosi_3',
        pane: 'pane_BusquedapetroliferosSanLuisPotosi_3',
        onEachFeature: pop_BusquedapetroliferosSanLuisPotosi_3,
        pointToLayer: function (feature, latlng) {
            var context = {
                feature: feature,
                variables: {}
            };
            return L.circleMarker(latlng, style_BusquedapetroliferosSanLuisPotosi_3_0(feature));
        },
    });
    bounds_group.addLayer(layer_BusquedapetroliferosSanLuisPotosi_3);
    function pop_2015_4(feature, layer) {
        var popupContent = '<table>\
                        <tr>\
                            <th scope="row">CVEGEO</th>\
                            <td>' + (feature.properties['CVEGEO'] !== null ? autolinker.link(feature.properties['CVEGEO'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">CVE_ENT</th>\
                            <td>' + (feature.properties['CVE_ENT'] !== null ? autolinker.link(feature.properties['CVE_ENT'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">CVE_MUN</th>\
                            <td>' + (feature.properties['CVE_MUN'] !== null ? autolinker.link(feature.properties['CVE_MUN'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">Estados</th>\
                            <td>' + (feature.properties['Estados'] !== null ? autolinker.link(feature.properties['Estados'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">Municipios</th>\
                            <td>' + (feature.properties['Municipios'] !== null ? autolinker.link(feature.properties['Municipios'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">Area</th>\
                            <td>' + (feature.properties['Area'] !== null ? autolinker.link(feature.properties['Area'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">PV 2015</th>\
                            <td>' + (feature.properties['PV 2015'] !== null ? autolinker.link(feature.properties['PV 2015'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">EXP 2015</th>\
                            <td>' + (feature.properties['EXP 2015'] !== null ? autolinker.link(feature.properties['EXP 2015'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">DENSEXP 2015</th>\
                            <td>' + (feature.properties['DENSEXP 2015'] !== null ? autolinker.link(feature.properties['DENSEXP 2015'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">DENSVEH 2015</th>\
                            <td>' + (feature.properties['DENSVEH 2015'] !== null ? autolinker.link(feature.properties['DENSVEH 2015'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">EXP/VEH 2015</th>\
                            <td>' + (feature.properties['EXP/VEH 2015'] !== null ? autolinker.link(feature.properties['EXP/VEH 2015'].toLocaleString()) : '') + '</td>\
                        </tr>\
                    </table>';
        layer.bindPopup(popupContent, { maxHeight: 400 });
    }

    function style_2015_4_0() {
        return {
            pane: 'pane_2015_4',
            opacity: 1,
            color: 'rgba(35,35,35,1.0)',
            dashArray: '',
            lineCap: 'butt',
            lineJoin: 'miter',
            weight: 1.0,
            fill: true,
            fillOpacity: 1,
            fillColor: 'rgba(221,201,163,0.5019607843137255)',
            interactive: true,
        }
    }
    map.createPane('pane_2015_4');
    map.getPane('pane_2015_4').style.zIndex = 404;
    map.getPane('pane_2015_4').style['mix-blend-mode'] = 'normal';
    var layer_2015_4 = new L.geoJson(json_2015_4, {
        attribution: '',
        interactive: true,
        dataVar: 'json_2015_4',
        layerName: 'layer_2015_4',
        pane: 'pane_2015_4',
        onEachFeature: pop_2015_4,
        style: style_2015_4_0,
    });
    bounds_group.addLayer(layer_2015_4);
    function pop_2022_5(feature, layer) {
        var popupContent = '<table>\
                        <tr>\
                            <th scope="row">CVEGEO</th>\
                            <td>' + (feature.properties['CVEGEO'] !== null ? autolinker.link(feature.properties['CVEGEO'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">CVE_ENT</th>\
                            <td>' + (feature.properties['CVE_ENT'] !== null ? autolinker.link(feature.properties['CVE_ENT'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">CVE_MUN</th>\
                            <td>' + (feature.properties['CVE_MUN'] !== null ? autolinker.link(feature.properties['CVE_MUN'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">Estados</th>\
                            <td>' + (feature.properties['Estados'] !== null ? autolinker.link(feature.properties['Estados'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">Municipios</th>\
                            <td>' + (feature.properties['Municipios'] !== null ? autolinker.link(feature.properties['Municipios'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">Area</th>\
                            <td>' + (feature.properties['Area'] !== null ? autolinker.link(feature.properties['Area'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">PV 2022</th>\
                            <td>' + (feature.properties['PV 2022'] !== null ? autolinker.link(feature.properties['PV 2022'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">EXP 2022</th>\
                            <td>' + (feature.properties['EXP 2022'] !== null ? autolinker.link(feature.properties['EXP 2022'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">DENSEXP 2022</th>\
                            <td>' + (feature.properties['DENSEXP 2022'] !== null ? autolinker.link(feature.properties['DENSEXP 2022'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">DENSVEH 2022</th>\
                            <td>' + (feature.properties['DENSVEH 2022'] !== null ? autolinker.link(feature.properties['DENSVEH 2022'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">EXP/VEH 2022</th>\
                            <td>' + (feature.properties['EXP/VEH 2022'] !== null ? autolinker.link(feature.properties['EXP/VEH 2022'].toLocaleString()) : '') + '</td>\
                        </tr>\
                    </table>';
        layer.bindPopup(popupContent, { maxHeight: 400 });
    }

    function style_2022_5_0() {
        return {
            pane: 'pane_2022_5',
            opacity: 1,
            color: 'rgba(35,35,35,1.0)',
            dashArray: '',
            lineCap: 'butt',
            lineJoin: 'miter',
            weight: 1.0,
            fill: true,
            fillOpacity: 1,
            fillColor: 'rgba(221,201,163,0.5019607843137255)',
            interactive: true,
        }
    }
    map.createPane('pane_2022_5');
    map.getPane('pane_2022_5').style.zIndex = 405;
    map.getPane('pane_2022_5').style['mix-blend-mode'] = 'normal';
    var layer_2022_5 = new L.geoJson(json_2022_5, {
        attribution: '',
        interactive: true,
        dataVar: 'json_2022_5',
        layerName: 'layer_2022_5',
        pane: 'pane_2022_5',
        onEachFeature: pop_2022_5,
        style: style_2022_5_0,
    });
    bounds_group.addLayer(layer_2022_5);
    function pop_2023_6(feature, layer) {
        var popupContent = '<table>\
                        <tr>\
                            <th scope="row">CVEGEO</th>\
                            <td>' + (feature.properties['CVEGEO'] !== null ? autolinker.link(feature.properties['CVEGEO'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">CVE_ENT</th>\
                            <td>' + (feature.properties['CVE_ENT'] !== null ? autolinker.link(feature.properties['CVE_ENT'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">CVE_MUN</th>\
                            <td>' + (feature.properties['CVE_MUN'] !== null ? autolinker.link(feature.properties['CVE_MUN'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">Estados</th>\
                            <td>' + (feature.properties['Estados'] !== null ? autolinker.link(feature.properties['Estados'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">Municipios</th>\
                            <td>' + (feature.properties['Municipios'] !== null ? autolinker.link(feature.properties['Municipios'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">Area</th>\
                            <td>' + (feature.properties['Area'] !== null ? autolinker.link(feature.properties['Area'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">PV 2023</th>\
                            <td>' + (feature.properties['PV 2023'] !== null ? autolinker.link(feature.properties['PV 2023'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">EXP 2023</th>\
                            <td>' + (feature.properties['EXP 2023'] !== null ? autolinker.link(feature.properties['EXP 2023'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">DENSEXP 2023</th>\
                            <td>' + (feature.properties['DENSEXP 2023'] !== null ? autolinker.link(feature.properties['DENSEXP 2023'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">DENSVEH 2023</th>\
                            <td>' + (feature.properties['DENSVEH 2023'] !== null ? autolinker.link(feature.properties['DENSVEH 2023'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">EXP/VEH 2023</th>\
                            <td>' + (feature.properties['EXP/VEH 2023'] !== null ? autolinker.link(feature.properties['EXP/VEH 2023'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">Propuestas expendios</th>\
                            <td>' + (feature.properties['Propuestas expendios'] !== null ? autolinker.link(feature.properties['Propuestas expendios'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">Evaluación</th>\
                            <td>' + (feature.properties['Evaluación'] !== null ? autolinker.link(feature.properties['Evaluación'].toLocaleString()) : '') + '</td>\
                        </tr>\
                    </table>';
        layer.bindPopup(popupContent, { maxHeight: 400 });
    }

    function style_2023_6_0(feature) {
        switch (String(feature.properties['Evaluación'])) {
            case 'Aprobado':
                return {
                    pane: 'pane_2023_6',
                    opacity: 1,
                    color: 'rgba(35,35,35,1.0)',
                    dashArray: '',
                    lineCap: 'butt',
                    lineJoin: 'miter',
                    weight: 1.0,
                    fill: true,
                    fillOpacity: 1,
                    fillColor: 'rgba(151,210,140,1.0)',
                    interactive: true,
                }
                break;
            case 'No aprobado':
                return {
                    pane: 'pane_2023_6',
                    opacity: 1,
                    color: 'rgba(35,35,35,1.0)',
                    dashArray: '',
                    lineCap: 'butt',
                    lineJoin: 'miter',
                    weight: 1.0,
                    fill: true,
                    fillOpacity: 1,
                    fillColor: 'rgba(221,201,163,0.5019607843137255)',
                    interactive: true,
                }
                break;
        }
    }
    map.createPane('pane_2023_6');
    map.getPane('pane_2023_6').style.zIndex = 406;
    map.getPane('pane_2023_6').style['mix-blend-mode'] = 'normal';
    var layer_2023_6 = new L.geoJson(json_2023_6, {
        attribution: '',
        interactive: true,
        dataVar: 'json_2023_6',
        layerName: 'layer_2023_6',
        pane: 'pane_2023_6',
        onEachFeature: pop_2023_6,
        style: style_2023_6_0,
    });
    bounds_group.addLayer(layer_2023_6);
    function pop_2024_7(feature, layer) {
        var popupContent = '<table>\
                        <tr>\
                            <th scope="row">CVEGEO</th>\
                            <td>' + (feature.properties['CVEGEO'] !== null ? autolinker.link(feature.properties['CVEGEO'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">CVE_ENT</th>\
                            <td>' + (feature.properties['CVE_ENT'] !== null ? autolinker.link(feature.properties['CVE_ENT'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">CVE_MUN</th>\
                            <td>' + (feature.properties['CVE_MUN'] !== null ? autolinker.link(feature.properties['CVE_MUN'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">Estados</th>\
                            <td>' + (feature.properties['Estados'] !== null ? autolinker.link(feature.properties['Estados'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">Municipios</th>\
                            <td>' + (feature.properties['Municipios'] !== null ? autolinker.link(feature.properties['Municipios'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">Area</th>\
                            <td>' + (feature.properties['Area'] !== null ? autolinker.link(feature.properties['Area'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">PV 2024</th>\
                            <td>' + (feature.properties['PV 2024'] !== null ? autolinker.link(feature.properties['PV 2024'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">EXP 2024</th>\
                            <td>' + (feature.properties['EXP 2024'] !== null ? autolinker.link(feature.properties['EXP 2024'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">DENSEXP 2024</th>\
                            <td>' + (feature.properties['DENSEXP 2024'] !== null ? autolinker.link(feature.properties['DENSEXP 2024'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">DENSVEH 2024</th>\
                            <td>' + (feature.properties['DENSVEH 2024'] !== null ? autolinker.link(feature.properties['DENSVEH 2024'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">EXP/VEH 2024</th>\
                            <td>' + (feature.properties['EXP/VEH 2024'] !== null ? autolinker.link(feature.properties['EXP/VEH 2024'].toLocaleString()) : '') + '</td>\
                        </tr>\
                    </table>';
        layer.bindPopup(popupContent, { maxHeight: 400 });
    }

    function style_2024_7_0() {
        return {
            pane: 'pane_2024_7',
            opacity: 1,
            color: 'rgba(35,35,35,1.0)',
            dashArray: '',
            lineCap: 'butt',
            lineJoin: 'miter',
            weight: 1.0,
            fill: true,
            fillOpacity: 1,
            fillColor: 'rgba(221,201,163,0.5019607843137255)',
            interactive: true,
        }
    }
    map.createPane('pane_2024_7');
    map.getPane('pane_2024_7').style.zIndex = 407;
    map.getPane('pane_2024_7').style['mix-blend-mode'] = 'normal';
    var layer_2024_7 = new L.geoJson(json_2024_7, {
        attribution: '',
        interactive: true,
        dataVar: 'json_2024_7',
        layerName: 'layer_2024_7',
        pane: 'pane_2024_7',
        onEachFeature: pop_2024_7,
        style: style_2024_7_0,
    });
    bounds_group.addLayer(layer_2024_7);
    function pop_2025_8(feature, layer) {
        var popupContent = '<table>\
                        <tr>\
                            <th scope="row">CVEGEO</th>\
                            <td>' + (feature.properties['CVEGEO'] !== null ? autolinker.link(feature.properties['CVEGEO'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">CVE_ENT</th>\
                            <td>' + (feature.properties['CVE_ENT'] !== null ? autolinker.link(feature.properties['CVE_ENT'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">CVE_MUN</th>\
                            <td>' + (feature.properties['CVE_MUN'] !== null ? autolinker.link(feature.properties['CVE_MUN'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">Estados</th>\
                            <td>' + (feature.properties['Estados'] !== null ? autolinker.link(feature.properties['Estados'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">Municipios</th>\
                            <td>' + (feature.properties['Municipios'] !== null ? autolinker.link(feature.properties['Municipios'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">Area</th>\
                            <td>' + (feature.properties['Area'] !== null ? autolinker.link(feature.properties['Area'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">PV 2025</th>\
                            <td>' + (feature.properties['PV 2025'] !== null ? autolinker.link(feature.properties['PV 2025'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">EXP 2025</th>\
                            <td>' + (feature.properties['EXP 2025'] !== null ? autolinker.link(feature.properties['EXP 2025'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">DENSEXP 2025</th>\
                            <td>' + (feature.properties['DENSEXP 2025'] !== null ? autolinker.link(feature.properties['DENSEXP 2025'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">DENSVEH 2025</th>\
                            <td>' + (feature.properties['DENSVEH 2025'] !== null ? autolinker.link(feature.properties['DENSVEH 2025'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">EXP/VEH 2025</th>\
                            <td>' + (feature.properties['EXP/VEH 2025'] !== null ? autolinker.link(feature.properties['EXP/VEH 2025'].toLocaleString()) : '') + '</td>\
                        </tr>\
                    </table>';
        layer.bindPopup(popupContent, { maxHeight: 400 });
    }

    function style_2025_8_0() {
        return {
            pane: 'pane_2025_8',
            opacity: 1,
            color: 'rgba(35,35,35,1.0)',
            dashArray: '',
            lineCap: 'butt',
            lineJoin: 'miter',
            weight: 1.0,
            fill: true,
            fillOpacity: 1,
            fillColor: 'rgba(221,201,163,0.5019607843137255)',
            interactive: true,
        }
    }
    map.createPane('pane_2025_8');
    map.getPane('pane_2025_8').style.zIndex = 408;
    map.getPane('pane_2025_8').style['mix-blend-mode'] = 'normal';
    var layer_2025_8 = new L.geoJson(json_2025_8, {
        attribution: '',
        interactive: true,
        dataVar: 'json_2025_8',
        layerName: 'layer_2025_8',
        pane: 'pane_2025_8',
        onEachFeature: pop_2025_8,
        style: style_2025_8_0,
    });
    bounds_group.addLayer(layer_2025_8);
    function pop_Expendios_9(feature, layer) {
        var popupContent = '<table>\
                        <tr>\
                            <td colspan="2"><strong>NumeroPerm</strong><br />' + (feature.properties['NumeroPerm'] !== null ? autolinker.link(feature.properties['NumeroPerm'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">Razón soc</th>\
                            <td>' + (feature.properties['Razón soc'] !== null ? autolinker.link(feature.properties['Razón soc'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">FechaOtorg</th>\
                            <td>' + (feature.properties['FechaOtorg'] !== null ? autolinker.link(feature.properties['FechaOtorg'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">Latitud_GE</th>\
                            <td>' + (feature.properties['Latitud_GE'] !== null ? autolinker.link(feature.properties['Latitud_GE'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">Longitud_G</th>\
                            <td>' + (feature.properties['Longitud_G'] !== null ? autolinker.link(feature.properties['Longitud_G'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">Calle_num_</th>\
                            <td>' + (feature.properties['Calle_num_'] !== null ? autolinker.link(feature.properties['Calle_num_'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">Colonia_ES</th>\
                            <td>' + (feature.properties['Colonia_ES'] !== null ? autolinker.link(feature.properties['Colonia_ES'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">Entidad_Fe</th>\
                            <td>' + (feature.properties['Entidad_Fe'] !== null ? autolinker.link(feature.properties['Entidad_Fe'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">Municipio_</th>\
                            <td>' + (feature.properties['Municipio_'] !== null ? autolinker.link(feature.properties['Municipio_'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">Codigo_Pos</th>\
                            <td>' + (feature.properties['Codigo_Pos'] !== null ? autolinker.link(feature.properties['Codigo_Pos'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">UltimaImag</th>\
                            <td>' + (feature.properties['UltimaImag'] !== null ? autolinker.link(feature.properties['UltimaImag'].toLocaleString()) : '') + '</td>\
                        </tr>\
                    </table>';
        layer.bindPopup(popupContent, { maxHeight: 400 });
    }

    function style_Expendios_9_0() {
        return {
            pane: 'pane_Expendios_9',
            shape: 'diamond',
            radius: 4.8,
            opacity: 1,
            color: 'rgba(255,255,255,1.0)',
            dashArray: '',
            lineCap: 'butt',
            lineJoin: 'miter',
            weight: 1,
            fill: true,
            fillOpacity: 1,
            fillColor: 'rgba(35,91,78,1.0)',
            interactive: true,
        }
    }
    map.createPane('pane_Expendios_9');
    map.getPane('pane_Expendios_9').style.zIndex = 409;
    map.getPane('pane_Expendios_9').style['mix-blend-mode'] = 'normal';
    var layer_Expendios_9 = new L.geoJson(json_Expendios_9, {
        attribution: '',
        interactive: true,
        dataVar: 'json_Expendios_9',
        layerName: 'layer_Expendios_9',
        pane: 'pane_Expendios_9',
        onEachFeature: pop_Expendios_9,
        pointToLayer: function (feature, latlng) {
            var context = {
                feature: feature,
                variables: {}
            };
            return L.shapeMarker(latlng, style_Expendios_9_0(feature));
        },
    });
    bounds_group.addLayer(layer_Expendios_9);
    map.addLayer(layer_Expendios_9);
    function pop_Propuestasexpendio_10(feature, layer) {
        var popupContent = '<table>\
                        <tr>\
                            <td colspan="2"><strong>ID</strong><br />' + (feature.properties['ID'] !== null ? autolinker.link(feature.properties['ID'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">Entidad</th>\
                            <td>' + (feature.properties['Entidad'] !== null ? autolinker.link(feature.properties['Entidad'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">Municipio</th>\
                            <td>' + (feature.properties['Municipio'] !== null ? autolinker.link(feature.properties['Municipio'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">DOMICILIO</th>\
                            <td>' + (feature.properties['DOMICILIO'] !== null ? autolinker.link(feature.properties['DOMICILIO'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">X Geo</th>\
                            <td>' + (feature.properties['X Geo'] !== null ? autolinker.link(feature.properties['X Geo'].toLocaleString()) : '') + '</td>\
                        </tr>\
                        <tr>\
                            <th scope="row">Y Geo</th>\
                            <td>' + (feature.properties['Y Geo'] !== null ? autolinker.link(feature.properties['Y Geo'].toLocaleString()) : '') + '</td>\
                        </tr>\
                    </table>';
        layer.bindPopup(popupContent, { maxHeight: 400 });
    }

    function style_Propuestasexpendio_10_0(feature) {
        if (feature.properties['ID'] >= 55.000000 && feature.properties['ID'] <= 294.666667) {
            return {
                pane: 'pane_Propuestasexpendio_10',
                shape: 'diamond',
                radius: 8.0,
                opacity: 1,
                color: 'rgba(35,35,35,1.0)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 1,
                fill: true,
                fillOpacity: 1,
                fillColor: 'rgba(51,160,44,1.0)',
                interactive: true,
            }
        }
        if (feature.properties['ID'] >= 294.666667 && feature.properties['ID'] <= 741.333333) {
            return {
                pane: 'pane_Propuestasexpendio_10',
                shape: 'diamond',
                radius: 6.0,
                opacity: 1,
                color: 'rgba(35,35,35,1.0)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 1,
                fill: true,
                fillOpacity: 1,
                fillColor: 'rgba(51,160,44,1.0)',
                interactive: true,
            }
        }
        if (feature.properties['ID'] >= 741.333333 && feature.properties['ID'] <= 840.000000) {
            return {
                pane: 'pane_Propuestasexpendio_10',
                shape: 'diamond',
                radius: 4.0,
                opacity: 1,
                color: 'rgba(35,35,35,1.0)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 1,
                fill: true,
                fillOpacity: 1,
                fillColor: 'rgba(51,160,44,1.0)',
                interactive: true,
            }
        }
    }
    map.createPane('pane_Propuestasexpendio_10');
    map.getPane('pane_Propuestasexpendio_10').style.zIndex = 410;
    map.getPane('pane_Propuestasexpendio_10').style['mix-blend-mode'] = 'normal';
    var layer_Propuestasexpendio_10 = new L.geoJson(json_Propuestasexpendio_10, {
        attribution: '',
        interactive: true,
        dataVar: 'json_Propuestasexpendio_10',
        layerName: 'layer_Propuestasexpendio_10',
        pane: 'pane_Propuestasexpendio_10',
        onEachFeature: pop_Propuestasexpendio_10,
        pointToLayer: function (feature, latlng) {
            var context = {
                feature: feature,
                variables: {}
            };
            return L.shapeMarker(latlng, style_Propuestasexpendio_10_0(feature));
        },
    });
    bounds_group.addLayer(layer_Propuestasexpendio_10);
    map.addLayer(layer_Propuestasexpendio_10);
    var osmGeocoder = new L.Control.Geocoder({
        collapsed: true,
        position: 'topleft',
        text: 'Search',
        title: 'Testing'
    }).addTo(map);
    document.getElementsByClassName('leaflet-control-geocoder-icon')[0]
        .className += ' fa fa-search';
    document.getElementsByClassName('leaflet-control-geocoder-icon')[0]
        .title += 'Search for a place';
    var baseMaps = {};

        L.control.layers(baseMaps,{'Propuestas expendio<br /><table><tr><td style="text-align: center;"><img src="/Mapas/Públicos/SEM/legend/Propuestasexpendio_10_552950.png" /></td><td>55 - 295</td></tr><tr><td style="text-align: center;"><img src="/Mapas/Públicos/SEM/legend/Propuestasexpendio_10_2957411.png" /></td><td>295 - 741</td></tr><tr><td style="text-align: center;"><img src="/Mapas/Públicos/SEM/legend/Propuestasexpendio_10_7418402.png" /></td><td>741 - 840</td></tr></table>': layer_Propuestasexpendio_10,'<img src="/Mapas/Públicos/SEM/legend/Expendios_9.png" /> Expendios': layer_Expendios_9,'<img src="/Mapas/Públicos/SEM/legend/2025_8.png" /> 2025': layer_2025_8,'<img src="/Mapas/Públicos/SEM/legend/2024_7.png" /> 2024': layer_2024_7,'2023<br /><table><tr><td style="text-align: center;"><img src="/Mapas/Públicos/SEM/legend/2023_6_Aprobado0.png" /></td><td>Aprobado</td></tr><tr><td style="text-align: center;"><img src="/Mapas/Públicos/SEM/legend/2023_6_Noaprobado1.png" /></td><td>No aprobado</td></tr></table>': layer_2023_6,'<img src="/Mapas/Públicos/SEM/legend/2022_5.png" /> 2022': layer_2022_5,'<img src="/Mapas/Públicos/SEM/legend/2015_4.png" /> 2015': layer_2015_4,'<img src="/Mapas/Públicos/SEM/legend/SanLuisPotosi_2.png" /> San Luis Potosi ': layer_SanLuisPotosi_2,"Mapa google": layer_Mapagoogle_1,"Satélite google": layer_Satlitegoogle_0,}).addTo(map);L.control.scale({position: 'bottomleft', maxWidth: 100, metric: true, imperial: false, updateWhenIdle: false}).addTo(map);
        setBounds();
        map.addControl(new L.Control.Search({
            layer: layer_BusquedapetroliferosSanLuisPotosi_3,
            initial: false,
            hideMarkerOnCollapse: true,
            propertyName: 'NumeroPermiso'}));
        document.getElementsByClassName('search-button')[0].className +=
         ' fa fa-binoculars';
             map.on('click', function (e) {
        let lat = e.latlng.lat.toPrecision(8);
        let lon = e.latlng.lng.toPrecision(8);
        const point = L.marker([lat, lon]).addTo(map)
            .bindPopup('<a href="http://maps.google.com/maps?q=&layer=c&cbll=' + lat + ',' + lon + '&cbp=11,0,0,0,0" target="blank"><b> Google Street View </b></a>').openPopup();
    })

        </script>

<script>
    // Crea un objeto de mapa de LeafletJS en el contenedor "map"
    var map = L.map("map").setView([23.6345, -102.5528], 5);

    // Agrega una capa de OpenStreetMap al mapa
    L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
        attribution: "Map data &copy; <a href='https://www.openstreetmap.org/'>OpenStreetMap</a> contributors",
        maxZoom: 18,
    }).addTo(map);


</script>

<script>
    // Detecta el cambio de selección en el menú de estados
    document.getElementById("estado").addEventListener("change", function () {
        // Obtiene el valor seleccionado del menú de estados
        var estado = document.getElementById("estado").value;

               // Muestra el estado seleccionado en el mapa
        switch (estado) {
            case "ags":
                map.setView([22.025278, -102.372778], 9);
                break;
            case "bc":
                map.setView([30.391389, -115.291389], 7);
                break;
            case "bcs":
                map.setView([26.044444, -112.399722], 7);
                break;
            case "camp":
                map.setView([18.938333, -90.764722], 7);
                break;
            case "coah":
                map.setView([27.158056, -101.719444], 7);
                break;
            case "col":
                map.setView([19.101944, -103.014722], 9);
                break;
            case "chis":
                map.setView([16.753056, -92.6375], 7);
                break;
            case "chih":
                map.setView([28.673611, -106.102222], 7);
                break;
            case "cdmx":
                map.setView([19.432778, -99.133333], 10);
                break;
            case "dgo":
                map.setView([24.865278, -104.902222], 7);
                break;
            case "gto":
                map.setView([20.875, -101.478611], 8);
                break;
            case "gro":
                map.setView([17.814722, -100.353056], 8);
                break;
            case "hgo":
                map.setView([20.5325, -98.870556], 8);
                break;
            case "jal":
                map.setView([20.673611, -103.343333], 8);
                break;
            case "mex":
                map.setView([19.483611, -99.689722], 8);
                break;
            case "mich":
                map.setView([19.699722, -101.191389], 8);
                break;
            case "mor":
                map.setView([18.858611, -99.223611], 9);
                break;
            case "nay":
                map.setView([21.799444, -105.220833], 8);
                break;
            case "nl":
                map.setView([25.649167, -100.443611], 9);
                break;
            case "oax":
                map.setView([16.895833, -96.806667], 8);
                break;
            case "pue":
                map.setView([19.051389, -98.193889], 8);
                break;
            case "qro":
                map.setView([20.854722, -99.847222], 9);
                break;
            case "qroo":
                map.setView([19.642778, -87.072222], 8);
                break;
            case "slp":
                map.setView([22.156944, -100.985556], 8);
                break;
            case "sin":
                map.setView([24.288611, -107.366944], 8);
                break;
            case "son":
                map.setView([29.089444, -110.961667], 7);
                break;
            case "tab":
                map.setView([17.980000, -92.930000], 8);
                break;
            case "tamps":

                map.setView([24.014167, -98.844444], 7);
                break;
            case "tlax":
                map.setView([19.312222, -98.239722], 10);
                break;
            case "ver":
                map.setView([19.546389, -96.914167], 8);
                break;
            case "yuc":
                map.setView([20.891944, -89.528611], 8);
                break;
            case "zac":
                map.setView([22.770833, -102.583611], 8);
                break;
            default:
                map.setView([23.634501, -102.552784], 5);
                break;
        }
    });

</script>

